//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var global = Package.meteor.global;
var meteorEnv = Package.meteor.meteorEnv;

/* Package-scope variables */
var lodash, _;

(function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/erasaur_meteor-lodash/lodash/lodash.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * @license                                                                                                            // 2
 * lodash 4.0.0 (Custom Build) <https://lodash.com/>                                                                   // 3
 * Build: `lodash -d -o ./lodash.js`                                                                                   // 4
 * Copyright 2012-2016 The Dojo Foundation <http://dojofoundation.org/>                                                // 5
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>                                                      // 6
 * Copyright 2009-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors                            // 7
 * Available under MIT license <https://lodash.com/license>                                                            // 8
 */                                                                                                                    // 9
;(function() {                                                                                                         // 10
                                                                                                                       // 11
  /** Used as a safe reference for `undefined` in pre-ES5 environments. */                                             // 12
  var undefined;                                                                                                       // 13
                                                                                                                       // 14
  /** Used as the semantic version number. */                                                                          // 15
  var VERSION = '4.0.0';                                                                                               // 16
                                                                                                                       // 17
  /** Used to compose bitmasks for wrapper metadata. */                                                                // 18
  var BIND_FLAG = 1,                                                                                                   // 19
      BIND_KEY_FLAG = 2,                                                                                               // 20
      CURRY_BOUND_FLAG = 4,                                                                                            // 21
      CURRY_FLAG = 8,                                                                                                  // 22
      CURRY_RIGHT_FLAG = 16,                                                                                           // 23
      PARTIAL_FLAG = 32,                                                                                               // 24
      PARTIAL_RIGHT_FLAG = 64,                                                                                         // 25
      ARY_FLAG = 128,                                                                                                  // 26
      REARG_FLAG = 256,                                                                                                // 27
      FLIP_FLAG = 512;                                                                                                 // 28
                                                                                                                       // 29
  /** Used to compose bitmasks for comparison styles. */                                                               // 30
  var UNORDERED_COMPARE_FLAG = 1,                                                                                      // 31
      PARTIAL_COMPARE_FLAG = 2;                                                                                        // 32
                                                                                                                       // 33
  /** Used as default options for `_.truncate`. */                                                                     // 34
  var DEFAULT_TRUNC_LENGTH = 30,                                                                                       // 35
      DEFAULT_TRUNC_OMISSION = '...';                                                                                  // 36
                                                                                                                       // 37
  /** Used to detect hot functions by number of calls within a span of milliseconds. */                                // 38
  var HOT_COUNT = 150,                                                                                                 // 39
      HOT_SPAN = 16;                                                                                                   // 40
                                                                                                                       // 41
  /** Used as the size to enable large array optimizations. */                                                         // 42
  var LARGE_ARRAY_SIZE = 200;                                                                                          // 43
                                                                                                                       // 44
  /** Used to indicate the type of lazy iteratees. */                                                                  // 45
  var LAZY_FILTER_FLAG = 1,                                                                                            // 46
      LAZY_MAP_FLAG = 2,                                                                                               // 47
      LAZY_WHILE_FLAG = 3;                                                                                             // 48
                                                                                                                       // 49
  /** Used as the `TypeError` message for "Functions" methods. */                                                      // 50
  var FUNC_ERROR_TEXT = 'Expected a function';                                                                         // 51
                                                                                                                       // 52
  /** Used to stand-in for `undefined` hash values. */                                                                 // 53
  var HASH_UNDEFINED = '__lodash_hash_undefined__';                                                                    // 54
                                                                                                                       // 55
  /** Used as references for various `Number` constants. */                                                            // 56
  var INFINITY = 1 / 0,                                                                                                // 57
      MAX_SAFE_INTEGER = 9007199254740991,                                                                             // 58
      MAX_INTEGER = 1.7976931348623157e+308,                                                                           // 59
      NAN = 0 / 0;                                                                                                     // 60
                                                                                                                       // 61
  /** Used as references for the maximum length and index of an array. */                                              // 62
  var MAX_ARRAY_LENGTH = 4294967295,                                                                                   // 63
      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,                                                                          // 64
      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;                                                                  // 65
                                                                                                                       // 66
  /** Used as the internal argument placeholder. */                                                                    // 67
  var PLACEHOLDER = '__lodash_placeholder__';                                                                          // 68
                                                                                                                       // 69
  /** `Object#toString` result references. */                                                                          // 70
  var argsTag = '[object Arguments]',                                                                                  // 71
      arrayTag = '[object Array]',                                                                                     // 72
      boolTag = '[object Boolean]',                                                                                    // 73
      dateTag = '[object Date]',                                                                                       // 74
      errorTag = '[object Error]',                                                                                     // 75
      funcTag = '[object Function]',                                                                                   // 76
      genTag = '[object GeneratorFunction]',                                                                           // 77
      mapTag = '[object Map]',                                                                                         // 78
      numberTag = '[object Number]',                                                                                   // 79
      objectTag = '[object Object]',                                                                                   // 80
      regexpTag = '[object RegExp]',                                                                                   // 81
      setTag = '[object Set]',                                                                                         // 82
      stringTag = '[object String]',                                                                                   // 83
      symbolTag = '[object Symbol]',                                                                                   // 84
      weakMapTag = '[object WeakMap]';                                                                                 // 85
                                                                                                                       // 86
  var arrayBufferTag = '[object ArrayBuffer]',                                                                         // 87
      float32Tag = '[object Float32Array]',                                                                            // 88
      float64Tag = '[object Float64Array]',                                                                            // 89
      int8Tag = '[object Int8Array]',                                                                                  // 90
      int16Tag = '[object Int16Array]',                                                                                // 91
      int32Tag = '[object Int32Array]',                                                                                // 92
      uint8Tag = '[object Uint8Array]',                                                                                // 93
      uint8ClampedTag = '[object Uint8ClampedArray]',                                                                  // 94
      uint16Tag = '[object Uint16Array]',                                                                              // 95
      uint32Tag = '[object Uint32Array]';                                                                              // 96
                                                                                                                       // 97
  /** Used to match empty string literals in compiled template source. */                                              // 98
  var reEmptyStringLeading = /\b__p \+= '';/g,                                                                         // 99
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,                                                                      // 100
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;                                                         // 101
                                                                                                                       // 102
  /** Used to match HTML entities and HTML characters. */                                                              // 103
  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39|#96);/g,                                                                 // 104
      reUnescapedHtml = /[&<>"'`]/g,                                                                                   // 105
      reHasEscapedHtml = RegExp(reEscapedHtml.source),                                                                 // 106
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);                                                             // 107
                                                                                                                       // 108
  /** Used to match template delimiters. */                                                                            // 109
  var reEscape = /<%-([\s\S]+?)%>/g,                                                                                   // 110
      reEvaluate = /<%([\s\S]+?)%>/g,                                                                                  // 111
      reInterpolate = /<%=([\s\S]+?)%>/g;                                                                              // 112
                                                                                                                       // 113
  /** Used to match property names within property paths. */                                                           // 114
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,                                               // 115
      reIsPlainProp = /^\w*$/,                                                                                         // 116
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]/g;                              // 117
                                                                                                                       // 118
  /** Used to match `RegExp` [syntax characters](http://ecma-international.org/ecma-262/6.0/#sec-patterns). */         // 119
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,                                                                            // 120
      reHasRegExpChar = RegExp(reRegExpChar.source);                                                                   // 121
                                                                                                                       // 122
  /** Used to match leading and trailing whitespace. */                                                                // 123
  var reTrim = /^\s+|\s+$/g,                                                                                           // 124
      reTrimStart = /^\s+/,                                                                                            // 125
      reTrimEnd = /\s+$/;                                                                                              // 126
                                                                                                                       // 127
  /** Used to match backslashes in property paths. */                                                                  // 128
  var reEscapeChar = /\\(\\)?/g;                                                                                       // 129
                                                                                                                       // 130
  /** Used to match [ES template delimiters](http://ecma-international.org/ecma-262/6.0/#sec-template-literal-lexical-components). */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;                                                                // 132
                                                                                                                       // 133
  /** Used to match `RegExp` flags from their coerced string values. */                                                // 134
  var reFlags = /\w*$/;                                                                                                // 135
                                                                                                                       // 136
  /** Used to detect hexadecimal string values. */                                                                     // 137
  var reHasHexPrefix = /^0x/i;                                                                                         // 138
                                                                                                                       // 139
  /** Used to detect bad signed hexadecimal string values. */                                                          // 140
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;                                                                               // 141
                                                                                                                       // 142
  /** Used to detect binary string values. */                                                                          // 143
  var reIsBinary = /^0b[01]+$/i;                                                                                       // 144
                                                                                                                       // 145
  /** Used to detect host constructors (Safari > 5). */                                                                // 146
  var reIsHostCtor = /^\[object .+?Constructor\]$/;                                                                    // 147
                                                                                                                       // 148
  /** Used to detect octal string values. */                                                                           // 149
  var reIsOctal = /^0o[0-7]+$/i;                                                                                       // 150
                                                                                                                       // 151
  /** Used to detect unsigned integer values. */                                                                       // 152
  var reIsUint = /^(?:0|[1-9]\d*)$/;                                                                                   // 153
                                                                                                                       // 154
  /** Used to match latin-1 supplementary letters (excluding mathematical operators). */                               // 155
  var reLatin1 = /[\xc0-\xd6\xd8-\xde\xdf-\xf6\xf8-\xff]/g;                                                            // 156
                                                                                                                       // 157
  /** Used to ensure capturing order of template delimiters. */                                                        // 158
  var reNoMatch = /($^)/;                                                                                              // 159
                                                                                                                       // 160
  /** Used to match unescaped characters in compiled string literals. */                                               // 161
  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;                                                                    // 162
                                                                                                                       // 163
  /** Used to compose unicode character classes. */                                                                    // 164
  var rsAstralRange = '\\ud800-\\udfff',                                                                               // 165
      rsComboRange = '\\u0300-\\u036f\\ufe20-\\ufe23',                                                                 // 166
      rsDingbatRange = '\\u2700-\\u27bf',                                                                              // 167
      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',                                                                      // 168
      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',                                                                          // 169
      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',                                                 // 170
      rsQuoteRange = '\\u2018\\u2019\\u201c\\u201d',                                                                   // 171
      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',                                                                      // 173
      rsVarRange = '\\ufe0e\\ufe0f',                                                                                   // 174
      rsBreakRange = rsMathOpRange + rsNonCharRange + rsQuoteRange + rsSpaceRange;                                     // 175
                                                                                                                       // 176
  /** Used to compose unicode capture groups. */                                                                       // 177
  var rsAstral = '[' + rsAstralRange + ']',                                                                            // 178
      rsBreak = '[' + rsBreakRange + ']',                                                                              // 179
      rsCombo = '[' + rsComboRange + ']',                                                                              // 180
      rsDigits = '\\d+',                                                                                               // 181
      rsDingbat = '[' + rsDingbatRange + ']',                                                                          // 182
      rsLower = '[' + rsLowerRange + ']',                                                                              // 183
      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',    // 184
      rsModifier = '(?:\\ud83c[\\udffb-\\udfff])',                                                                     // 185
      rsNonAstral = '[^' + rsAstralRange + ']',                                                                        // 186
      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',                                                                  // 187
      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',                                                               // 188
      rsUpper = '[' + rsUpperRange + ']',                                                                              // 189
      rsZWJ = '\\u200d';                                                                                               // 190
                                                                                                                       // 191
  /** Used to compose unicode regexes. */                                                                              // 192
  var rsLowerMisc = '(?:' + rsLower + '|' + rsMisc + ')',                                                              // 193
      rsUpperMisc = '(?:' + rsUpper + '|' + rsMisc + ')',                                                              // 194
      reOptMod = rsModifier + '?',                                                                                     // 195
      rsOptVar = '[' + rsVarRange + ']?',                                                                              // 196
      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
      rsSeq = rsOptVar + reOptMod + rsOptJoin,                                                                         // 198
      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,                                   // 199
      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';     // 200
                                                                                                                       // 201
  /** Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks). */       // 202
  var reComboMark = RegExp(rsCombo, 'g');                                                                              // 203
                                                                                                                       // 204
  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */                            // 205
  var reComplexSymbol = RegExp(rsSymbol + rsSeq, 'g');                                                                 // 206
                                                                                                                       // 207
  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
  var reHasComplexSymbol = RegExp('[' + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + ']');                      // 209
                                                                                                                       // 210
  /** Used to match non-compound words composed of alphanumeric characters. */                                         // 211
  var reBasicWord = /[a-zA-Z0-9]+/g;                                                                                   // 212
                                                                                                                       // 213
  /** Used to match complex or compound words. */                                                                      // 214
  var reComplexWord = RegExp([                                                                                         // 215
    rsUpper + '?' + rsLower + '+(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',                                        // 216
    rsUpperMisc + '+(?=' + [rsBreak, rsUpper + rsLowerMisc, '$'].join('|') + ')',                                      // 217
    rsUpper + '?' + rsLowerMisc + '+',                                                                                 // 218
    rsDigits + '(?:' + rsLowerMisc + '+)?',                                                                            // 219
    rsEmoji                                                                                                            // 220
  ].join('|'), 'g');                                                                                                   // 221
                                                                                                                       // 222
  /** Used to detect strings that need a more robust regexp to match words. */                                         // 223
  var reHasComplexWord = /[a-z][A-Z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;                                       // 224
                                                                                                                       // 225
  /** Used to assign default `context` object properties. */                                                           // 226
  var contextProps = [                                                                                                 // 227
    'Array', 'Date', 'Error', 'Float32Array', 'Float64Array', 'Function',                                              // 228
    'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',                                                  // 229
    'Reflect', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',                                         // 230
    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap', '_',                                                 // 231
    'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'                                                               // 232
  ];                                                                                                                   // 233
                                                                                                                       // 234
  /** Used to make template sourceURLs easier to identify. */                                                          // 235
  var templateCounter = -1;                                                                                            // 236
                                                                                                                       // 237
  /** Used to identify `toStringTag` values of typed arrays. */                                                        // 238
  var typedArrayTags = {};                                                                                             // 239
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =                                                            // 240
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =                                                                 // 241
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =                                                                // 242
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =                                                        // 243
  typedArrayTags[uint32Tag] = true;                                                                                    // 244
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =                                                                 // 245
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =                                                           // 246
  typedArrayTags[dateTag] = typedArrayTags[errorTag] =                                                                 // 247
  typedArrayTags[funcTag] = typedArrayTags[mapTag] =                                                                   // 248
  typedArrayTags[numberTag] = typedArrayTags[objectTag] =                                                              // 249
  typedArrayTags[regexpTag] = typedArrayTags[setTag] =                                                                 // 250
  typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;                                                      // 251
                                                                                                                       // 252
  /** Used to identify `toStringTag` values supported by `_.clone`. */                                                 // 253
  var cloneableTags = {};                                                                                              // 254
  cloneableTags[argsTag] = cloneableTags[arrayTag] =                                                                   // 255
  cloneableTags[arrayBufferTag] = cloneableTags[boolTag] =                                                             // 256
  cloneableTags[dateTag] = cloneableTags[float32Tag] =                                                                 // 257
  cloneableTags[float64Tag] = cloneableTags[int8Tag] =                                                                 // 258
  cloneableTags[int16Tag] = cloneableTags[int32Tag] =                                                                  // 259
  cloneableTags[mapTag] = cloneableTags[numberTag] =                                                                   // 260
  cloneableTags[objectTag] = cloneableTags[regexpTag] =                                                                // 261
  cloneableTags[setTag] = cloneableTags[stringTag] =                                                                   // 262
  cloneableTags[symbolTag] = cloneableTags[uint8Tag] =                                                                 // 263
  cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] =                                                          // 264
  cloneableTags[uint32Tag] = true;                                                                                     // 265
  cloneableTags[errorTag] = cloneableTags[funcTag] =                                                                   // 266
  cloneableTags[weakMapTag] = false;                                                                                   // 267
                                                                                                                       // 268
  /** Used to map latin-1 supplementary letters to basic latin letters. */                                             // 269
  var deburredLetters = {                                                                                              // 270
    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',                                     // 271
    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',                                     // 272
    '\xc7': 'C',  '\xe7': 'c',                                                                                         // 273
    '\xd0': 'D',  '\xf0': 'd',                                                                                         // 274
    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',                                                               // 275
    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',                                                               // 276
    '\xcC': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',                                                               // 277
    '\xeC': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',                                                               // 278
    '\xd1': 'N',  '\xf1': 'n',                                                                                         // 279
    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',                                     // 280
    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',                                     // 281
    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',                                                               // 282
    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',                                                               // 283
    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',                                                                            // 284
    '\xc6': 'Ae', '\xe6': 'ae',                                                                                        // 285
    '\xde': 'Th', '\xfe': 'th',                                                                                        // 286
    '\xdf': 'ss'                                                                                                       // 287
  };                                                                                                                   // 288
                                                                                                                       // 289
  /** Used to map characters to HTML entities. */                                                                      // 290
  var htmlEscapes = {                                                                                                  // 291
    '&': '&amp;',                                                                                                      // 292
    '<': '&lt;',                                                                                                       // 293
    '>': '&gt;',                                                                                                       // 294
    '"': '&quot;',                                                                                                     // 295
    "'": '&#39;',                                                                                                      // 296
    '`': '&#96;'                                                                                                       // 297
  };                                                                                                                   // 298
                                                                                                                       // 299
  /** Used to map HTML entities to characters. */                                                                      // 300
  var htmlUnescapes = {                                                                                                // 301
    '&amp;': '&',                                                                                                      // 302
    '&lt;': '<',                                                                                                       // 303
    '&gt;': '>',                                                                                                       // 304
    '&quot;': '"',                                                                                                     // 305
    '&#39;': "'",                                                                                                      // 306
    '&#96;': '`'                                                                                                       // 307
  };                                                                                                                   // 308
                                                                                                                       // 309
  /** Used to determine if values are of the language type `Object`. */                                                // 310
  var objectTypes = {                                                                                                  // 311
    'function': true,                                                                                                  // 312
    'object': true                                                                                                     // 313
  };                                                                                                                   // 314
                                                                                                                       // 315
  /** Used to escape characters for inclusion in compiled string literals. */                                          // 316
  var stringEscapes = {                                                                                                // 317
    '\\': '\\',                                                                                                        // 318
    "'": "'",                                                                                                          // 319
    '\n': 'n',                                                                                                         // 320
    '\r': 'r',                                                                                                         // 321
    '\u2028': 'u2028',                                                                                                 // 322
    '\u2029': 'u2029'                                                                                                  // 323
  };                                                                                                                   // 324
                                                                                                                       // 325
  /** Built-in method references without a dependency on `root`. */                                                    // 326
  var freeParseFloat = parseFloat,                                                                                     // 327
      freeParseInt = parseInt;                                                                                         // 328
                                                                                                                       // 329
  /** Detect free variable `exports`. */                                                                               // 330
  var freeExports = (objectTypes[typeof exports] && exports && !exports.nodeType) ? exports : null;                    // 331
                                                                                                                       // 332
  /** Detect free variable `module`. */                                                                                // 333
  var freeModule = (objectTypes[typeof module] && module && !module.nodeType) ? module : null;                         // 334
                                                                                                                       // 335
  /** Detect free variable `global` from Node.js. */                                                                   // 336
  var freeGlobal = checkGlobal(freeExports && freeModule && typeof global == 'object' && global);                      // 337
                                                                                                                       // 338
  /** Detect free variable `self`. */                                                                                  // 339
  var freeSelf = checkGlobal(objectTypes[typeof self] && self);                                                        // 340
                                                                                                                       // 341
  /** Detect free variable `window`. */                                                                                // 342
  var freeWindow = checkGlobal(objectTypes[typeof window] && window);                                                  // 343
                                                                                                                       // 344
  /** Detect the popular CommonJS extension `module.exports`. */                                                       // 345
  var moduleExports = (freeModule && freeModule.exports === freeExports) ? freeExports : null;                         // 346
                                                                                                                       // 347
  /** Detect `this` as the global object. */                                                                           // 348
  var thisGlobal = checkGlobal(objectTypes[typeof this] && this);                                                      // 349
                                                                                                                       // 350
  /**                                                                                                                  // 351
   * Used as a reference to the global object.                                                                         // 352
   *                                                                                                                   // 353
   * The `this` value is used if it's the global object to avoid Greasemonkey's                                        // 354
   * restricted `window` object, otherwise the `window` object is used.                                                // 355
   */                                                                                                                  // 356
  var root = freeGlobal || ((freeWindow !== (thisGlobal && thisGlobal.window)) && freeWindow) || freeSelf || thisGlobal || Function('return this')();
                                                                                                                       // 358
  /*--------------------------------------------------------------------------*/                                       // 359
                                                                                                                       // 360
  /**                                                                                                                  // 361
   * Adds the key-value `pair` to `map`.                                                                               // 362
   *                                                                                                                   // 363
   * @private                                                                                                          // 364
   * @param {Object} map The map to modify.                                                                            // 365
   * @param {Array} pair The key-value pair to add.                                                                    // 366
   * @returns {Object} Returns `map`.                                                                                  // 367
   */                                                                                                                  // 368
  function addMapEntry(map, pair) {                                                                                    // 369
    map.set(pair[0], pair[1]);                                                                                         // 370
    return map;                                                                                                        // 371
  }                                                                                                                    // 372
                                                                                                                       // 373
  /**                                                                                                                  // 374
   * Adds `value` to `set`.                                                                                            // 375
   *                                                                                                                   // 376
   * @private                                                                                                          // 377
   * @param {Object} set The set to modify.                                                                            // 378
   * @param {*} value The value to add.                                                                                // 379
   * @returns {Object} Returns `set`.                                                                                  // 380
   */                                                                                                                  // 381
  function addSetEntry(set, value) {                                                                                   // 382
    set.add(value);                                                                                                    // 383
    return set;                                                                                                        // 384
  }                                                                                                                    // 385
                                                                                                                       // 386
  /**                                                                                                                  // 387
   * A faster alternative to `Function#apply`, this function invokes `func`                                            // 388
   * with the `this` binding of `thisArg` and the arguments of `args`.                                                 // 389
   *                                                                                                                   // 390
   * @private                                                                                                          // 391
   * @param {Function} func The function to invoke.                                                                    // 392
   * @param {*} thisArg The `this` binding of `func`.                                                                  // 393
   * @param {...*} [args] The arguments to invoke `func` with.                                                         // 394
   * @returns {*} Returns the result of `func`.                                                                        // 395
   */                                                                                                                  // 396
  function apply(func, thisArg, args) {                                                                                // 397
    var length = args ? args.length : 0;                                                                               // 398
    switch (length) {                                                                                                  // 399
      case 0: return func.call(thisArg);                                                                               // 400
      case 1: return func.call(thisArg, args[0]);                                                                      // 401
      case 2: return func.call(thisArg, args[0], args[1]);                                                             // 402
      case 3: return func.call(thisArg, args[0], args[1], args[2]);                                                    // 403
    }                                                                                                                  // 404
    return func.apply(thisArg, args);                                                                                  // 405
  }                                                                                                                    // 406
                                                                                                                       // 407
  /**                                                                                                                  // 408
   * Creates a new array concatenating `array` with `other`.                                                           // 409
   *                                                                                                                   // 410
   * @private                                                                                                          // 411
   * @param {Array} array The first array to concatenate.                                                              // 412
   * @param {Array} other The second array to concatenate.                                                             // 413
   * @returns {Array} Returns the new concatenated array.                                                              // 414
   */                                                                                                                  // 415
  function arrayConcat(array, other) {                                                                                 // 416
    var index = -1,                                                                                                    // 417
        length = array.length,                                                                                         // 418
        othIndex = -1,                                                                                                 // 419
        othLength = other.length,                                                                                      // 420
        result = Array(length + othLength);                                                                            // 421
                                                                                                                       // 422
    while (++index < length) {                                                                                         // 423
      result[index] = array[index];                                                                                    // 424
    }                                                                                                                  // 425
    while (++othIndex < othLength) {                                                                                   // 426
      result[index++] = other[othIndex];                                                                               // 427
    }                                                                                                                  // 428
    return result;                                                                                                     // 429
  }                                                                                                                    // 430
                                                                                                                       // 431
  /**                                                                                                                  // 432
   * A specialized version of `_.forEach` for arrays without support for                                               // 433
   * iteratee shorthands.                                                                                              // 434
   *                                                                                                                   // 435
   * @private                                                                                                          // 436
   * @param {Array} array The array to iterate over.                                                                   // 437
   * @param {Function} iteratee The function invoked per iteration.                                                    // 438
   * @returns {Array} Returns `array`.                                                                                 // 439
   */                                                                                                                  // 440
  function arrayEach(array, iteratee) {                                                                                // 441
    var index = -1,                                                                                                    // 442
        length = array.length;                                                                                         // 443
                                                                                                                       // 444
    while (++index < length) {                                                                                         // 445
      if (iteratee(array[index], index, array) === false) {                                                            // 446
        break;                                                                                                         // 447
      }                                                                                                                // 448
    }                                                                                                                  // 449
    return array;                                                                                                      // 450
  }                                                                                                                    // 451
                                                                                                                       // 452
  /**                                                                                                                  // 453
   * A specialized version of `_.forEachRight` for arrays without support for                                          // 454
   * iteratee shorthands.                                                                                              // 455
   *                                                                                                                   // 456
   * @private                                                                                                          // 457
   * @param {Array} array The array to iterate over.                                                                   // 458
   * @param {Function} iteratee The function invoked per iteration.                                                    // 459
   * @returns {Array} Returns `array`.                                                                                 // 460
   */                                                                                                                  // 461
  function arrayEachRight(array, iteratee) {                                                                           // 462
    var length = array.length;                                                                                         // 463
                                                                                                                       // 464
    while (length--) {                                                                                                 // 465
      if (iteratee(array[length], length, array) === false) {                                                          // 466
        break;                                                                                                         // 467
      }                                                                                                                // 468
    }                                                                                                                  // 469
    return array;                                                                                                      // 470
  }                                                                                                                    // 471
                                                                                                                       // 472
  /**                                                                                                                  // 473
   * A specialized version of `_.every` for arrays without support for                                                 // 474
   * iteratee shorthands.                                                                                              // 475
   *                                                                                                                   // 476
   * @private                                                                                                          // 477
   * @param {Array} array The array to iterate over.                                                                   // 478
   * @param {Function} predicate The function invoked per iteration.                                                   // 479
   * @returns {boolean} Returns `true` if all elements pass the predicate check, else `false`.                         // 480
   */                                                                                                                  // 481
  function arrayEvery(array, predicate) {                                                                              // 482
    var index = -1,                                                                                                    // 483
        length = array.length;                                                                                         // 484
                                                                                                                       // 485
    while (++index < length) {                                                                                         // 486
      if (!predicate(array[index], index, array)) {                                                                    // 487
        return false;                                                                                                  // 488
      }                                                                                                                // 489
    }                                                                                                                  // 490
    return true;                                                                                                       // 491
  }                                                                                                                    // 492
                                                                                                                       // 493
  /**                                                                                                                  // 494
   * A specialized version of `_.filter` for arrays without support for                                                // 495
   * iteratee shorthands.                                                                                              // 496
   *                                                                                                                   // 497
   * @private                                                                                                          // 498
   * @param {Array} array The array to iterate over.                                                                   // 499
   * @param {Function} predicate The function invoked per iteration.                                                   // 500
   * @returns {Array} Returns the new filtered array.                                                                  // 501
   */                                                                                                                  // 502
  function arrayFilter(array, predicate) {                                                                             // 503
    var index = -1,                                                                                                    // 504
        length = array.length,                                                                                         // 505
        resIndex = -1,                                                                                                 // 506
        result = [];                                                                                                   // 507
                                                                                                                       // 508
    while (++index < length) {                                                                                         // 509
      var value = array[index];                                                                                        // 510
      if (predicate(value, index, array)) {                                                                            // 511
        result[++resIndex] = value;                                                                                    // 512
      }                                                                                                                // 513
    }                                                                                                                  // 514
    return result;                                                                                                     // 515
  }                                                                                                                    // 516
                                                                                                                       // 517
  /**                                                                                                                  // 518
   * A specialized version of `_.includes` for arrays without support for                                              // 519
   * specifying an index to search from.                                                                               // 520
   *                                                                                                                   // 521
   * @private                                                                                                          // 522
   * @param {Array} array The array to search.                                                                         // 523
   * @param {*} target The value to search for.                                                                        // 524
   * @returns {boolean} Returns `true` if `target` is found, else `false`.                                             // 525
   */                                                                                                                  // 526
  function arrayIncludes(array, value) {                                                                               // 527
    return !!array.length && baseIndexOf(array, value, 0) > -1;                                                        // 528
  }                                                                                                                    // 529
                                                                                                                       // 530
  /**                                                                                                                  // 531
   * A specialized version of `_.includesWith` for arrays without support for                                          // 532
   * specifying an index to search from.                                                                               // 533
   *                                                                                                                   // 534
   * @private                                                                                                          // 535
   * @param {Array} array The array to search.                                                                         // 536
   * @param {*} target The value to search for.                                                                        // 537
   * @param {Function} comparator The comparator invoked per element.                                                  // 538
   * @returns {boolean} Returns `true` if `target` is found, else `false`.                                             // 539
   */                                                                                                                  // 540
  function arrayIncludesWith(array, value, comparator) {                                                               // 541
    var index = -1,                                                                                                    // 542
        length = array.length;                                                                                         // 543
                                                                                                                       // 544
    while (++index < length) {                                                                                         // 545
      if (comparator(value, array[index])) {                                                                           // 546
        return true;                                                                                                   // 547
      }                                                                                                                // 548
    }                                                                                                                  // 549
    return false;                                                                                                      // 550
  }                                                                                                                    // 551
                                                                                                                       // 552
  /**                                                                                                                  // 553
   * A specialized version of `_.map` for arrays without support for iteratee                                          // 554
   * shorthands.                                                                                                       // 555
   *                                                                                                                   // 556
   * @private                                                                                                          // 557
   * @param {Array} array The array to iterate over.                                                                   // 558
   * @param {Function} iteratee The function invoked per iteration.                                                    // 559
   * @returns {Array} Returns the new mapped array.                                                                    // 560
   */                                                                                                                  // 561
  function arrayMap(array, iteratee) {                                                                                 // 562
    var index = -1,                                                                                                    // 563
        length = array.length,                                                                                         // 564
        result = Array(length);                                                                                        // 565
                                                                                                                       // 566
    while (++index < length) {                                                                                         // 567
      result[index] = iteratee(array[index], index, array);                                                            // 568
    }                                                                                                                  // 569
    return result;                                                                                                     // 570
  }                                                                                                                    // 571
                                                                                                                       // 572
  /**                                                                                                                  // 573
   * Appends the elements of `values` to `array`.                                                                      // 574
   *                                                                                                                   // 575
   * @private                                                                                                          // 576
   * @param {Array} array The array to modify.                                                                         // 577
   * @param {Array} values The values to append.                                                                       // 578
   * @returns {Array} Returns `array`.                                                                                 // 579
   */                                                                                                                  // 580
  function arrayPush(array, values) {                                                                                  // 581
    var index = -1,                                                                                                    // 582
        length = values.length,                                                                                        // 583
        offset = array.length;                                                                                         // 584
                                                                                                                       // 585
    while (++index < length) {                                                                                         // 586
      array[offset + index] = values[index];                                                                           // 587
    }                                                                                                                  // 588
    return array;                                                                                                      // 589
  }                                                                                                                    // 590
                                                                                                                       // 591
  /**                                                                                                                  // 592
   * A specialized version of `_.reduce` for arrays without support for                                                // 593
   * iteratee shorthands.                                                                                              // 594
   *                                                                                                                   // 595
   * @private                                                                                                          // 596
   * @param {Array} array The array to iterate over.                                                                   // 597
   * @param {Function} iteratee The function invoked per iteration.                                                    // 598
   * @param {*} [accumulator] The initial value.                                                                       // 599
   * @param {boolean} [initFromArray] Specify using the first element of `array` as the initial value.                 // 600
   * @returns {*} Returns the accumulated value.                                                                       // 601
   */                                                                                                                  // 602
  function arrayReduce(array, iteratee, accumulator, initFromArray) {                                                  // 603
    var index = -1,                                                                                                    // 604
        length = array.length;                                                                                         // 605
                                                                                                                       // 606
    if (initFromArray && length) {                                                                                     // 607
      accumulator = array[++index];                                                                                    // 608
    }                                                                                                                  // 609
    while (++index < length) {                                                                                         // 610
      accumulator = iteratee(accumulator, array[index], index, array);                                                 // 611
    }                                                                                                                  // 612
    return accumulator;                                                                                                // 613
  }                                                                                                                    // 614
                                                                                                                       // 615
  /**                                                                                                                  // 616
   * A specialized version of `_.reduceRight` for arrays without support for                                           // 617
   * iteratee shorthands.                                                                                              // 618
   *                                                                                                                   // 619
   * @private                                                                                                          // 620
   * @param {Array} array The array to iterate over.                                                                   // 621
   * @param {Function} iteratee The function invoked per iteration.                                                    // 622
   * @param {*} [accumulator] The initial value.                                                                       // 623
   * @param {boolean} [initFromArray] Specify using the last element of `array` as the initial value.                  // 624
   * @returns {*} Returns the accumulated value.                                                                       // 625
   */                                                                                                                  // 626
  function arrayReduceRight(array, iteratee, accumulator, initFromArray) {                                             // 627
    var length = array.length;                                                                                         // 628
    if (initFromArray && length) {                                                                                     // 629
      accumulator = array[--length];                                                                                   // 630
    }                                                                                                                  // 631
    while (length--) {                                                                                                 // 632
      accumulator = iteratee(accumulator, array[length], length, array);                                               // 633
    }                                                                                                                  // 634
    return accumulator;                                                                                                // 635
  }                                                                                                                    // 636
                                                                                                                       // 637
  /**                                                                                                                  // 638
   * A specialized version of `_.some` for arrays without support for iteratee                                         // 639
   * shorthands.                                                                                                       // 640
   *                                                                                                                   // 641
   * @private                                                                                                          // 642
   * @param {Array} array The array to iterate over.                                                                   // 643
   * @param {Function} predicate The function invoked per iteration.                                                   // 644
   * @returns {boolean} Returns `true` if any element passes the predicate check, else `false`.                        // 645
   */                                                                                                                  // 646
  function arraySome(array, predicate) {                                                                               // 647
    var index = -1,                                                                                                    // 648
        length = array.length;                                                                                         // 649
                                                                                                                       // 650
    while (++index < length) {                                                                                         // 651
      if (predicate(array[index], index, array)) {                                                                     // 652
        return true;                                                                                                   // 653
      }                                                                                                                // 654
    }                                                                                                                  // 655
    return false;                                                                                                      // 656
  }                                                                                                                    // 657
                                                                                                                       // 658
  /**                                                                                                                  // 659
   * The base implementation of methods like `_.max` and `_.min` which accepts a                                       // 660
   * `comparator` to determine the extremum value.                                                                     // 661
   *                                                                                                                   // 662
   * @private                                                                                                          // 663
   * @param {Array} array The array to iterate over.                                                                   // 664
   * @param {Function} iteratee The iteratee invoked per iteration.                                                    // 665
   * @param {Function} comparator The comparator used to compare values.                                               // 666
   * @returns {*} Returns the extremum value.                                                                          // 667
   */                                                                                                                  // 668
  function baseExtremum(array, iteratee, comparator) {                                                                 // 669
    var index = -1,                                                                                                    // 670
        length = array.length;                                                                                         // 671
                                                                                                                       // 672
    while (++index < length) {                                                                                         // 673
      var value = array[index],                                                                                        // 674
          current = iteratee(value);                                                                                   // 675
                                                                                                                       // 676
      if (current != null && (computed === undefined                                                                   // 677
            ? current === current                                                                                      // 678
            : comparator(current, computed)                                                                            // 679
          )) {                                                                                                         // 680
        var computed = current,                                                                                        // 681
            result = value;                                                                                            // 682
      }                                                                                                                // 683
    }                                                                                                                  // 684
    return result;                                                                                                     // 685
  }                                                                                                                    // 686
                                                                                                                       // 687
  /**                                                                                                                  // 688
   * The base implementation of methods like `_.find` and `_.findKey`, without                                         // 689
   * support for iteratee shorthands, which iterates over `collection` using                                           // 690
   * the provided `eachFunc`.                                                                                          // 691
   *                                                                                                                   // 692
   * @private                                                                                                          // 693
   * @param {Array|Object} collection The collection to search.                                                        // 694
   * @param {Function} predicate The function invoked per iteration.                                                   // 695
   * @param {Function} eachFunc The function to iterate over `collection`.                                             // 696
   * @param {boolean} [retKey] Specify returning the key of the found element instead of the element itself.           // 697
   * @returns {*} Returns the found element or its key, else `undefined`.                                              // 698
   */                                                                                                                  // 699
  function baseFind(collection, predicate, eachFunc, retKey) {                                                         // 700
    var result;                                                                                                        // 701
    eachFunc(collection, function(value, key, collection) {                                                            // 702
      if (predicate(value, key, collection)) {                                                                         // 703
        result = retKey ? key : value;                                                                                 // 704
        return false;                                                                                                  // 705
      }                                                                                                                // 706
    });                                                                                                                // 707
    return result;                                                                                                     // 708
  }                                                                                                                    // 709
                                                                                                                       // 710
  /**                                                                                                                  // 711
   * The base implementation of `_.findIndex` and `_.findLastIndex` without                                            // 712
   * support for iteratee shorthands.                                                                                  // 713
   *                                                                                                                   // 714
   * @private                                                                                                          // 715
   * @param {Array} array The array to search.                                                                         // 716
   * @param {Function} predicate The function invoked per iteration.                                                   // 717
   * @param {boolean} [fromRight] Specify iterating from right to left.                                                // 718
   * @returns {number} Returns the index of the matched value, else `-1`.                                              // 719
   */                                                                                                                  // 720
  function baseFindIndex(array, predicate, fromRight) {                                                                // 721
    var length = array.length,                                                                                         // 722
        index = fromRight ? length : -1;                                                                               // 723
                                                                                                                       // 724
    while ((fromRight ? index-- : ++index < length)) {                                                                 // 725
      if (predicate(array[index], index, array)) {                                                                     // 726
        return index;                                                                                                  // 727
      }                                                                                                                // 728
    }                                                                                                                  // 729
    return -1;                                                                                                         // 730
  }                                                                                                                    // 731
                                                                                                                       // 732
  /**                                                                                                                  // 733
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.                                         // 734
   *                                                                                                                   // 735
   * @private                                                                                                          // 736
   * @param {Array} array The array to search.                                                                         // 737
   * @param {*} value The value to search for.                                                                         // 738
   * @param {number} fromIndex The index to search from.                                                               // 739
   * @returns {number} Returns the index of the matched value, else `-1`.                                              // 740
   */                                                                                                                  // 741
  function baseIndexOf(array, value, fromIndex) {                                                                      // 742
    if (value !== value) {                                                                                             // 743
      return indexOfNaN(array, fromIndex);                                                                             // 744
    }                                                                                                                  // 745
    var index = fromIndex - 1,                                                                                         // 746
        length = array.length;                                                                                         // 747
                                                                                                                       // 748
    while (++index < length) {                                                                                         // 749
      if (array[index] === value) {                                                                                    // 750
        return index;                                                                                                  // 751
      }                                                                                                                // 752
    }                                                                                                                  // 753
    return -1;                                                                                                         // 754
  }                                                                                                                    // 755
                                                                                                                       // 756
  /**                                                                                                                  // 757
   * The base implementation of `_.reduce` and `_.reduceRight`, without support                                        // 758
   * for iteratee shorthands, which iterates over `collection` using the provided                                      // 759
   * `eachFunc`.                                                                                                       // 760
   *                                                                                                                   // 761
   * @private                                                                                                          // 762
   * @param {Array|Object} collection The collection to iterate over.                                                  // 763
   * @param {Function} iteratee The function invoked per iteration.                                                    // 764
   * @param {*} accumulator The initial value.                                                                         // 765
   * @param {boolean} initFromCollection Specify using the first or last element of `collection` as the initial value.
   * @param {Function} eachFunc The function to iterate over `collection`.                                             // 767
   * @returns {*} Returns the accumulated value.                                                                       // 768
   */                                                                                                                  // 769
  function baseReduce(collection, iteratee, accumulator, initFromCollection, eachFunc) {                               // 770
    eachFunc(collection, function(value, index, collection) {                                                          // 771
      accumulator = initFromCollection                                                                                 // 772
        ? (initFromCollection = false, value)                                                                          // 773
        : iteratee(accumulator, value, index, collection);                                                             // 774
    });                                                                                                                // 775
    return accumulator;                                                                                                // 776
  }                                                                                                                    // 777
                                                                                                                       // 778
  /**                                                                                                                  // 779
   * The base implementation of `_.sortBy` which uses `comparer` to define                                             // 780
   * the sort order of `array` and replaces criteria objects with their                                                // 781
   * corresponding values.                                                                                             // 782
   *                                                                                                                   // 783
   * @private                                                                                                          // 784
   * @param {Array} array The array to sort.                                                                           // 785
   * @param {Function} comparer The function to define sort order.                                                     // 786
   * @returns {Array} Returns `array`.                                                                                 // 787
   */                                                                                                                  // 788
  function baseSortBy(array, comparer) {                                                                               // 789
    var length = array.length;                                                                                         // 790
                                                                                                                       // 791
    array.sort(comparer);                                                                                              // 792
    while (length--) {                                                                                                 // 793
      array[length] = array[length].value;                                                                             // 794
    }                                                                                                                  // 795
    return array;                                                                                                      // 796
  }                                                                                                                    // 797
                                                                                                                       // 798
  /**                                                                                                                  // 799
   * The base implementation of `_.sum` without support for iteratee shorthands.                                       // 800
   *                                                                                                                   // 801
   * @private                                                                                                          // 802
   * @param {Array} array The array to iterate over.                                                                   // 803
   * @param {Function} iteratee The function invoked per iteration.                                                    // 804
   * @returns {number} Returns the sum.                                                                                // 805
   */                                                                                                                  // 806
  function baseSum(array, iteratee) {                                                                                  // 807
    var result,                                                                                                        // 808
        index = -1,                                                                                                    // 809
        length = array.length;                                                                                         // 810
                                                                                                                       // 811
    while (++index < length) {                                                                                         // 812
      var current = iteratee(array[index]);                                                                            // 813
      if (current !== undefined) {                                                                                     // 814
        result = result === undefined ? current : (result + current);                                                  // 815
      }                                                                                                                // 816
    }                                                                                                                  // 817
    return result;                                                                                                     // 818
  }                                                                                                                    // 819
                                                                                                                       // 820
  /**                                                                                                                  // 821
   * The base implementation of `_.times` without support for iteratee shorthands                                      // 822
   * or max array length checks.                                                                                       // 823
   *                                                                                                                   // 824
   * @private                                                                                                          // 825
   * @param {number} n The number of times to invoke `iteratee`.                                                       // 826
   * @param {Function} iteratee The function invoked per iteration.                                                    // 827
   * @returns {Array} Returns the array of results.                                                                    // 828
   */                                                                                                                  // 829
  function baseTimes(n, iteratee) {                                                                                    // 830
    var index = -1,                                                                                                    // 831
        result = Array(n);                                                                                             // 832
                                                                                                                       // 833
    while (++index < n) {                                                                                              // 834
      result[index] = iteratee(index);                                                                                 // 835
    }                                                                                                                  // 836
    return result;                                                                                                     // 837
  }                                                                                                                    // 838
                                                                                                                       // 839
  /**                                                                                                                  // 840
   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array                                   // 841
   * of key-value pairs for `object` corresponding to the property names of `props`.                                   // 842
   *                                                                                                                   // 843
   * @private                                                                                                          // 844
   * @param {Object} object The object to query.                                                                       // 845
   * @param {Array} props The property names to get values for.                                                        // 846
   * @returns {Object} Returns the new array of key-value pairs.                                                       // 847
   */                                                                                                                  // 848
  function baseToPairs(object, props) {                                                                                // 849
    return arrayMap(props, function(key) {                                                                             // 850
      return [key, object[key]];                                                                                       // 851
    });                                                                                                                // 852
  }                                                                                                                    // 853
                                                                                                                       // 854
  /**                                                                                                                  // 855
   * The base implementation of `_.unary` without support for storing wrapper metadata.                                // 856
   *                                                                                                                   // 857
   * @private                                                                                                          // 858
   * @param {Function} func The function to cap arguments for.                                                         // 859
   * @returns {Function} Returns the new function.                                                                     // 860
   */                                                                                                                  // 861
  function baseUnary(func) {                                                                                           // 862
    return function(value) {                                                                                           // 863
      return func(value);                                                                                              // 864
    };                                                                                                                 // 865
  }                                                                                                                    // 866
                                                                                                                       // 867
  /**                                                                                                                  // 868
   * The base implementation of `_.values` and `_.valuesIn` which creates an                                           // 869
   * array of `object` property values corresponding to the property names                                             // 870
   * of `props`.                                                                                                       // 871
   *                                                                                                                   // 872
   * @private                                                                                                          // 873
   * @param {Object} object The object to query.                                                                       // 874
   * @param {Array} props The property names to get values for.                                                        // 875
   * @returns {Object} Returns the array of property values.                                                           // 876
   */                                                                                                                  // 877
  function baseValues(object, props) {                                                                                 // 878
    return arrayMap(props, function(key) {                                                                             // 879
      return object[key];                                                                                              // 880
    });                                                                                                                // 881
  }                                                                                                                    // 882
                                                                                                                       // 883
  /**                                                                                                                  // 884
   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol                                    // 885
   * that is not found in the character symbols.                                                                       // 886
   *                                                                                                                   // 887
   * @private                                                                                                          // 888
   * @param {Array} strSymbols The string symbols to inspect.                                                          // 889
   * @param {Array} chrSymbols The character symbols to find.                                                          // 890
   * @returns {number} Returns the index of the first unmatched string symbol.                                         // 891
   */                                                                                                                  // 892
  function charsStartIndex(strSymbols, chrSymbols) {                                                                   // 893
    var index = -1,                                                                                                    // 894
        length = strSymbols.length;                                                                                    // 895
                                                                                                                       // 896
    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}                                  // 897
    return index;                                                                                                      // 898
  }                                                                                                                    // 899
                                                                                                                       // 900
  /**                                                                                                                  // 901
   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol                                       // 902
   * that is not found in the character symbols.                                                                       // 903
   *                                                                                                                   // 904
   * @private                                                                                                          // 905
   * @param {Array} strSymbols The string symbols to inspect.                                                          // 906
   * @param {Array} chrSymbols The character symbols to find.                                                          // 907
   * @returns {number} Returns the index of the last unmatched string symbol.                                          // 908
   */                                                                                                                  // 909
  function charsEndIndex(strSymbols, chrSymbols) {                                                                     // 910
    var index = strSymbols.length;                                                                                     // 911
                                                                                                                       // 912
    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}                                           // 913
    return index;                                                                                                      // 914
  }                                                                                                                    // 915
                                                                                                                       // 916
  /**                                                                                                                  // 917
   * Checks if `value` is a global object.                                                                             // 918
   *                                                                                                                   // 919
   * @private                                                                                                          // 920
   * @param {*} value The value to check.                                                                              // 921
   * @returns {null|Object} Returns `value` if it's a global object, else `null`.                                      // 922
   */                                                                                                                  // 923
  function checkGlobal(value) {                                                                                        // 924
    return (value && value.Object === Object) ? value : null;                                                          // 925
  }                                                                                                                    // 926
                                                                                                                       // 927
  /**                                                                                                                  // 928
   * Compares values to sort them in ascending order.                                                                  // 929
   *                                                                                                                   // 930
   * @private                                                                                                          // 931
   * @param {*} value The value to compare.                                                                            // 932
   * @param {*} other The other value to compare.                                                                      // 933
   * @returns {number} Returns the sort order indicator for `value`.                                                   // 934
   */                                                                                                                  // 935
  function compareAscending(value, other) {                                                                            // 936
    if (value !== other) {                                                                                             // 937
      var valIsNull = value === null,                                                                                  // 938
          valIsUndef = value === undefined,                                                                            // 939
          valIsReflexive = value === value;                                                                            // 940
                                                                                                                       // 941
      var othIsNull = other === null,                                                                                  // 942
          othIsUndef = other === undefined,                                                                            // 943
          othIsReflexive = other === other;                                                                            // 944
                                                                                                                       // 945
      if ((value > other && !othIsNull) || !valIsReflexive ||                                                          // 946
          (valIsNull && !othIsUndef && othIsReflexive) ||                                                              // 947
          (valIsUndef && othIsReflexive)) {                                                                            // 948
        return 1;                                                                                                      // 949
      }                                                                                                                // 950
      if ((value < other && !valIsNull) || !othIsReflexive ||                                                          // 951
          (othIsNull && !valIsUndef && valIsReflexive) ||                                                              // 952
          (othIsUndef && valIsReflexive)) {                                                                            // 953
        return -1;                                                                                                     // 954
      }                                                                                                                // 955
    }                                                                                                                  // 956
    return 0;                                                                                                          // 957
  }                                                                                                                    // 958
                                                                                                                       // 959
  /**                                                                                                                  // 960
   * Used by `_.orderBy` to compare multiple properties of a value to another                                          // 961
   * and stable sort them.                                                                                             // 962
   *                                                                                                                   // 963
   * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,                                  // 964
   * specify an order of "desc" for descending or "asc" for ascending sort order                                       // 965
   * of corresponding values.                                                                                          // 966
   *                                                                                                                   // 967
   * @private                                                                                                          // 968
   * @param {Object} object The object to compare.                                                                     // 969
   * @param {Object} other The other object to compare.                                                                // 970
   * @param {boolean[]|string[]} orders The order to sort by for each property.                                        // 971
   * @returns {number} Returns the sort order indicator for `object`.                                                  // 972
   */                                                                                                                  // 973
  function compareMultiple(object, other, orders) {                                                                    // 974
    var index = -1,                                                                                                    // 975
        objCriteria = object.criteria,                                                                                 // 976
        othCriteria = other.criteria,                                                                                  // 977
        length = objCriteria.length,                                                                                   // 978
        ordersLength = orders.length;                                                                                  // 979
                                                                                                                       // 980
    while (++index < length) {                                                                                         // 981
      var result = compareAscending(objCriteria[index], othCriteria[index]);                                           // 982
      if (result) {                                                                                                    // 983
        if (index >= ordersLength) {                                                                                   // 984
          return result;                                                                                               // 985
        }                                                                                                              // 986
        var order = orders[index];                                                                                     // 987
        return result * (order == 'desc' ? -1 : 1);                                                                    // 988
      }                                                                                                                // 989
    }                                                                                                                  // 990
    // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications                                       // 991
    // that causes it, under certain circumstances, to provide the same value for                                      // 992
    // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247                                     // 993
    // for more details.                                                                                               // 994
    //                                                                                                                 // 995
    // This also ensures a stable sort in V8 and other engines.                                                        // 996
    // See https://code.google.com/p/v8/issues/detail?id=90 for more details.                                          // 997
    return object.index - other.index;                                                                                 // 998
  }                                                                                                                    // 999
                                                                                                                       // 1000
  /**                                                                                                                  // 1001
   * Used by `_.deburr` to convert latin-1 supplementary letters to basic latin letters.                               // 1002
   *                                                                                                                   // 1003
   * @private                                                                                                          // 1004
   * @param {string} letter The matched letter to deburr.                                                              // 1005
   * @returns {string} Returns the deburred letter.                                                                    // 1006
   */                                                                                                                  // 1007
  function deburrLetter(letter) {                                                                                      // 1008
    return deburredLetters[letter];                                                                                    // 1009
  }                                                                                                                    // 1010
                                                                                                                       // 1011
  /**                                                                                                                  // 1012
   * Used by `_.escape` to convert characters to HTML entities.                                                        // 1013
   *                                                                                                                   // 1014
   * @private                                                                                                          // 1015
   * @param {string} chr The matched character to escape.                                                              // 1016
   * @returns {string} Returns the escaped character.                                                                  // 1017
   */                                                                                                                  // 1018
  function escapeHtmlChar(chr) {                                                                                       // 1019
    return htmlEscapes[chr];                                                                                           // 1020
  }                                                                                                                    // 1021
                                                                                                                       // 1022
  /**                                                                                                                  // 1023
   * Used by `_.template` to escape characters for inclusion in compiled string literals.                              // 1024
   *                                                                                                                   // 1025
   * @private                                                                                                          // 1026
   * @param {string} chr The matched character to escape.                                                              // 1027
   * @returns {string} Returns the escaped character.                                                                  // 1028
   */                                                                                                                  // 1029
  function escapeStringChar(chr) {                                                                                     // 1030
    return '\\' + stringEscapes[chr];                                                                                  // 1031
  }                                                                                                                    // 1032
                                                                                                                       // 1033
  /**                                                                                                                  // 1034
   * Gets the index at which the first occurrence of `NaN` is found in `array`.                                        // 1035
   *                                                                                                                   // 1036
   * @private                                                                                                          // 1037
   * @param {Array} array The array to search.                                                                         // 1038
   * @param {number} fromIndex The index to search from.                                                               // 1039
   * @param {boolean} [fromRight] Specify iterating from right to left.                                                // 1040
   * @returns {number} Returns the index of the matched `NaN`, else `-1`.                                              // 1041
   */                                                                                                                  // 1042
  function indexOfNaN(array, fromIndex, fromRight) {                                                                   // 1043
    var length = array.length,                                                                                         // 1044
        index = fromIndex + (fromRight ? 0 : -1);                                                                      // 1045
                                                                                                                       // 1046
    while ((fromRight ? index-- : ++index < length)) {                                                                 // 1047
      var other = array[index];                                                                                        // 1048
      if (other !== other) {                                                                                           // 1049
        return index;                                                                                                  // 1050
      }                                                                                                                // 1051
    }                                                                                                                  // 1052
    return -1;                                                                                                         // 1053
  }                                                                                                                    // 1054
                                                                                                                       // 1055
  /**                                                                                                                  // 1056
   * Checks if `value` is a host object in IE < 9.                                                                     // 1057
   *                                                                                                                   // 1058
   * @private                                                                                                          // 1059
   * @param {*} value The value to check.                                                                              // 1060
   * @returns {boolean} Returns `true` if `value` is a host object, else `false`.                                      // 1061
   */                                                                                                                  // 1062
  function isHostObject(value) {                                                                                       // 1063
    // Many host objects are `Object` objects that can coerce to strings                                               // 1064
    // despite having improperly defined `toString` methods.                                                           // 1065
    var result = false;                                                                                                // 1066
    if (value != null && typeof value.toString != 'function') {                                                        // 1067
      try {                                                                                                            // 1068
        result = !!(value + '');                                                                                       // 1069
      } catch (e) {}                                                                                                   // 1070
    }                                                                                                                  // 1071
    return result;                                                                                                     // 1072
  }                                                                                                                    // 1073
                                                                                                                       // 1074
  /**                                                                                                                  // 1075
   * Checks if `value` is a valid array-like index.                                                                    // 1076
   *                                                                                                                   // 1077
   * @private                                                                                                          // 1078
   * @param {*} value The value to check.                                                                              // 1079
   * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.                                      // 1080
   * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.                                      // 1081
   */                                                                                                                  // 1082
  function isIndex(value, length) {                                                                                    // 1083
    value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;                                          // 1084
    length = length == null ? MAX_SAFE_INTEGER : length;                                                               // 1085
    return value > -1 && value % 1 == 0 && value < length;                                                             // 1086
  }                                                                                                                    // 1087
                                                                                                                       // 1088
  /**                                                                                                                  // 1089
   * Converts `iterator` to an array.                                                                                  // 1090
   *                                                                                                                   // 1091
   * @private                                                                                                          // 1092
   * @param {Object} iterator The iterator to convert.                                                                 // 1093
   * @returns {Array} Returns the converted array.                                                                     // 1094
   */                                                                                                                  // 1095
  function iteratorToArray(iterator) {                                                                                 // 1096
    var data,                                                                                                          // 1097
        result = [];                                                                                                   // 1098
                                                                                                                       // 1099
    while (!(data = iterator.next()).done) {                                                                           // 1100
      result.push(data.value);                                                                                         // 1101
    }                                                                                                                  // 1102
    return result;                                                                                                     // 1103
  }                                                                                                                    // 1104
                                                                                                                       // 1105
  /**                                                                                                                  // 1106
   * Converts `map` to an array.                                                                                       // 1107
   *                                                                                                                   // 1108
   * @private                                                                                                          // 1109
   * @param {Object} map The map to convert.                                                                           // 1110
   * @returns {Array} Returns the converted array.                                                                     // 1111
   */                                                                                                                  // 1112
  function mapToArray(map) {                                                                                           // 1113
    var index = -1,                                                                                                    // 1114
        result = Array(map.size);                                                                                      // 1115
                                                                                                                       // 1116
    map.forEach(function(value, key) {                                                                                 // 1117
      result[++index] = [key, value];                                                                                  // 1118
    });                                                                                                                // 1119
    return result;                                                                                                     // 1120
  }                                                                                                                    // 1121
                                                                                                                       // 1122
  /**                                                                                                                  // 1123
   * Replaces all `placeholder` elements in `array` with an internal placeholder                                       // 1124
   * and returns an array of their indexes.                                                                            // 1125
   *                                                                                                                   // 1126
   * @private                                                                                                          // 1127
   * @param {Array} array The array to modify.                                                                         // 1128
   * @param {*} placeholder The placeholder to replace.                                                                // 1129
   * @returns {Array} Returns the new array of placeholder indexes.                                                    // 1130
   */                                                                                                                  // 1131
  function replaceHolders(array, placeholder) {                                                                        // 1132
    var index = -1,                                                                                                    // 1133
        length = array.length,                                                                                         // 1134
        resIndex = -1,                                                                                                 // 1135
        result = [];                                                                                                   // 1136
                                                                                                                       // 1137
    while (++index < length) {                                                                                         // 1138
      if (array[index] === placeholder) {                                                                              // 1139
        array[index] = PLACEHOLDER;                                                                                    // 1140
        result[++resIndex] = index;                                                                                    // 1141
      }                                                                                                                // 1142
    }                                                                                                                  // 1143
    return result;                                                                                                     // 1144
  }                                                                                                                    // 1145
                                                                                                                       // 1146
  /**                                                                                                                  // 1147
   * Converts `set` to an array.                                                                                       // 1148
   *                                                                                                                   // 1149
   * @private                                                                                                          // 1150
   * @param {Object} set The set to convert.                                                                           // 1151
   * @returns {Array} Returns the converted array.                                                                     // 1152
   */                                                                                                                  // 1153
  function setToArray(set) {                                                                                           // 1154
    var index = -1,                                                                                                    // 1155
        result = Array(set.size);                                                                                      // 1156
                                                                                                                       // 1157
    set.forEach(function(value) {                                                                                      // 1158
      result[++index] = value;                                                                                         // 1159
    });                                                                                                                // 1160
    return result;                                                                                                     // 1161
  }                                                                                                                    // 1162
                                                                                                                       // 1163
  /**                                                                                                                  // 1164
   * Gets the number of symbols in `string`.                                                                           // 1165
   *                                                                                                                   // 1166
   * @param {string} string The string to inspect.                                                                     // 1167
   * @returns {number} Returns the string size.                                                                        // 1168
   */                                                                                                                  // 1169
  function stringSize(string) {                                                                                        // 1170
    if (!(string && reHasComplexSymbol.test(string))) {                                                                // 1171
      return string.length;                                                                                            // 1172
    }                                                                                                                  // 1173
    var result = reComplexSymbol.lastIndex = 0;                                                                        // 1174
    while (reComplexSymbol.test(string)) {                                                                             // 1175
      result++;                                                                                                        // 1176
    }                                                                                                                  // 1177
    return result;                                                                                                     // 1178
  }                                                                                                                    // 1179
                                                                                                                       // 1180
  /**                                                                                                                  // 1181
   * Converts `string` to an array.                                                                                    // 1182
   *                                                                                                                   // 1183
   * @private                                                                                                          // 1184
   * @param {string} string The string to convert.                                                                     // 1185
   * @returns {Array} Returns the converted array.                                                                     // 1186
   */                                                                                                                  // 1187
  function stringToArray(string) {                                                                                     // 1188
    return string.match(reComplexSymbol);                                                                              // 1189
  }                                                                                                                    // 1190
                                                                                                                       // 1191
  /**                                                                                                                  // 1192
   * Used by `_.unescape` to convert HTML entities to characters.                                                      // 1193
   *                                                                                                                   // 1194
   * @private                                                                                                          // 1195
   * @param {string} chr The matched character to unescape.                                                            // 1196
   * @returns {string} Returns the unescaped character.                                                                // 1197
   */                                                                                                                  // 1198
  function unescapeHtmlChar(chr) {                                                                                     // 1199
    return htmlUnescapes[chr];                                                                                         // 1200
  }                                                                                                                    // 1201
                                                                                                                       // 1202
  /*--------------------------------------------------------------------------*/                                       // 1203
                                                                                                                       // 1204
  /**                                                                                                                  // 1205
   * Create a new pristine `lodash` function using the `context` object.                                               // 1206
   *                                                                                                                   // 1207
   * @static                                                                                                           // 1208
   * @memberOf _                                                                                                       // 1209
   * @category Util                                                                                                    // 1210
   * @param {Object} [context=root] The context object.                                                                // 1211
   * @returns {Function} Returns a new `lodash` function.                                                              // 1212
   * @example                                                                                                          // 1213
   *                                                                                                                   // 1214
   * _.mixin({ 'foo': _.constant('foo') });                                                                            // 1215
   *                                                                                                                   // 1216
   * var lodash = _.runInContext();                                                                                    // 1217
   * lodash.mixin({ 'bar': lodash.constant('bar') });                                                                  // 1218
   *                                                                                                                   // 1219
   * _.isFunction(_.foo);                                                                                              // 1220
   * // => true                                                                                                        // 1221
   * _.isFunction(_.bar);                                                                                              // 1222
   * // => false                                                                                                       // 1223
   *                                                                                                                   // 1224
   * lodash.isFunction(lodash.foo);                                                                                    // 1225
   * // => false                                                                                                       // 1226
   * lodash.isFunction(lodash.bar);                                                                                    // 1227
   * // => true                                                                                                        // 1228
   *                                                                                                                   // 1229
   * // using `context` to mock `Date#getTime` use in `_.now`                                                          // 1230
   * var mock = _.runInContext({                                                                                       // 1231
   *   'Date': function() {                                                                                            // 1232
   *     return { 'getTime': getTimeMock };                                                                            // 1233
   *   }                                                                                                               // 1234
   * });                                                                                                               // 1235
   *                                                                                                                   // 1236
   * // or creating a suped-up `defer` in Node.js                                                                      // 1237
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;                                                 // 1238
   */                                                                                                                  // 1239
  function runInContext(context) {                                                                                     // 1240
    context = context ? _.defaults({}, context, _.pick(root, contextProps)) : root;                                    // 1241
                                                                                                                       // 1242
    /** Built-in constructor references. */                                                                            // 1243
    var Date = context.Date,                                                                                           // 1244
        Error = context.Error,                                                                                         // 1245
        Math = context.Math,                                                                                           // 1246
        RegExp = context.RegExp,                                                                                       // 1247
        TypeError = context.TypeError;                                                                                 // 1248
                                                                                                                       // 1249
    /** Used for built-in method references. */                                                                        // 1250
    var arrayProto = context.Array.prototype,                                                                          // 1251
        objectProto = context.Object.prototype;                                                                        // 1252
                                                                                                                       // 1253
    /** Used to resolve the decompiled source of functions. */                                                         // 1254
    var funcToString = context.Function.prototype.toString;                                                            // 1255
                                                                                                                       // 1256
    /** Used to check objects for own properties. */                                                                   // 1257
    var hasOwnProperty = objectProto.hasOwnProperty;                                                                   // 1258
                                                                                                                       // 1259
    /** Used to generate unique IDs. */                                                                                // 1260
    var idCounter = 0;                                                                                                 // 1261
                                                                                                                       // 1262
    /** Used to infer the `Object` constructor. */                                                                     // 1263
    var objectCtorString = funcToString.call(Object);                                                                  // 1264
                                                                                                                       // 1265
    /**                                                                                                                // 1266
     * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)  // 1267
     * of values.                                                                                                      // 1268
     */                                                                                                                // 1269
    var objectToString = objectProto.toString;                                                                         // 1270
                                                                                                                       // 1271
    /** Used to restore the original `_` reference in `_.noConflict`. */                                               // 1272
    var oldDash = root._;                                                                                              // 1273
                                                                                                                       // 1274
    /** Used to detect if a method is native. */                                                                       // 1275
    var reIsNative = RegExp('^' +                                                                                      // 1276
      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')                                                  // 1277
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'                                // 1278
    );                                                                                                                 // 1279
                                                                                                                       // 1280
    /** Built-in value references. */                                                                                  // 1281
    var _Symbol = context.Symbol,                                                                                      // 1282
        Reflect = context.Reflect,                                                                                     // 1283
        Uint8Array = context.Uint8Array,                                                                               // 1284
        clearTimeout = context.clearTimeout,                                                                           // 1285
        enumerate = Reflect ? Reflect.enumerate : undefined,                                                           // 1286
        getPrototypeOf = Object.getPrototypeOf,                                                                        // 1287
        getOwnPropertySymbols = Object.getOwnPropertySymbols,                                                          // 1288
        iteratorSymbol = typeof (iteratorSymbol = _Symbol && _Symbol.iterator) == 'symbol' ? iteratorSymbol : undefined,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,                                                       // 1290
        setTimeout = context.setTimeout,                                                                               // 1291
        splice = arrayProto.splice;                                                                                    // 1292
                                                                                                                       // 1293
    /* Built-in method references for those with the same name as other `lodash` methods. */                           // 1294
    var nativeCeil = Math.ceil,                                                                                        // 1295
        nativeFloor = Math.floor,                                                                                      // 1296
        nativeIsFinite = context.isFinite,                                                                             // 1297
        nativeJoin = arrayProto.join,                                                                                  // 1298
        nativeKeys = Object.keys,                                                                                      // 1299
        nativeMax = Math.max,                                                                                          // 1300
        nativeMin = Math.min,                                                                                          // 1301
        nativeParseInt = context.parseInt,                                                                             // 1302
        nativeRandom = Math.random,                                                                                    // 1303
        nativeReverse = arrayProto.reverse;                                                                            // 1304
                                                                                                                       // 1305
    /* Built-in method references that are verified to be native. */                                                   // 1306
    var Map = getNative(context, 'Map'),                                                                               // 1307
        Set = getNative(context, 'Set'),                                                                               // 1308
        WeakMap = getNative(context, 'WeakMap'),                                                                       // 1309
        nativeCreate = getNative(Object, 'create');                                                                    // 1310
                                                                                                                       // 1311
    /** Used to store function metadata. */                                                                            // 1312
    var metaMap = WeakMap && new WeakMap;                                                                              // 1313
                                                                                                                       // 1314
    /** Used to detect maps and sets. */                                                                               // 1315
    var mapCtorString = Map ? funcToString.call(Map) : '',                                                             // 1316
        setCtorString = Set ? funcToString.call(Set) : '';                                                             // 1317
                                                                                                                       // 1318
    /** Used to convert symbols to primitives and strings. */                                                          // 1319
    var symbolProto = _Symbol ? _Symbol.prototype : undefined,                                                         // 1320
        symbolValueOf = _Symbol ? symbolProto.valueOf : undefined,                                                     // 1321
        symbolToString = _Symbol ? symbolProto.toString : undefined;                                                   // 1322
                                                                                                                       // 1323
    /** Used to lookup unminified function names. */                                                                   // 1324
    var realNames = {};                                                                                                // 1325
                                                                                                                       // 1326
    /*------------------------------------------------------------------------*/                                       // 1327
                                                                                                                       // 1328
    /**                                                                                                                // 1329
     * Creates a `lodash` object which wraps `value` to enable implicit method                                         // 1330
     * chaining. Methods that operate on and return arrays, collections, and                                           // 1331
     * functions can be chained together. Methods that retrieve a single value or                                      // 1332
     * may return a primitive value will automatically end the chain sequence and                                      // 1333
     * return the unwrapped value. Otherwise, the value must be unwrapped with                                         // 1334
     * `_#value`.                                                                                                      // 1335
     *                                                                                                                 // 1336
     * Explicit chaining, which must be unwrapped with `_#value` in all cases,                                         // 1337
     * may be enabled using `_.chain`.                                                                                 // 1338
     *                                                                                                                 // 1339
     * The execution of chained methods is lazy, that is, it's deferred until                                          // 1340
     * `_#value` is implicitly or explicitly called.                                                                   // 1341
     *                                                                                                                 // 1342
     * Lazy evaluation allows several methods to support shortcut fusion. Shortcut                                     // 1343
     * fusion is an optimization to merge iteratee calls; this avoids the creation                                     // 1344
     * of intermediate arrays and can greatly reduce the number of iteratee executions.                                // 1345
     * Sections of a chain sequence qualify for shortcut fusion if the section is                                      // 1346
     * applied to an array of at least two hundred elements and any iteratees                                          // 1347
     * accept only one argument. The heuristic for whether a section qualifies                                         // 1348
     * for shortcut fusion is subject to change.                                                                       // 1349
     *                                                                                                                 // 1350
     * Chaining is supported in custom builds as long as the `_#value` method is                                       // 1351
     * directly or indirectly included in the build.                                                                   // 1352
     *                                                                                                                 // 1353
     * In addition to lodash methods, wrappers have `Array` and `String` methods.                                      // 1354
     *                                                                                                                 // 1355
     * The wrapper `Array` methods are:                                                                                // 1356
     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`                                       // 1357
     *                                                                                                                 // 1358
     * The wrapper `String` methods are:                                                                               // 1359
     * `replace` and `split`                                                                                           // 1360
     *                                                                                                                 // 1361
     * The wrapper methods that support shortcut fusion are:                                                           // 1362
     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,                                            // 1363
     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,                                     // 1364
     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`                                       // 1365
     *                                                                                                                 // 1366
     * The chainable wrapper methods are:                                                                              // 1367
     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`,                                             // 1368
     * `at`, `before`, `bind`, `bindAll`, `bindKey`, `chain`, `chunk`, `commit`,                                       // 1369
     * `compact`, `concat`, `conforms`,  `constant`, `countBy`, `create`, `curry`,                                     // 1370
     * `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`, `difference`,                                         // 1371
     * `differenceBy`, `differenceWith`,  `drop`, `dropRight`, `dropRightWhile`,                                       // 1372
     * `dropWhile`, `fill`, `filter`, `flatten`, `flattenDeep`, `flip`, `flow`,                                        // 1373
     * `flowRight`, `forEach`, `forEachRight`, `forIn`, `forInRight`, `forOwn`,                                        // 1374
     * `forOwnRight`, `fromPairs`, `functions`, `functionsIn`, `groupBy`, `initial`,                                   // 1375
     * `intersection`, `intersectionBy`, `intersectionWith`, invert`, `invokeMap`,                                     // 1376
     * `iteratee`, `keyBy`, `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`,                                           // 1377
     * `matches`, `matchesProperty`, `memoize`, `merge`, `mergeWith`, `method`,                                        // 1378
     * `methodOf`, `mixin`, `negate`, `nthArg`, `omit`, `omitBy`, `once`, `orderBy`,                                   // 1379
     * `over`, `overArgs`, `overEvery`, `overSome`, `partial`, `partialRight`,                                         // 1380
     * `partition`, `pick`, `pickBy`, `plant`, `property`, `propertyOf`, `pull`,                                       // 1381
     * `pullAll`, `pullAllBy`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`,                                       // 1382
     * `reject`, `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`,                                          // 1383
     * `shuffle`, `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`,                                       // 1384
     * `takeRight`, `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`,                                          // 1385
     * `toArray`, `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`,                                      // 1386
     * `unary`, `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`,                                         // 1387
     * `unset`, `unshift`, `unzip`, `unzipWith`, `values`, `valuesIn`, `without`,                                      // 1388
     * `wrap`, `xor`, `xorBy`, `xorWith`, `zip`, `zipObject`, and `zipWith`                                            // 1389
     *                                                                                                                 // 1390
     * The wrapper methods that are **not** chainable by default are:                                                  // 1391
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,                                          // 1392
     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `deburr`, `endsWith`, `eq`,                                          // 1393
     * `escape`, `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`,                                              // 1394
     * `findLast`, `findLastIndex`, `findLastKey`, `floor`, `get`, `gt`, `gte`,                                        // 1395
     * `has`, `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`,                                           // 1396
     * `invoke`, `isArguments`, `isArray`, `isArrayLike`, `isArrayLikeObject`,                                         // 1397
     * `isBoolean`, `isDate`, `isElement`, `isEmpty`, `isEqual`, `isEqualWith`,                                        // 1398
     * `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`, `isMatch`,                                        // 1399
     * `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`, `isNumber`,                                              // 1400
     * `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`, `isSafeInteger`,                                       // 1401
     * `isString`, `isUndefined`, `isTypedArray`, `join`, `kebabCase`, `last`,                                         // 1402
     * `lastIndexOf`, `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`,                                          // 1403
     * `mean`, `min`, `minBy`, `noConflict`, `noop`, `now`, `pad`, `padEnd`,                                           // 1404
     * `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`, `repeat`,                                     // 1405
     * `result`, `round`, `runInContext`, `sample`, `shift`, `size`, `snakeCase`,                                      // 1406
     * `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`, `sortedLastIndexBy`,                                 // 1407
     * `startCase`, `startsWith`, `subtract`, `sum`, sumBy`, `template`, `times`,                                      // 1408
     * `toLower`, `toInteger`, `toLength`, `toNumber`, `toSafeInteger`, toString`,                                     // 1409
     * `toUpper`, `trim`, `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`,                                  // 1410
     * `upperCase`, `upperFirst`, `value`, and `words`                                                                 // 1411
     *                                                                                                                 // 1412
     * @name _                                                                                                         // 1413
     * @constructor                                                                                                    // 1414
     * @category Seq                                                                                                   // 1415
     * @param {*} value The value to wrap in a `lodash` instance.                                                      // 1416
     * @returns {Object} Returns the new `lodash` wrapper instance.                                                    // 1417
     * @example                                                                                                        // 1418
     *                                                                                                                 // 1419
     * function square(n) {                                                                                            // 1420
     *   return n * n;                                                                                                 // 1421
     * }                                                                                                               // 1422
     *                                                                                                                 // 1423
     * var wrapped = _([1, 2, 3]);                                                                                     // 1424
     *                                                                                                                 // 1425
     * // returns an unwrapped value                                                                                   // 1426
     * wrapped.reduce(_.add);                                                                                          // 1427
     * // => 6                                                                                                         // 1428
     *                                                                                                                 // 1429
     * // returns a wrapped value                                                                                      // 1430
     * var squares = wrapped.map(square);                                                                              // 1431
     *                                                                                                                 // 1432
     * _.isArray(squares);                                                                                             // 1433
     * // => false                                                                                                     // 1434
     *                                                                                                                 // 1435
     * _.isArray(squares.value());                                                                                     // 1436
     * // => true                                                                                                      // 1437
     */                                                                                                                // 1438
    function lodash(value) {                                                                                           // 1439
      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {                                 // 1440
        if (value instanceof LodashWrapper) {                                                                          // 1441
          return value;                                                                                                // 1442
        }                                                                                                              // 1443
        if (hasOwnProperty.call(value, '__wrapped__')) {                                                               // 1444
          return wrapperClone(value);                                                                                  // 1445
        }                                                                                                              // 1446
      }                                                                                                                // 1447
      return new LodashWrapper(value);                                                                                 // 1448
    }                                                                                                                  // 1449
                                                                                                                       // 1450
    /**                                                                                                                // 1451
     * The function whose prototype all chaining wrappers inherit from.                                                // 1452
     *                                                                                                                 // 1453
     * @private                                                                                                        // 1454
     */                                                                                                                // 1455
    function baseLodash() {                                                                                            // 1456
      // No operation performed.                                                                                       // 1457
    }                                                                                                                  // 1458
                                                                                                                       // 1459
    /**                                                                                                                // 1460
     * The base constructor for creating `lodash` wrapper objects.                                                     // 1461
     *                                                                                                                 // 1462
     * @private                                                                                                        // 1463
     * @param {*} value The value to wrap.                                                                             // 1464
     * @param {boolean} [chainAll] Enable chaining for all wrapper methods.                                            // 1465
     */                                                                                                                // 1466
    function LodashWrapper(value, chainAll) {                                                                          // 1467
      this.__wrapped__ = value;                                                                                        // 1468
      this.__actions__ = [];                                                                                           // 1469
      this.__chain__ = !!chainAll;                                                                                     // 1470
      this.__index__ = 0;                                                                                              // 1471
      this.__values__ = undefined;                                                                                     // 1472
    }                                                                                                                  // 1473
                                                                                                                       // 1474
    /**                                                                                                                // 1475
     * By default, the template delimiters used by lodash are like those in                                            // 1476
     * embedded Ruby (ERB). Change the following template settings to use                                              // 1477
     * alternative delimiters.                                                                                         // 1478
     *                                                                                                                 // 1479
     * @static                                                                                                         // 1480
     * @memberOf _                                                                                                     // 1481
     * @type Object                                                                                                    // 1482
     */                                                                                                                // 1483
    lodash.templateSettings = {                                                                                        // 1484
                                                                                                                       // 1485
      /**                                                                                                              // 1486
       * Used to detect `data` property values to be HTML-escaped.                                                     // 1487
       *                                                                                                               // 1488
       * @memberOf _.templateSettings                                                                                  // 1489
       * @type RegExp                                                                                                  // 1490
       */                                                                                                              // 1491
      'escape': reEscape,                                                                                              // 1492
                                                                                                                       // 1493
      /**                                                                                                              // 1494
       * Used to detect code to be evaluated.                                                                          // 1495
       *                                                                                                               // 1496
       * @memberOf _.templateSettings                                                                                  // 1497
       * @type RegExp                                                                                                  // 1498
       */                                                                                                              // 1499
      'evaluate': reEvaluate,                                                                                          // 1500
                                                                                                                       // 1501
      /**                                                                                                              // 1502
       * Used to detect `data` property values to inject.                                                              // 1503
       *                                                                                                               // 1504
       * @memberOf _.templateSettings                                                                                  // 1505
       * @type RegExp                                                                                                  // 1506
       */                                                                                                              // 1507
      'interpolate': reInterpolate,                                                                                    // 1508
                                                                                                                       // 1509
      /**                                                                                                              // 1510
       * Used to reference the data object in the template text.                                                       // 1511
       *                                                                                                               // 1512
       * @memberOf _.templateSettings                                                                                  // 1513
       * @type string                                                                                                  // 1514
       */                                                                                                              // 1515
      'variable': '',                                                                                                  // 1516
                                                                                                                       // 1517
      /**                                                                                                              // 1518
       * Used to import variables into the compiled template.                                                          // 1519
       *                                                                                                               // 1520
       * @memberOf _.templateSettings                                                                                  // 1521
       * @type Object                                                                                                  // 1522
       */                                                                                                              // 1523
      'imports': {                                                                                                     // 1524
                                                                                                                       // 1525
        /**                                                                                                            // 1526
         * A reference to the `lodash` function.                                                                       // 1527
         *                                                                                                             // 1528
         * @memberOf _.templateSettings.imports                                                                        // 1529
         * @type Function                                                                                              // 1530
         */                                                                                                            // 1531
        '_': lodash                                                                                                    // 1532
      }                                                                                                                // 1533
    };                                                                                                                 // 1534
                                                                                                                       // 1535
    /*------------------------------------------------------------------------*/                                       // 1536
                                                                                                                       // 1537
    /**                                                                                                                // 1538
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.                                    // 1539
     *                                                                                                                 // 1540
     * @private                                                                                                        // 1541
     * @param {*} value The value to wrap.                                                                             // 1542
     */                                                                                                                // 1543
    function LazyWrapper(value) {                                                                                      // 1544
      this.__wrapped__ = value;                                                                                        // 1545
      this.__actions__ = [];                                                                                           // 1546
      this.__dir__ = 1;                                                                                                // 1547
      this.__filtered__ = false;                                                                                       // 1548
      this.__iteratees__ = [];                                                                                         // 1549
      this.__takeCount__ = MAX_ARRAY_LENGTH;                                                                           // 1550
      this.__views__ = [];                                                                                             // 1551
    }                                                                                                                  // 1552
                                                                                                                       // 1553
    /**                                                                                                                // 1554
     * Creates a clone of the lazy wrapper object.                                                                     // 1555
     *                                                                                                                 // 1556
     * @private                                                                                                        // 1557
     * @name clone                                                                                                     // 1558
     * @memberOf LazyWrapper                                                                                           // 1559
     * @returns {Object} Returns the cloned `LazyWrapper` object.                                                      // 1560
     */                                                                                                                // 1561
    function lazyClone() {                                                                                             // 1562
      var result = new LazyWrapper(this.__wrapped__);                                                                  // 1563
      result.__actions__ = copyArray(this.__actions__);                                                                // 1564
      result.__dir__ = this.__dir__;                                                                                   // 1565
      result.__filtered__ = this.__filtered__;                                                                         // 1566
      result.__iteratees__ = copyArray(this.__iteratees__);                                                            // 1567
      result.__takeCount__ = this.__takeCount__;                                                                       // 1568
      result.__views__ = copyArray(this.__views__);                                                                    // 1569
      return result;                                                                                                   // 1570
    }                                                                                                                  // 1571
                                                                                                                       // 1572
    /**                                                                                                                // 1573
     * Reverses the direction of lazy iteration.                                                                       // 1574
     *                                                                                                                 // 1575
     * @private                                                                                                        // 1576
     * @name reverse                                                                                                   // 1577
     * @memberOf LazyWrapper                                                                                           // 1578
     * @returns {Object} Returns the new reversed `LazyWrapper` object.                                                // 1579
     */                                                                                                                // 1580
    function lazyReverse() {                                                                                           // 1581
      if (this.__filtered__) {                                                                                         // 1582
        var result = new LazyWrapper(this);                                                                            // 1583
        result.__dir__ = -1;                                                                                           // 1584
        result.__filtered__ = true;                                                                                    // 1585
      } else {                                                                                                         // 1586
        result = this.clone();                                                                                         // 1587
        result.__dir__ *= -1;                                                                                          // 1588
      }                                                                                                                // 1589
      return result;                                                                                                   // 1590
    }                                                                                                                  // 1591
                                                                                                                       // 1592
    /**                                                                                                                // 1593
     * Extracts the unwrapped value from its lazy wrapper.                                                             // 1594
     *                                                                                                                 // 1595
     * @private                                                                                                        // 1596
     * @name value                                                                                                     // 1597
     * @memberOf LazyWrapper                                                                                           // 1598
     * @returns {*} Returns the unwrapped value.                                                                       // 1599
     */                                                                                                                // 1600
    function lazyValue() {                                                                                             // 1601
      var array = this.__wrapped__.value(),                                                                            // 1602
          dir = this.__dir__,                                                                                          // 1603
          isArr = isArray(array),                                                                                      // 1604
          isRight = dir < 0,                                                                                           // 1605
          arrLength = isArr ? array.length : 0,                                                                        // 1606
          view = getView(0, arrLength, this.__views__),                                                                // 1607
          start = view.start,                                                                                          // 1608
          end = view.end,                                                                                              // 1609
          length = end - start,                                                                                        // 1610
          index = isRight ? end : (start - 1),                                                                         // 1611
          iteratees = this.__iteratees__,                                                                              // 1612
          iterLength = iteratees.length,                                                                               // 1613
          resIndex = 0,                                                                                                // 1614
          takeCount = nativeMin(length, this.__takeCount__);                                                           // 1615
                                                                                                                       // 1616
      if (!isArr || arrLength < LARGE_ARRAY_SIZE || (arrLength == length && takeCount == length)) {                    // 1617
        return baseWrapperValue(array, this.__actions__);                                                              // 1618
      }                                                                                                                // 1619
      var result = [];                                                                                                 // 1620
                                                                                                                       // 1621
      outer:                                                                                                           // 1622
      while (length-- && resIndex < takeCount) {                                                                       // 1623
        index += dir;                                                                                                  // 1624
                                                                                                                       // 1625
        var iterIndex = -1,                                                                                            // 1626
            value = array[index];                                                                                      // 1627
                                                                                                                       // 1628
        while (++iterIndex < iterLength) {                                                                             // 1629
          var data = iteratees[iterIndex],                                                                             // 1630
              iteratee = data.iteratee,                                                                                // 1631
              type = data.type,                                                                                        // 1632
              computed = iteratee(value);                                                                              // 1633
                                                                                                                       // 1634
          if (type == LAZY_MAP_FLAG) {                                                                                 // 1635
            value = computed;                                                                                          // 1636
          } else if (!computed) {                                                                                      // 1637
            if (type == LAZY_FILTER_FLAG) {                                                                            // 1638
              continue outer;                                                                                          // 1639
            } else {                                                                                                   // 1640
              break outer;                                                                                             // 1641
            }                                                                                                          // 1642
          }                                                                                                            // 1643
        }                                                                                                              // 1644
        result[resIndex++] = value;                                                                                    // 1645
      }                                                                                                                // 1646
      return result;                                                                                                   // 1647
    }                                                                                                                  // 1648
                                                                                                                       // 1649
    /*------------------------------------------------------------------------*/                                       // 1650
                                                                                                                       // 1651
    /**                                                                                                                // 1652
     * Creates an hash object.                                                                                         // 1653
     *                                                                                                                 // 1654
     * @private                                                                                                        // 1655
     * @returns {Object} Returns the new hash object.                                                                  // 1656
     */                                                                                                                // 1657
    function Hash() {}                                                                                                 // 1658
                                                                                                                       // 1659
    /**                                                                                                                // 1660
     * Removes `key` and its value from the hash.                                                                      // 1661
     *                                                                                                                 // 1662
     * @private                                                                                                        // 1663
     * @param {Object} hash The hash to modify.                                                                        // 1664
     * @param {string} key The key of the value to remove.                                                             // 1665
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.                                       // 1666
     */                                                                                                                // 1667
    function hashDelete(hash, key) {                                                                                   // 1668
      return hashHas(hash, key) && delete hash[key];                                                                   // 1669
    }                                                                                                                  // 1670
                                                                                                                       // 1671
    /**                                                                                                                // 1672
     * Gets the hash value for `key`.                                                                                  // 1673
     *                                                                                                                 // 1674
     * @private                                                                                                        // 1675
     * @param {Object} hash The hash to query.                                                                         // 1676
     * @param {string} key The key of the value to get.                                                                // 1677
     * @returns {*} Returns the entry value.                                                                           // 1678
     */                                                                                                                // 1679
    function hashGet(hash, key) {                                                                                      // 1680
      if (nativeCreate) {                                                                                              // 1681
        var result = hash[key];                                                                                        // 1682
        return result === HASH_UNDEFINED ? undefined : result;                                                         // 1683
      }                                                                                                                // 1684
      return hasOwnProperty.call(hash, key) ? hash[key] : undefined;                                                   // 1685
    }                                                                                                                  // 1686
                                                                                                                       // 1687
    /**                                                                                                                // 1688
     * Checks if a hash value for `key` exists.                                                                        // 1689
     *                                                                                                                 // 1690
     * @private                                                                                                        // 1691
     * @param {Object} hash The hash to query.                                                                         // 1692
     * @param {string} key The key of the entry to check.                                                              // 1693
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.                                   // 1694
     */                                                                                                                // 1695
    function hashHas(hash, key) {                                                                                      // 1696
      return nativeCreate ? hash[key] !== undefined : hasOwnProperty.call(hash, key);                                  // 1697
    }                                                                                                                  // 1698
                                                                                                                       // 1699
    /**                                                                                                                // 1700
     * Sets the hash `key` to `value`.                                                                                 // 1701
     *                                                                                                                 // 1702
     * @private                                                                                                        // 1703
     * @param {Object} hash The hash to modify.                                                                        // 1704
     * @param {string} key The key of the value to set.                                                                // 1705
     * @param {*} value The value to set.                                                                              // 1706
     */                                                                                                                // 1707
    function hashSet(hash, key, value) {                                                                               // 1708
      hash[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;                                      // 1709
    }                                                                                                                  // 1710
                                                                                                                       // 1711
    /*------------------------------------------------------------------------*/                                       // 1712
                                                                                                                       // 1713
    /**                                                                                                                // 1714
     * Creates a map cache object to store key-value pairs.                                                            // 1715
     *                                                                                                                 // 1716
     * @private                                                                                                        // 1717
     * @param {Array} [values] The values to cache.                                                                    // 1718
     */                                                                                                                // 1719
    function MapCache(values) {                                                                                        // 1720
      var index = -1,                                                                                                  // 1721
          length = values ? values.length : 0;                                                                         // 1722
                                                                                                                       // 1723
      this.clear();                                                                                                    // 1724
      while (++index < length) {                                                                                       // 1725
        var entry = values[index];                                                                                     // 1726
        this.set(entry[0], entry[1]);                                                                                  // 1727
      }                                                                                                                // 1728
    }                                                                                                                  // 1729
                                                                                                                       // 1730
    /**                                                                                                                // 1731
     * Removes all key-value entries from the map.                                                                     // 1732
     *                                                                                                                 // 1733
     * @private                                                                                                        // 1734
     * @name clear                                                                                                     // 1735
     * @memberOf MapCache                                                                                              // 1736
     */                                                                                                                // 1737
    function mapClear() {                                                                                              // 1738
      this.__data__ = { 'hash': new Hash, 'map': Map ? new Map : [], 'string': new Hash };                             // 1739
    }                                                                                                                  // 1740
                                                                                                                       // 1741
    /**                                                                                                                // 1742
     * Removes `key` and its value from the map.                                                                       // 1743
     *                                                                                                                 // 1744
     * @private                                                                                                        // 1745
     * @name delete                                                                                                    // 1746
     * @memberOf MapCache                                                                                              // 1747
     * @param {string} key The key of the value to remove.                                                             // 1748
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.                                       // 1749
     */                                                                                                                // 1750
    function mapDelete(key) {                                                                                          // 1751
      var data = this.__data__;                                                                                        // 1752
      if (isKeyable(key)) {                                                                                            // 1753
        return hashDelete(typeof key == 'string' ? data.string : data.hash, key);                                      // 1754
      }                                                                                                                // 1755
      return Map ? data.map['delete'](key) : assocDelete(data.map, key);                                               // 1756
    }                                                                                                                  // 1757
                                                                                                                       // 1758
    /**                                                                                                                // 1759
     * Gets the map value for `key`.                                                                                   // 1760
     *                                                                                                                 // 1761
     * @private                                                                                                        // 1762
     * @name get                                                                                                       // 1763
     * @memberOf MapCache                                                                                              // 1764
     * @param {string} key The key of the value to get.                                                                // 1765
     * @returns {*} Returns the entry value.                                                                           // 1766
     */                                                                                                                // 1767
    function mapGet(key) {                                                                                             // 1768
      var data = this.__data__;                                                                                        // 1769
      if (isKeyable(key)) {                                                                                            // 1770
        return hashGet(typeof key == 'string' ? data.string : data.hash, key);                                         // 1771
      }                                                                                                                // 1772
      return Map ? data.map.get(key) : assocGet(data.map, key);                                                        // 1773
    }                                                                                                                  // 1774
                                                                                                                       // 1775
    /**                                                                                                                // 1776
     * Checks if a map value for `key` exists.                                                                         // 1777
     *                                                                                                                 // 1778
     * @private                                                                                                        // 1779
     * @name has                                                                                                       // 1780
     * @memberOf MapCache                                                                                              // 1781
     * @param {string} key The key of the entry to check.                                                              // 1782
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.                                   // 1783
     */                                                                                                                // 1784
    function mapHas(key) {                                                                                             // 1785
      var data = this.__data__;                                                                                        // 1786
      if (isKeyable(key)) {                                                                                            // 1787
        return hashHas(typeof key == 'string' ? data.string : data.hash, key);                                         // 1788
      }                                                                                                                // 1789
      return Map ? data.map.has(key) : assocHas(data.map, key);                                                        // 1790
    }                                                                                                                  // 1791
                                                                                                                       // 1792
    /**                                                                                                                // 1793
     * Sets the map `key` to `value`.                                                                                  // 1794
     *                                                                                                                 // 1795
     * @private                                                                                                        // 1796
     * @name set                                                                                                       // 1797
     * @memberOf MapCache                                                                                              // 1798
     * @param {string} key The key of the value to set.                                                                // 1799
     * @param {*} value The value to set.                                                                              // 1800
     * @returns {Object} Returns the map cache object.                                                                 // 1801
     */                                                                                                                // 1802
    function mapSet(key, value) {                                                                                      // 1803
      var data = this.__data__;                                                                                        // 1804
      if (isKeyable(key)) {                                                                                            // 1805
        hashSet(typeof key == 'string' ? data.string : data.hash, key, value);                                         // 1806
      } else if (Map) {                                                                                                // 1807
        data.map.set(key, value);                                                                                      // 1808
      } else {                                                                                                         // 1809
        assocSet(data.map, key, value);                                                                                // 1810
      }                                                                                                                // 1811
      return this;                                                                                                     // 1812
    }                                                                                                                  // 1813
                                                                                                                       // 1814
    /*------------------------------------------------------------------------*/                                       // 1815
                                                                                                                       // 1816
    /**                                                                                                                // 1817
     *                                                                                                                 // 1818
     * Creates a set cache object to store unique values.                                                              // 1819
     *                                                                                                                 // 1820
     * @private                                                                                                        // 1821
     * @param {Array} [values] The values to cache.                                                                    // 1822
     */                                                                                                                // 1823
    function SetCache(values) {                                                                                        // 1824
      var index = -1,                                                                                                  // 1825
          length = values ? values.length : 0;                                                                         // 1826
                                                                                                                       // 1827
      this.__data__ = new MapCache;                                                                                    // 1828
      while (++index < length) {                                                                                       // 1829
        this.push(values[index]);                                                                                      // 1830
      }                                                                                                                // 1831
    }                                                                                                                  // 1832
                                                                                                                       // 1833
    /**                                                                                                                // 1834
     * Checks if `value` is in `cache`.                                                                                // 1835
     *                                                                                                                 // 1836
     * @private                                                                                                        // 1837
     * @param {Object} cache The set cache to search.                                                                  // 1838
     * @param {*} value The value to search for.                                                                       // 1839
     * @returns {number} Returns `true` if `value` is found, else `false`.                                             // 1840
     */                                                                                                                // 1841
    function cacheHas(cache, value) {                                                                                  // 1842
      var map = cache.__data__;                                                                                        // 1843
      if (isKeyable(value)) {                                                                                          // 1844
        var data = map.__data__,                                                                                       // 1845
            hash = typeof value == 'string' ? data.string : data.hash;                                                 // 1846
                                                                                                                       // 1847
        return hash[value] === HASH_UNDEFINED;                                                                         // 1848
      }                                                                                                                // 1849
      return map.has(value);                                                                                           // 1850
    }                                                                                                                  // 1851
                                                                                                                       // 1852
    /**                                                                                                                // 1853
     * Adds `value` to the set cache.                                                                                  // 1854
     *                                                                                                                 // 1855
     * @private                                                                                                        // 1856
     * @name push                                                                                                      // 1857
     * @memberOf SetCache                                                                                              // 1858
     * @param {*} value The value to cache.                                                                            // 1859
     */                                                                                                                // 1860
    function cachePush(value) {                                                                                        // 1861
      var map = this.__data__;                                                                                         // 1862
      if (isKeyable(value)) {                                                                                          // 1863
        var data = map.__data__,                                                                                       // 1864
            hash = typeof value == 'string' ? data.string : data.hash;                                                 // 1865
                                                                                                                       // 1866
        hash[value] = HASH_UNDEFINED;                                                                                  // 1867
      }                                                                                                                // 1868
      else {                                                                                                           // 1869
        map.set(value, HASH_UNDEFINED);                                                                                // 1870
      }                                                                                                                // 1871
    }                                                                                                                  // 1872
                                                                                                                       // 1873
    /*------------------------------------------------------------------------*/                                       // 1874
                                                                                                                       // 1875
    /**                                                                                                                // 1876
     * Creates a stack cache object to store key-value pairs.                                                          // 1877
     *                                                                                                                 // 1878
     * @private                                                                                                        // 1879
     * @param {Array} [values] The values to cache.                                                                    // 1880
     */                                                                                                                // 1881
    function Stack(values) {                                                                                           // 1882
      var index = -1,                                                                                                  // 1883
          length = values ? values.length : 0;                                                                         // 1884
                                                                                                                       // 1885
      this.clear();                                                                                                    // 1886
      while (++index < length) {                                                                                       // 1887
        var entry = values[index];                                                                                     // 1888
        this.set(entry[0], entry[1]);                                                                                  // 1889
      }                                                                                                                // 1890
    }                                                                                                                  // 1891
                                                                                                                       // 1892
    /**                                                                                                                // 1893
     * Removes all key-value entries from the stack.                                                                   // 1894
     *                                                                                                                 // 1895
     * @private                                                                                                        // 1896
     * @name clear                                                                                                     // 1897
     * @memberOf Stack                                                                                                 // 1898
     */                                                                                                                // 1899
    function stackClear() {                                                                                            // 1900
      this.__data__ = { 'array': [], 'map': null };                                                                    // 1901
    }                                                                                                                  // 1902
                                                                                                                       // 1903
    /**                                                                                                                // 1904
     * Removes `key` and its value from the stack.                                                                     // 1905
     *                                                                                                                 // 1906
     * @private                                                                                                        // 1907
     * @name delete                                                                                                    // 1908
     * @memberOf Stack                                                                                                 // 1909
     * @param {string} key The key of the value to remove.                                                             // 1910
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.                                       // 1911
     */                                                                                                                // 1912
    function stackDelete(key) {                                                                                        // 1913
      var data = this.__data__,                                                                                        // 1914
          array = data.array;                                                                                          // 1915
                                                                                                                       // 1916
      return array ? assocDelete(array, key) : data.map['delete'](key);                                                // 1917
    }                                                                                                                  // 1918
                                                                                                                       // 1919
    /**                                                                                                                // 1920
     * Gets the stack value for `key`.                                                                                 // 1921
     *                                                                                                                 // 1922
     * @private                                                                                                        // 1923
     * @name get                                                                                                       // 1924
     * @memberOf Stack                                                                                                 // 1925
     * @param {string} key The key of the value to get.                                                                // 1926
     * @returns {*} Returns the entry value.                                                                           // 1927
     */                                                                                                                // 1928
    function stackGet(key) {                                                                                           // 1929
      var data = this.__data__,                                                                                        // 1930
          array = data.array;                                                                                          // 1931
                                                                                                                       // 1932
      return array ? assocGet(array, key) : data.map.get(key);                                                         // 1933
    }                                                                                                                  // 1934
                                                                                                                       // 1935
    /**                                                                                                                // 1936
     * Checks if a stack value for `key` exists.                                                                       // 1937
     *                                                                                                                 // 1938
     * @private                                                                                                        // 1939
     * @name has                                                                                                       // 1940
     * @memberOf Stack                                                                                                 // 1941
     * @param {string} key The key of the entry to check.                                                              // 1942
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.                                   // 1943
     */                                                                                                                // 1944
    function stackHas(key) {                                                                                           // 1945
      var data = this.__data__,                                                                                        // 1946
          array = data.array;                                                                                          // 1947
                                                                                                                       // 1948
      return array ? assocHas(array, key) : data.map.has(key);                                                         // 1949
    }                                                                                                                  // 1950
                                                                                                                       // 1951
    /**                                                                                                                // 1952
     * Sets the stack `key` to `value`.                                                                                // 1953
     *                                                                                                                 // 1954
     * @private                                                                                                        // 1955
     * @name set                                                                                                       // 1956
     * @memberOf Stack                                                                                                 // 1957
     * @param {string} key The key of the value to set.                                                                // 1958
     * @param {*} value The value to set.                                                                              // 1959
     * @returns {Object} Returns the stack cache object.                                                               // 1960
     */                                                                                                                // 1961
    function stackSet(key, value) {                                                                                    // 1962
      var data = this.__data__,                                                                                        // 1963
          array = data.array;                                                                                          // 1964
                                                                                                                       // 1965
      if (array) {                                                                                                     // 1966
        if (array.length < (LARGE_ARRAY_SIZE - 1)) {                                                                   // 1967
          assocSet(array, key, value);                                                                                 // 1968
        } else {                                                                                                       // 1969
          data.array = null;                                                                                           // 1970
          data.map = new MapCache(array);                                                                              // 1971
        }                                                                                                              // 1972
      }                                                                                                                // 1973
      var map = data.map;                                                                                              // 1974
      if (map) {                                                                                                       // 1975
        map.set(key, value);                                                                                           // 1976
      }                                                                                                                // 1977
      return this;                                                                                                     // 1978
    }                                                                                                                  // 1979
                                                                                                                       // 1980
    /*------------------------------------------------------------------------*/                                       // 1981
                                                                                                                       // 1982
    /**                                                                                                                // 1983
     * Removes `key` and its value from the associative array.                                                         // 1984
     *                                                                                                                 // 1985
     * @private                                                                                                        // 1986
     * @param {Array} array The array to query.                                                                        // 1987
     * @param {string} key The key of the value to remove.                                                             // 1988
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.                                       // 1989
     */                                                                                                                // 1990
    function assocDelete(array, key) {                                                                                 // 1991
      var index = assocIndexOf(array, key);                                                                            // 1992
      if (index < 0) {                                                                                                 // 1993
        return false;                                                                                                  // 1994
      }                                                                                                                // 1995
      var lastIndex = array.length - 1;                                                                                // 1996
      if (index == lastIndex) {                                                                                        // 1997
        array.pop();                                                                                                   // 1998
      } else {                                                                                                         // 1999
        splice.call(array, index, 1);                                                                                  // 2000
      }                                                                                                                // 2001
      return true;                                                                                                     // 2002
    }                                                                                                                  // 2003
                                                                                                                       // 2004
    /**                                                                                                                // 2005
     * Gets the associative array value for `key`.                                                                     // 2006
     *                                                                                                                 // 2007
     * @private                                                                                                        // 2008
     * @param {Array} array The array to query.                                                                        // 2009
     * @param {string} key The key of the value to get.                                                                // 2010
     * @returns {*} Returns the entry value.                                                                           // 2011
     */                                                                                                                // 2012
    function assocGet(array, key) {                                                                                    // 2013
      var index = assocIndexOf(array, key);                                                                            // 2014
      return index < 0 ? undefined : array[index][1];                                                                  // 2015
    }                                                                                                                  // 2016
                                                                                                                       // 2017
    /**                                                                                                                // 2018
     * Checks if an associative array value for `key` exists.                                                          // 2019
     *                                                                                                                 // 2020
     * @private                                                                                                        // 2021
     * @param {Array} array The array to query.                                                                        // 2022
     * @param {string} key The key of the entry to check.                                                              // 2023
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.                                   // 2024
     */                                                                                                                // 2025
    function assocHas(array, key) {                                                                                    // 2026
      return assocIndexOf(array, key) > -1;                                                                            // 2027
    }                                                                                                                  // 2028
                                                                                                                       // 2029
    /**                                                                                                                // 2030
     * Gets the index at which the first occurrence of `key` is found in `array`                                       // 2031
     * of key-value pairs.                                                                                             // 2032
     *                                                                                                                 // 2033
     * @private                                                                                                        // 2034
     * @param {Array} array The array to search.                                                                       // 2035
     * @param {*} key The key to search for.                                                                           // 2036
     * @returns {number} Returns the index of the matched value, else `-1`.                                            // 2037
     */                                                                                                                // 2038
    function assocIndexOf(array, key) {                                                                                // 2039
      var length = array.length;                                                                                       // 2040
      while (length--) {                                                                                               // 2041
        if (eq(array[length][0], key)) {                                                                               // 2042
          return length;                                                                                               // 2043
        }                                                                                                              // 2044
      }                                                                                                                // 2045
      return -1;                                                                                                       // 2046
    }                                                                                                                  // 2047
                                                                                                                       // 2048
    /**                                                                                                                // 2049
     * Sets the associative array `key` to `value`.                                                                    // 2050
     *                                                                                                                 // 2051
     * @private                                                                                                        // 2052
     * @param {Array} array The array to modify.                                                                       // 2053
     * @param {string} key The key of the value to set.                                                                // 2054
     * @param {*} value The value to set.                                                                              // 2055
     */                                                                                                                // 2056
    function assocSet(array, key, value) {                                                                             // 2057
      var index = assocIndexOf(array, key);                                                                            // 2058
      if (index < 0) {                                                                                                 // 2059
        array.push([key, value]);                                                                                      // 2060
      } else {                                                                                                         // 2061
        array[index][1] = value;                                                                                       // 2062
      }                                                                                                                // 2063
    }                                                                                                                  // 2064
                                                                                                                       // 2065
    /*------------------------------------------------------------------------*/                                       // 2066
                                                                                                                       // 2067
    /**                                                                                                                // 2068
     * Used by `_.defaults` to customize its `_.assignIn` use.                                                         // 2069
     *                                                                                                                 // 2070
     * @private                                                                                                        // 2071
     * @param {*} objValue The destination value.                                                                      // 2072
     * @param {*} srcValue The source value.                                                                           // 2073
     * @param {string} key The key of the property to assign.                                                          // 2074
     * @param {Object} object The parent object of `objValue`.                                                         // 2075
     * @returns {*} Returns the value to assign.                                                                       // 2076
     */                                                                                                                // 2077
    function assignInDefaults(objValue, srcValue, key, object) {                                                       // 2078
      if (objValue === undefined ||                                                                                    // 2079
          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {                                     // 2080
        return srcValue;                                                                                               // 2081
      }                                                                                                                // 2082
      return objValue;                                                                                                 // 2083
    }                                                                                                                  // 2084
                                                                                                                       // 2085
    /**                                                                                                                // 2086
     * This function is like `assignValue` except that it doesn't assign `undefined` values.                           // 2087
     *                                                                                                                 // 2088
     * @private                                                                                                        // 2089
     * @param {Object} object The object to modify.                                                                    // 2090
     * @param {string} key The key of the property to assign.                                                          // 2091
     * @param {*} value The value to assign.                                                                           // 2092
     */                                                                                                                // 2093
    function assignMergeValue(object, key, value) {                                                                    // 2094
      if ((value !== undefined && !eq(object[key], value)) ||                                                          // 2095
          (typeof key == 'number' && value === undefined && !(key in object))) {                                       // 2096
        object[key] = value;                                                                                           // 2097
      }                                                                                                                // 2098
    }                                                                                                                  // 2099
                                                                                                                       // 2100
    /**                                                                                                                // 2101
     * Assigns `value` to `key` of `object` if the existing value is not equivalent                                    // 2102
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)                          // 2103
     * for equality comparisons.                                                                                       // 2104
     *                                                                                                                 // 2105
     * @private                                                                                                        // 2106
     * @param {Object} object The object to modify.                                                                    // 2107
     * @param {string} key The key of the property to assign.                                                          // 2108
     * @param {*} value The value to assign.                                                                           // 2109
     */                                                                                                                // 2110
    function assignValue(object, key, value) {                                                                         // 2111
      var objValue = object[key];                                                                                      // 2112
      if ((!eq(objValue, value) ||                                                                                     // 2113
            (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) ||                                  // 2114
          (value === undefined && !(key in object))) {                                                                 // 2115
        object[key] = value;                                                                                           // 2116
      }                                                                                                                // 2117
    }                                                                                                                  // 2118
                                                                                                                       // 2119
    /**                                                                                                                // 2120
     * The base implementation of `_.assign` without support for multiple sources                                      // 2121
     * or `customizer` functions.                                                                                      // 2122
     *                                                                                                                 // 2123
     * @private                                                                                                        // 2124
     * @param {Object} object The destination object.                                                                  // 2125
     * @param {Object} source The source object.                                                                       // 2126
     * @returns {Object} Returns `object`.                                                                             // 2127
     */                                                                                                                // 2128
    function baseAssign(object, source) {                                                                              // 2129
      return object && copyObject(source, keys(source), object);                                                       // 2130
    }                                                                                                                  // 2131
                                                                                                                       // 2132
    /**                                                                                                                // 2133
     * The base implementation of `_.at` without support for individual paths.                                         // 2134
     *                                                                                                                 // 2135
     * @private                                                                                                        // 2136
     * @param {Object} object The object to iterate over.                                                              // 2137
     * @param {string[]} paths The property paths of elements to pick.                                                 // 2138
     * @returns {Array} Returns the new array of picked elements.                                                      // 2139
     */                                                                                                                // 2140
    function baseAt(object, paths) {                                                                                   // 2141
      var index = -1,                                                                                                  // 2142
          isNil = object == null,                                                                                      // 2143
          length = paths.length,                                                                                       // 2144
          result = Array(length);                                                                                      // 2145
                                                                                                                       // 2146
      while (++index < length) {                                                                                       // 2147
        result[index] = isNil ? undefined : get(object, paths[index]);                                                 // 2148
      }                                                                                                                // 2149
      return result;                                                                                                   // 2150
    }                                                                                                                  // 2151
                                                                                                                       // 2152
    /**                                                                                                                // 2153
     * The base implementation of `_.clamp` which doesn't coerce arguments to numbers.                                 // 2154
     *                                                                                                                 // 2155
     * @private                                                                                                        // 2156
     * @param {number} number The number to clamp.                                                                     // 2157
     * @param {number} [lower] The lower bound.                                                                        // 2158
     * @param {number} upper The upper bound.                                                                          // 2159
     * @returns {number} Returns the clamped number.                                                                   // 2160
     */                                                                                                                // 2161
    function baseClamp(number, lower, upper) {                                                                         // 2162
      if (number === number) {                                                                                         // 2163
        if (upper !== undefined) {                                                                                     // 2164
          number = number <= upper ? number : upper;                                                                   // 2165
        }                                                                                                              // 2166
        if (lower !== undefined) {                                                                                     // 2167
          number = number >= lower ? number : lower;                                                                   // 2168
        }                                                                                                              // 2169
      }                                                                                                                // 2170
      return number;                                                                                                   // 2171
    }                                                                                                                  // 2172
                                                                                                                       // 2173
    /**                                                                                                                // 2174
     * The base implementation of `_.clone` and `_.cloneDeep` which tracks                                             // 2175
     * traversed objects.                                                                                              // 2176
     *                                                                                                                 // 2177
     * @private                                                                                                        // 2178
     * @param {*} value The value to clone.                                                                            // 2179
     * @param {boolean} [isDeep] Specify a deep clone.                                                                 // 2180
     * @param {Function} [customizer] The function to customize cloning.                                               // 2181
     * @param {string} [key] The key of `value`.                                                                       // 2182
     * @param {Object} [object] The parent object of `value`.                                                          // 2183
     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.                                  // 2184
     * @returns {*} Returns the cloned value.                                                                          // 2185
     */                                                                                                                // 2186
    function baseClone(value, isDeep, customizer, key, object, stack) {                                                // 2187
      var result;                                                                                                      // 2188
      if (customizer) {                                                                                                // 2189
        result = object ? customizer(value, key, object, stack) : customizer(value);                                   // 2190
      }                                                                                                                // 2191
      if (result !== undefined) {                                                                                      // 2192
        return result;                                                                                                 // 2193
      }                                                                                                                // 2194
      if (!isObject(value)) {                                                                                          // 2195
        return value;                                                                                                  // 2196
      }                                                                                                                // 2197
      var isArr = isArray(value);                                                                                      // 2198
      if (isArr) {                                                                                                     // 2199
        result = initCloneArray(value);                                                                                // 2200
        if (!isDeep) {                                                                                                 // 2201
          return copyArray(value, result);                                                                             // 2202
        }                                                                                                              // 2203
      } else {                                                                                                         // 2204
        var tag = getTag(value),                                                                                       // 2205
            isFunc = tag == funcTag || tag == genTag;                                                                  // 2206
                                                                                                                       // 2207
        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {                                               // 2208
          if (isHostObject(value)) {                                                                                   // 2209
            return object ? value : {};                                                                                // 2210
          }                                                                                                            // 2211
          result = initCloneObject(isFunc ? {} : value);                                                               // 2212
          if (!isDeep) {                                                                                               // 2213
            return copySymbols(value, baseAssign(result, value));                                                      // 2214
          }                                                                                                            // 2215
        } else {                                                                                                       // 2216
          return cloneableTags[tag]                                                                                    // 2217
            ? initCloneByTag(value, tag, isDeep)                                                                       // 2218
            : (object ? value : {});                                                                                   // 2219
        }                                                                                                              // 2220
      }                                                                                                                // 2221
      // Check for circular references and return its corresponding clone.                                             // 2222
      stack || (stack = new Stack);                                                                                    // 2223
      var stacked = stack.get(value);                                                                                  // 2224
      if (stacked) {                                                                                                   // 2225
        return stacked;                                                                                                // 2226
      }                                                                                                                // 2227
      stack.set(value, result);                                                                                        // 2228
                                                                                                                       // 2229
      // Recursively populate clone (susceptible to call stack limits).                                                // 2230
      (isArr ? arrayEach : baseForOwn)(value, function(subValue, key) {                                                // 2231
        assignValue(result, key, baseClone(subValue, isDeep, customizer, key, value, stack));                          // 2232
      });                                                                                                              // 2233
      return isArr ? result : copySymbols(value, result);                                                              // 2234
    }                                                                                                                  // 2235
                                                                                                                       // 2236
    /**                                                                                                                // 2237
     * The base implementation of `_.conforms` which doesn't clone `source`.                                           // 2238
     *                                                                                                                 // 2239
     * @private                                                                                                        // 2240
     * @param {Object} source The object of property predicates to conform to.                                         // 2241
     * @returns {Function} Returns the new function.                                                                   // 2242
     */                                                                                                                // 2243
    function baseConforms(source) {                                                                                    // 2244
      var props = keys(source),                                                                                        // 2245
          length = props.length;                                                                                       // 2246
                                                                                                                       // 2247
      return function(object) {                                                                                        // 2248
        if (object == null) {                                                                                          // 2249
          return !length;                                                                                              // 2250
        }                                                                                                              // 2251
        var index = length;                                                                                            // 2252
        while (index--) {                                                                                              // 2253
          var key = props[index],                                                                                      // 2254
              predicate = source[key],                                                                                 // 2255
              value = object[key];                                                                                     // 2256
                                                                                                                       // 2257
          if ((value === undefined && !(key in Object(object))) || !predicate(value)) {                                // 2258
            return false;                                                                                              // 2259
          }                                                                                                            // 2260
        }                                                                                                              // 2261
        return true;                                                                                                   // 2262
      };                                                                                                               // 2263
    }                                                                                                                  // 2264
                                                                                                                       // 2265
    /**                                                                                                                // 2266
     * The base implementation of `_.create` without support for assigning                                             // 2267
     * properties to the created object.                                                                               // 2268
     *                                                                                                                 // 2269
     * @private                                                                                                        // 2270
     * @param {Object} prototype The object to inherit from.                                                           // 2271
     * @returns {Object} Returns the new object.                                                                       // 2272
     */                                                                                                                // 2273
    var baseCreate = (function() {                                                                                     // 2274
      function object() {}                                                                                             // 2275
      return function(prototype) {                                                                                     // 2276
        if (isObject(prototype)) {                                                                                     // 2277
          object.prototype = prototype;                                                                                // 2278
          var result = new object;                                                                                     // 2279
          object.prototype = undefined;                                                                                // 2280
        }                                                                                                              // 2281
        return result || {};                                                                                           // 2282
      };                                                                                                               // 2283
    }());                                                                                                              // 2284
                                                                                                                       // 2285
    /**                                                                                                                // 2286
     * The base implementation of `_.delay` and `_.defer` which accepts an array                                       // 2287
     * of `func` arguments.                                                                                            // 2288
     *                                                                                                                 // 2289
     * @private                                                                                                        // 2290
     * @param {Function} func The function to delay.                                                                   // 2291
     * @param {number} wait The number of milliseconds to delay invocation.                                            // 2292
     * @param {Object} args The arguments provide to `func`.                                                           // 2293
     * @returns {number} Returns the timer id.                                                                         // 2294
     */                                                                                                                // 2295
    function baseDelay(func, wait, args) {                                                                             // 2296
      if (typeof func != 'function') {                                                                                 // 2297
        throw new TypeError(FUNC_ERROR_TEXT);                                                                          // 2298
      }                                                                                                                // 2299
      return setTimeout(function() { func.apply(undefined, args); }, wait);                                            // 2300
    }                                                                                                                  // 2301
                                                                                                                       // 2302
    /**                                                                                                                // 2303
     * The base implementation of methods like `_.difference` without support for                                      // 2304
     * excluding multiple arrays or iteratee shorthands.                                                               // 2305
     *                                                                                                                 // 2306
     * @private                                                                                                        // 2307
     * @param {Array} array The array to inspect.                                                                      // 2308
     * @param {Array} values The values to exclude.                                                                    // 2309
     * @param {Function} [iteratee] The iteratee invoked per element.                                                  // 2310
     * @param {Function} [comparator] The comparator invoked per element.                                              // 2311
     * @returns {Array} Returns the new array of filtered values.                                                      // 2312
     */                                                                                                                // 2313
    function baseDifference(array, values, iteratee, comparator) {                                                     // 2314
      var index = -1,                                                                                                  // 2315
          includes = arrayIncludes,                                                                                    // 2316
          isCommon = true,                                                                                             // 2317
          length = array.length,                                                                                       // 2318
          result = [],                                                                                                 // 2319
          valuesLength = values.length;                                                                                // 2320
                                                                                                                       // 2321
      if (!length) {                                                                                                   // 2322
        return result;                                                                                                 // 2323
      }                                                                                                                // 2324
      if (iteratee) {                                                                                                  // 2325
        values = arrayMap(values, baseUnary(iteratee));                                                                // 2326
      }                                                                                                                // 2327
      if (comparator) {                                                                                                // 2328
        includes = arrayIncludesWith;                                                                                  // 2329
        isCommon = false;                                                                                              // 2330
      }                                                                                                                // 2331
      else if (values.length >= LARGE_ARRAY_SIZE) {                                                                    // 2332
        includes = cacheHas;                                                                                           // 2333
        isCommon = false;                                                                                              // 2334
        values = new SetCache(values);                                                                                 // 2335
      }                                                                                                                // 2336
      outer:                                                                                                           // 2337
      while (++index < length) {                                                                                       // 2338
        var value = array[index],                                                                                      // 2339
            computed = iteratee ? iteratee(value) : value;                                                             // 2340
                                                                                                                       // 2341
        if (isCommon && computed === computed) {                                                                       // 2342
          var valuesIndex = valuesLength;                                                                              // 2343
          while (valuesIndex--) {                                                                                      // 2344
            if (values[valuesIndex] === computed) {                                                                    // 2345
              continue outer;                                                                                          // 2346
            }                                                                                                          // 2347
          }                                                                                                            // 2348
          result.push(value);                                                                                          // 2349
        }                                                                                                              // 2350
        else if (!includes(values, computed, comparator)) {                                                            // 2351
          result.push(value);                                                                                          // 2352
        }                                                                                                              // 2353
      }                                                                                                                // 2354
      return result;                                                                                                   // 2355
    }                                                                                                                  // 2356
                                                                                                                       // 2357
    /**                                                                                                                // 2358
     * The base implementation of `_.forEach` without support for iteratee shorthands.                                 // 2359
     *                                                                                                                 // 2360
     * @private                                                                                                        // 2361
     * @param {Array|Object} collection The collection to iterate over.                                                // 2362
     * @param {Function} iteratee The function invoked per iteration.                                                  // 2363
     * @returns {Array|Object} Returns `collection`.                                                                   // 2364
     */                                                                                                                // 2365
    var baseEach = createBaseEach(baseForOwn);                                                                         // 2366
                                                                                                                       // 2367
    /**                                                                                                                // 2368
     * The base implementation of `_.forEachRight` without support for iteratee shorthands.                            // 2369
     *                                                                                                                 // 2370
     * @private                                                                                                        // 2371
     * @param {Array|Object} collection The collection to iterate over.                                                // 2372
     * @param {Function} iteratee The function invoked per iteration.                                                  // 2373
     * @returns {Array|Object} Returns `collection`.                                                                   // 2374
     */                                                                                                                // 2375
    var baseEachRight = createBaseEach(baseForOwnRight, true);                                                         // 2376
                                                                                                                       // 2377
    /**                                                                                                                // 2378
     * The base implementation of `_.every` without support for iteratee shorthands.                                   // 2379
     *                                                                                                                 // 2380
     * @private                                                                                                        // 2381
     * @param {Array|Object} collection The collection to iterate over.                                                // 2382
     * @param {Function} predicate The function invoked per iteration.                                                 // 2383
     * @returns {boolean} Returns `true` if all elements pass the predicate check, else `false`                        // 2384
     */                                                                                                                // 2385
    function baseEvery(collection, predicate) {                                                                        // 2386
      var result = true;                                                                                               // 2387
      baseEach(collection, function(value, index, collection) {                                                        // 2388
        result = !!predicate(value, index, collection);                                                                // 2389
        return result;                                                                                                 // 2390
      });                                                                                                              // 2391
      return result;                                                                                                   // 2392
    }                                                                                                                  // 2393
                                                                                                                       // 2394
    /**                                                                                                                // 2395
     * The base implementation of `_.fill` without an iteratee call guard.                                             // 2396
     *                                                                                                                 // 2397
     * @private                                                                                                        // 2398
     * @param {Array} array The array to fill.                                                                         // 2399
     * @param {*} value The value to fill `array` with.                                                                // 2400
     * @param {number} [start=0] The start position.                                                                   // 2401
     * @param {number} [end=array.length] The end position.                                                            // 2402
     * @returns {Array} Returns `array`.                                                                               // 2403
     */                                                                                                                // 2404
    function baseFill(array, value, start, end) {                                                                      // 2405
      var length = array.length;                                                                                       // 2406
                                                                                                                       // 2407
      start = toInteger(start);                                                                                        // 2408
      if (start < 0) {                                                                                                 // 2409
        start = -start > length ? 0 : (length + start);                                                                // 2410
      }                                                                                                                // 2411
      end = (end === undefined || end > length) ? length : toInteger(end);                                             // 2412
      if (end < 0) {                                                                                                   // 2413
        end += length;                                                                                                 // 2414
      }                                                                                                                // 2415
      end = start > end ? 0 : toLength(end);                                                                           // 2416
      while (start < end) {                                                                                            // 2417
        array[start++] = value;                                                                                        // 2418
      }                                                                                                                // 2419
      return array;                                                                                                    // 2420
    }                                                                                                                  // 2421
                                                                                                                       // 2422
    /**                                                                                                                // 2423
     * The base implementation of `_.filter` without support for iteratee shorthands.                                  // 2424
     *                                                                                                                 // 2425
     * @private                                                                                                        // 2426
     * @param {Array|Object} collection The collection to iterate over.                                                // 2427
     * @param {Function} predicate The function invoked per iteration.                                                 // 2428
     * @returns {Array} Returns the new filtered array.                                                                // 2429
     */                                                                                                                // 2430
    function baseFilter(collection, predicate) {                                                                       // 2431
      var result = [];                                                                                                 // 2432
      baseEach(collection, function(value, index, collection) {                                                        // 2433
        if (predicate(value, index, collection)) {                                                                     // 2434
          result.push(value);                                                                                          // 2435
        }                                                                                                              // 2436
      });                                                                                                              // 2437
      return result;                                                                                                   // 2438
    }                                                                                                                  // 2439
                                                                                                                       // 2440
    /**                                                                                                                // 2441
     * The base implementation of `_.flatten` with support for restricting flattening.                                 // 2442
     *                                                                                                                 // 2443
     * @private                                                                                                        // 2444
     * @param {Array} array The array to flatten.                                                                      // 2445
     * @param {boolean} [isDeep] Specify a deep flatten.                                                               // 2446
     * @param {boolean} [isStrict] Restrict flattening to arrays-like objects.                                         // 2447
     * @param {Array} [result=[]] The initial result value.                                                            // 2448
     * @returns {Array} Returns the new flattened array.                                                               // 2449
     */                                                                                                                // 2450
    function baseFlatten(array, isDeep, isStrict, result) {                                                            // 2451
      result || (result = []);                                                                                         // 2452
                                                                                                                       // 2453
      var index = -1,                                                                                                  // 2454
          length = array.length;                                                                                       // 2455
                                                                                                                       // 2456
      while (++index < length) {                                                                                       // 2457
        var value = array[index];                                                                                      // 2458
        if (isArrayLikeObject(value) &&                                                                                // 2459
            (isStrict || isArray(value) || isArguments(value))) {                                                      // 2460
          if (isDeep) {                                                                                                // 2461
            // Recursively flatten arrays (susceptible to call stack limits).                                          // 2462
            baseFlatten(value, isDeep, isStrict, result);                                                              // 2463
          } else {                                                                                                     // 2464
            arrayPush(result, value);                                                                                  // 2465
          }                                                                                                            // 2466
        } else if (!isStrict) {                                                                                        // 2467
          result[result.length] = value;                                                                               // 2468
        }                                                                                                              // 2469
      }                                                                                                                // 2470
      return result;                                                                                                   // 2471
    }                                                                                                                  // 2472
                                                                                                                       // 2473
    /**                                                                                                                // 2474
     * The base implementation of `baseForIn` and `baseForOwn` which iterates                                          // 2475
     * over `object` properties returned by `keysFunc` invoking `iteratee` for                                         // 2476
     * each property. Iteratee functions may exit iteration early by explicitly                                        // 2477
     * returning `false`.                                                                                              // 2478
     *                                                                                                                 // 2479
     * @private                                                                                                        // 2480
     * @param {Object} object The object to iterate over.                                                              // 2481
     * @param {Function} iteratee The function invoked per iteration.                                                  // 2482
     * @param {Function} keysFunc The function to get the keys of `object`.                                            // 2483
     * @returns {Object} Returns `object`.                                                                             // 2484
     */                                                                                                                // 2485
    var baseFor = createBaseFor();                                                                                     // 2486
                                                                                                                       // 2487
    /**                                                                                                                // 2488
     * This function is like `baseFor` except that it iterates over properties                                         // 2489
     * in the opposite order.                                                                                          // 2490
     *                                                                                                                 // 2491
     * @private                                                                                                        // 2492
     * @param {Object} object The object to iterate over.                                                              // 2493
     * @param {Function} iteratee The function invoked per iteration.                                                  // 2494
     * @param {Function} keysFunc The function to get the keys of `object`.                                            // 2495
     * @returns {Object} Returns `object`.                                                                             // 2496
     */                                                                                                                // 2497
    var baseForRight = createBaseFor(true);                                                                            // 2498
                                                                                                                       // 2499
    /**                                                                                                                // 2500
     * The base implementation of `_.forIn` without support for iteratee shorthands.                                   // 2501
     *                                                                                                                 // 2502
     * @private                                                                                                        // 2503
     * @param {Object} object The object to iterate over.                                                              // 2504
     * @param {Function} iteratee The function invoked per iteration.                                                  // 2505
     * @returns {Object} Returns `object`.                                                                             // 2506
     */                                                                                                                // 2507
    function baseForIn(object, iteratee) {                                                                             // 2508
      return object == null ? object : baseFor(object, iteratee, keysIn);                                              // 2509
    }                                                                                                                  // 2510
                                                                                                                       // 2511
    /**                                                                                                                // 2512
     * The base implementation of `_.forOwn` without support for iteratee shorthands.                                  // 2513
     *                                                                                                                 // 2514
     * @private                                                                                                        // 2515
     * @param {Object} object The object to iterate over.                                                              // 2516
     * @param {Function} iteratee The function invoked per iteration.                                                  // 2517
     * @returns {Object} Returns `object`.                                                                             // 2518
     */                                                                                                                // 2519
    function baseForOwn(object, iteratee) {                                                                            // 2520
      return object && baseFor(object, iteratee, keys);                                                                // 2521
    }                                                                                                                  // 2522
                                                                                                                       // 2523
    /**                                                                                                                // 2524
     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.                             // 2525
     *                                                                                                                 // 2526
     * @private                                                                                                        // 2527
     * @param {Object} object The object to iterate over.                                                              // 2528
     * @param {Function} iteratee The function invoked per iteration.                                                  // 2529
     * @returns {Object} Returns `object`.                                                                             // 2530
     */                                                                                                                // 2531
    function baseForOwnRight(object, iteratee) {                                                                       // 2532
      return object && baseForRight(object, iteratee, keys);                                                           // 2533
    }                                                                                                                  // 2534
                                                                                                                       // 2535
    /**                                                                                                                // 2536
     * The base implementation of `_.functions` which creates an array of                                              // 2537
     * `object` function property names filtered from those provided.                                                  // 2538
     *                                                                                                                 // 2539
     * @private                                                                                                        // 2540
     * @param {Object} object The object to inspect.                                                                   // 2541
     * @param {Array} props The property names to filter.                                                              // 2542
     * @returns {Array} Returns the new array of filtered property names.                                              // 2543
     */                                                                                                                // 2544
    function baseFunctions(object, props) {                                                                            // 2545
      return arrayFilter(props, function(key) {                                                                        // 2546
        return isFunction(object[key]);                                                                                // 2547
      });                                                                                                              // 2548
    }                                                                                                                  // 2549
                                                                                                                       // 2550
    /**                                                                                                                // 2551
     * The base implementation of `_.get` without support for default values.                                          // 2552
     *                                                                                                                 // 2553
     * @private                                                                                                        // 2554
     * @param {Object} object The object to query.                                                                     // 2555
     * @param {Array|string} path The path of the property to get.                                                     // 2556
     * @returns {*} Returns the resolved value.                                                                        // 2557
     */                                                                                                                // 2558
    function baseGet(object, path) {                                                                                   // 2559
      path = isKey(path, object) ? [path + ''] : baseToPath(path);                                                     // 2560
                                                                                                                       // 2561
      var index = 0,                                                                                                   // 2562
          length = path.length;                                                                                        // 2563
                                                                                                                       // 2564
      while (object != null && index < length) {                                                                       // 2565
        object = object[path[index++]];                                                                                // 2566
      }                                                                                                                // 2567
      return (index && index == length) ? object : undefined;                                                          // 2568
    }                                                                                                                  // 2569
                                                                                                                       // 2570
    /**                                                                                                                // 2571
     * The base implementation of `_.has` without support for deep paths.                                              // 2572
     *                                                                                                                 // 2573
     * @private                                                                                                        // 2574
     * @param {Object} object The object to query.                                                                     // 2575
     * @param {Array|string} key The key to check.                                                                     // 2576
     * @returns {boolean} Returns `true` if `key` exists, else `false`.                                                // 2577
     */                                                                                                                // 2578
    function baseHas(object, key) {                                                                                    // 2579
      // Avoid a bug in IE 10-11 where objects with a [[Prototype]] of `null`,                                         // 2580
      // that are composed entirely of index properties, return `false` for                                            // 2581
      // `hasOwnProperty` checks of them.                                                                              // 2582
      return hasOwnProperty.call(object, key) ||                                                                       // 2583
        (typeof object == 'object' && key in object && getPrototypeOf(object) === null);                               // 2584
    }                                                                                                                  // 2585
                                                                                                                       // 2586
    /**                                                                                                                // 2587
     * The base implementation of `_.hasIn` without support for deep paths.                                            // 2588
     *                                                                                                                 // 2589
     * @private                                                                                                        // 2590
     * @param {Object} object The object to query.                                                                     // 2591
     * @param {Array|string} key The key to check.                                                                     // 2592
     * @returns {boolean} Returns `true` if `key` exists, else `false`.                                                // 2593
     */                                                                                                                // 2594
    function baseHasIn(object, key) {                                                                                  // 2595
      return key in Object(object);                                                                                    // 2596
    }                                                                                                                  // 2597
                                                                                                                       // 2598
    /**                                                                                                                // 2599
     * The base implementation of `_.inRange` which doesn't coerce arguments to numbers.                               // 2600
     *                                                                                                                 // 2601
     * @private                                                                                                        // 2602
     * @param {number} number The number to check.                                                                     // 2603
     * @param {number} start The start of the range.                                                                   // 2604
     * @param {number} end The end of the range.                                                                       // 2605
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.                                    // 2606
     */                                                                                                                // 2607
    function baseInRange(number, start, end) {                                                                         // 2608
      return number >= nativeMin(start, end) && number < nativeMax(start, end);                                        // 2609
    }                                                                                                                  // 2610
                                                                                                                       // 2611
    /**                                                                                                                // 2612
     * The base implementation of methods like `_.intersection`, without support                                       // 2613
     * for iteratee shorthands, that accepts an array of arrays to inspect.                                            // 2614
     *                                                                                                                 // 2615
     * @private                                                                                                        // 2616
     * @param {Array} arrays The arrays to inspect.                                                                    // 2617
     * @param {Function} [iteratee] The iteratee invoked per element.                                                  // 2618
     * @param {Function} [comparator] The comparator invoked per element.                                              // 2619
     * @returns {Array} Returns the new array of shared values.                                                        // 2620
     */                                                                                                                // 2621
    function baseIntersection(arrays, iteratee, comparator) {                                                          // 2622
      var includes = comparator ? arrayIncludesWith : arrayIncludes,                                                   // 2623
          othLength = arrays.length,                                                                                   // 2624
          othIndex = othLength,                                                                                        // 2625
          caches = Array(othLength),                                                                                   // 2626
          result = [];                                                                                                 // 2627
                                                                                                                       // 2628
      while (othIndex--) {                                                                                             // 2629
        var array = arrays[othIndex];                                                                                  // 2630
        if (othIndex && iteratee) {                                                                                    // 2631
          array = arrayMap(array, baseUnary(iteratee));                                                                // 2632
        }                                                                                                              // 2633
        caches[othIndex] = !comparator && (iteratee || array.length >= 120)                                            // 2634
          ? new SetCache(othIndex && array)                                                                            // 2635
          : undefined;                                                                                                 // 2636
      }                                                                                                                // 2637
      array = arrays[0];                                                                                               // 2638
                                                                                                                       // 2639
      var index = -1,                                                                                                  // 2640
          length = array.length,                                                                                       // 2641
          seen = caches[0];                                                                                            // 2642
                                                                                                                       // 2643
      outer:                                                                                                           // 2644
      while (++index < length) {                                                                                       // 2645
        var value = array[index],                                                                                      // 2646
            computed = iteratee ? iteratee(value) : value;                                                             // 2647
                                                                                                                       // 2648
        if (!(seen ? cacheHas(seen, computed) : includes(result, computed, comparator))) {                             // 2649
          var othIndex = othLength;                                                                                    // 2650
          while (--othIndex) {                                                                                         // 2651
            var cache = caches[othIndex];                                                                              // 2652
            if (!(cache ? cacheHas(cache, computed) : includes(arrays[othIndex], computed, comparator))) {             // 2653
              continue outer;                                                                                          // 2654
            }                                                                                                          // 2655
          }                                                                                                            // 2656
          if (seen) {                                                                                                  // 2657
            seen.push(computed);                                                                                       // 2658
          }                                                                                                            // 2659
          result.push(value);                                                                                          // 2660
        }                                                                                                              // 2661
      }                                                                                                                // 2662
      return result;                                                                                                   // 2663
    }                                                                                                                  // 2664
                                                                                                                       // 2665
    /**                                                                                                                // 2666
     * The base implementation of `_.invoke` without support for individual                                            // 2667
     * method arguments.                                                                                               // 2668
     *                                                                                                                 // 2669
     *                                                                                                                 // 2670
     * @private                                                                                                        // 2671
     * @param {Object} object The object to query.                                                                     // 2672
     * @param {Array|string} path The path of the method to invoke.                                                    // 2673
     * @param {Array} args The arguments to invoke the method with.                                                    // 2674
     * @returns {*} Returns the result of the invoked method.                                                          // 2675
     */                                                                                                                // 2676
    function baseInvoke(object, path, args) {                                                                          // 2677
      if (!isKey(path, object)) {                                                                                      // 2678
        path = baseToPath(path);                                                                                       // 2679
        object = parent(object, path);                                                                                 // 2680
        path = last(path);                                                                                             // 2681
      }                                                                                                                // 2682
      var func = object == null ? object : object[path];                                                               // 2683
      return func == null ? undefined : apply(func, object, args);                                                     // 2684
    }                                                                                                                  // 2685
                                                                                                                       // 2686
    /**                                                                                                                // 2687
     * The base implementation of `_.isEqual` which supports partial comparisons                                       // 2688
     * and tracks traversed objects.                                                                                   // 2689
     *                                                                                                                 // 2690
     * @private                                                                                                        // 2691
     * @param {*} value The value to compare.                                                                          // 2692
     * @param {*} other The other value to compare.                                                                    // 2693
     * @param {Function} [customizer] The function to customize comparisons.                                           // 2694
     * @param {boolean} [bitmask] The bitmask of comparison flags.                                                     // 2695
     *  The bitmask may be composed of the following flags:                                                            // 2696
     *     1 - Unordered comparison                                                                                    // 2697
     *     2 - Partial comparison                                                                                      // 2698
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.                                           // 2699
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.                                   // 2700
     */                                                                                                                // 2701
    function baseIsEqual(value, other, customizer, bitmask, stack) {                                                   // 2702
      if (value === other) {                                                                                           // 2703
        return true;                                                                                                   // 2704
      }                                                                                                                // 2705
      if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {                              // 2706
        return value !== value && other !== other;                                                                     // 2707
      }                                                                                                                // 2708
      return baseIsEqualDeep(value, other, baseIsEqual, customizer, bitmask, stack);                                   // 2709
    }                                                                                                                  // 2710
                                                                                                                       // 2711
    /**                                                                                                                // 2712
     * A specialized version of `baseIsEqual` for arrays and objects which performs                                    // 2713
     * deep comparisons and tracks traversed objects enabling objects with circular                                    // 2714
     * references to be compared.                                                                                      // 2715
     *                                                                                                                 // 2716
     * @private                                                                                                        // 2717
     * @param {Object} object The object to compare.                                                                   // 2718
     * @param {Object} other The other object to compare.                                                              // 2719
     * @param {Function} equalFunc The function to determine equivalents of values.                                    // 2720
     * @param {Function} [customizer] The function to customize comparisons.                                           // 2721
     * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual` for more details.                  // 2722
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.                                          // 2723
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.                                  // 2724
     */                                                                                                                // 2725
    function baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {                                   // 2726
      var objIsArr = isArray(object),                                                                                  // 2727
          othIsArr = isArray(other),                                                                                   // 2728
          objTag = arrayTag,                                                                                           // 2729
          othTag = arrayTag;                                                                                           // 2730
                                                                                                                       // 2731
      if (!objIsArr) {                                                                                                 // 2732
        objTag = getTag(object);                                                                                       // 2733
        if (objTag == argsTag) {                                                                                       // 2734
          objTag = objectTag;                                                                                          // 2735
        } else if (objTag != objectTag) {                                                                              // 2736
          objIsArr = isTypedArray(object);                                                                             // 2737
        }                                                                                                              // 2738
      }                                                                                                                // 2739
      if (!othIsArr) {                                                                                                 // 2740
        othTag = getTag(other);                                                                                        // 2741
        if (othTag == argsTag) {                                                                                       // 2742
          othTag = objectTag;                                                                                          // 2743
        } else if (othTag != objectTag) {                                                                              // 2744
          othIsArr = isTypedArray(other);                                                                              // 2745
        }                                                                                                              // 2746
      }                                                                                                                // 2747
      var objIsObj = objTag == objectTag && !isHostObject(object),                                                     // 2748
          othIsObj = othTag == objectTag && !isHostObject(other),                                                      // 2749
          isSameTag = objTag == othTag;                                                                                // 2750
                                                                                                                       // 2751
      if (isSameTag && !(objIsArr || objIsObj)) {                                                                      // 2752
        return equalByTag(object, other, objTag, equalFunc, customizer, bitmask);                                      // 2753
      }                                                                                                                // 2754
      var isPartial = bitmask & PARTIAL_COMPARE_FLAG;                                                                  // 2755
      if (!isPartial) {                                                                                                // 2756
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),                                     // 2757
            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');                                      // 2758
                                                                                                                       // 2759
        if (objIsWrapped || othIsWrapped) {                                                                            // 2760
          return equalFunc(objIsWrapped ? object.value() : object, othIsWrapped ? other.value() : other, customizer, bitmask, stack);
        }                                                                                                              // 2762
      }                                                                                                                // 2763
      if (!isSameTag) {                                                                                                // 2764
        return false;                                                                                                  // 2765
      }                                                                                                                // 2766
      stack || (stack = new Stack);                                                                                    // 2767
      return (objIsArr ? equalArrays : equalObjects)(object, other, equalFunc, customizer, bitmask, stack);            // 2768
    }                                                                                                                  // 2769
                                                                                                                       // 2770
    /**                                                                                                                // 2771
     * The base implementation of `_.isMatch` without support for iteratee shorthands.                                 // 2772
     *                                                                                                                 // 2773
     * @private                                                                                                        // 2774
     * @param {Object} object The object to inspect.                                                                   // 2775
     * @param {Object} source The object of property values to match.                                                  // 2776
     * @param {Array} matchData The property names, values, and compare flags to match.                                // 2777
     * @param {Function} [customizer] The function to customize comparisons.                                           // 2778
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.                                         // 2779
     */                                                                                                                // 2780
    function baseIsMatch(object, source, matchData, customizer) {                                                      // 2781
      var index = matchData.length,                                                                                    // 2782
          length = index,                                                                                              // 2783
          noCustomizer = !customizer;                                                                                  // 2784
                                                                                                                       // 2785
      if (object == null) {                                                                                            // 2786
        return !length;                                                                                                // 2787
      }                                                                                                                // 2788
      object = Object(object);                                                                                         // 2789
      while (index--) {                                                                                                // 2790
        var data = matchData[index];                                                                                   // 2791
        if ((noCustomizer && data[2])                                                                                  // 2792
              ? data[1] !== object[data[0]]                                                                            // 2793
              : !(data[0] in object)                                                                                   // 2794
            ) {                                                                                                        // 2795
          return false;                                                                                                // 2796
        }                                                                                                              // 2797
      }                                                                                                                // 2798
      while (++index < length) {                                                                                       // 2799
        data = matchData[index];                                                                                       // 2800
        var key = data[0],                                                                                             // 2801
            objValue = object[key],                                                                                    // 2802
            srcValue = data[1];                                                                                        // 2803
                                                                                                                       // 2804
        if (noCustomizer && data[2]) {                                                                                 // 2805
          if (objValue === undefined && !(key in object)) {                                                            // 2806
            return false;                                                                                              // 2807
          }                                                                                                            // 2808
        } else {                                                                                                       // 2809
          var stack = new Stack,                                                                                       // 2810
              result = customizer ? customizer(objValue, srcValue, key, object, source, stack) : undefined;            // 2811
                                                                                                                       // 2812
          if (!(result === undefined ? baseIsEqual(srcValue, objValue, customizer, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG, stack) : result)) {
            return false;                                                                                              // 2814
          }                                                                                                            // 2815
        }                                                                                                              // 2816
      }                                                                                                                // 2817
      return true;                                                                                                     // 2818
    }                                                                                                                  // 2819
                                                                                                                       // 2820
    /**                                                                                                                // 2821
     * The base implementation of `_.iteratee`.                                                                        // 2822
     *                                                                                                                 // 2823
     * @private                                                                                                        // 2824
     * @param {*} [value=_.identity] The value to convert to an iteratee.                                              // 2825
     * @returns {Function} Returns the iteratee.                                                                       // 2826
     */                                                                                                                // 2827
    function baseIteratee(value) {                                                                                     // 2828
      var type = typeof value;                                                                                         // 2829
      if (type == 'function') {                                                                                        // 2830
        return value;                                                                                                  // 2831
      }                                                                                                                // 2832
      if (value == null) {                                                                                             // 2833
        return identity;                                                                                               // 2834
      }                                                                                                                // 2835
      if (type == 'object') {                                                                                          // 2836
        return isArray(value)                                                                                          // 2837
          ? baseMatchesProperty(value[0], value[1])                                                                    // 2838
          : baseMatches(value);                                                                                        // 2839
      }                                                                                                                // 2840
      return property(value);                                                                                          // 2841
    }                                                                                                                  // 2842
                                                                                                                       // 2843
    /**                                                                                                                // 2844
     * The base implementation of `_.keys` which doesn't skip the constructor                                          // 2845
     * property of prototypes or treat sparse arrays as dense.                                                         // 2846
     *                                                                                                                 // 2847
     * @private                                                                                                        // 2848
     * @type Function                                                                                                  // 2849
     * @param {Object} object The object to query.                                                                     // 2850
     * @returns {Array} Returns the array of property names.                                                           // 2851
     */                                                                                                                // 2852
    function baseKeys(object) {                                                                                        // 2853
      return nativeKeys(Object(object));                                                                               // 2854
    }                                                                                                                  // 2855
                                                                                                                       // 2856
    /**                                                                                                                // 2857
     * The base implementation of `_.keysIn` which doesn't skip the constructor                                        // 2858
     * property of prototypes or treat sparse arrays as dense.                                                         // 2859
     *                                                                                                                 // 2860
     * @private                                                                                                        // 2861
     * @param {Object} object The object to query.                                                                     // 2862
     * @returns {Array} Returns the array of property names.                                                           // 2863
     */                                                                                                                // 2864
    function baseKeysIn(object) {                                                                                      // 2865
      object = object == null ? object : Object(object);                                                               // 2866
                                                                                                                       // 2867
      var result = [];                                                                                                 // 2868
      for (var key in object) {                                                                                        // 2869
        result.push(key);                                                                                              // 2870
      }                                                                                                                // 2871
      return result;                                                                                                   // 2872
    }                                                                                                                  // 2873
                                                                                                                       // 2874
    // Fallback for IE < 9 with es6-shim.                                                                              // 2875
    if (enumerate && !propertyIsEnumerable.call({ 'valueOf': 1 }, 'valueOf')) {                                        // 2876
      baseKeysIn = function(object) {                                                                                  // 2877
        return iteratorToArray(enumerate(object));                                                                     // 2878
      };                                                                                                               // 2879
    }                                                                                                                  // 2880
                                                                                                                       // 2881
    /**                                                                                                                // 2882
     * The base implementation of `_.map` without support for iteratee shorthands.                                     // 2883
     *                                                                                                                 // 2884
     * @private                                                                                                        // 2885
     * @param {Array|Object} collection The collection to iterate over.                                                // 2886
     * @param {Function} iteratee The function invoked per iteration.                                                  // 2887
     * @returns {Array} Returns the new mapped array.                                                                  // 2888
     */                                                                                                                // 2889
    function baseMap(collection, iteratee) {                                                                           // 2890
      var index = -1,                                                                                                  // 2891
          result = isArrayLike(collection) ? Array(collection.length) : [];                                            // 2892
                                                                                                                       // 2893
      baseEach(collection, function(value, key, collection) {                                                          // 2894
        result[++index] = iteratee(value, key, collection);                                                            // 2895
      });                                                                                                              // 2896
      return result;                                                                                                   // 2897
    }                                                                                                                  // 2898
                                                                                                                       // 2899
    /**                                                                                                                // 2900
     * The base implementation of `_.matches` which doesn't clone `source`.                                            // 2901
     *                                                                                                                 // 2902
     * @private                                                                                                        // 2903
     * @param {Object} source The object of property values to match.                                                  // 2904
     * @returns {Function} Returns the new function.                                                                   // 2905
     */                                                                                                                // 2906
    function baseMatches(source) {                                                                                     // 2907
      var matchData = getMatchData(source);                                                                            // 2908
      if (matchData.length == 1 && matchData[0][2]) {                                                                  // 2909
        var key = matchData[0][0],                                                                                     // 2910
            value = matchData[0][1];                                                                                   // 2911
                                                                                                                       // 2912
        return function(object) {                                                                                      // 2913
          if (object == null) {                                                                                        // 2914
            return false;                                                                                              // 2915
          }                                                                                                            // 2916
          return object[key] === value &&                                                                              // 2917
            (value !== undefined || (key in Object(object)));                                                          // 2918
        };                                                                                                             // 2919
      }                                                                                                                // 2920
      return function(object) {                                                                                        // 2921
        return object === source || baseIsMatch(object, source, matchData);                                            // 2922
      };                                                                                                               // 2923
    }                                                                                                                  // 2924
                                                                                                                       // 2925
    /**                                                                                                                // 2926
     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.                                  // 2927
     *                                                                                                                 // 2928
     * @private                                                                                                        // 2929
     * @param {string} path The path of the property to get.                                                           // 2930
     * @param {*} srcValue The value to match.                                                                         // 2931
     * @returns {Function} Returns the new function.                                                                   // 2932
     */                                                                                                                // 2933
    function baseMatchesProperty(path, srcValue) {                                                                     // 2934
      return function(object) {                                                                                        // 2935
        var objValue = get(object, path);                                                                              // 2936
        return (objValue === undefined && objValue === srcValue)                                                       // 2937
          ? hasIn(object, path)                                                                                        // 2938
          : baseIsEqual(srcValue, objValue, undefined, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG);                 // 2939
      };                                                                                                               // 2940
    }                                                                                                                  // 2941
                                                                                                                       // 2942
    /**                                                                                                                // 2943
     * The base implementation of `_.merge` without support for multiple sources.                                      // 2944
     *                                                                                                                 // 2945
     * @private                                                                                                        // 2946
     * @param {Object} object The destination object.                                                                  // 2947
     * @param {Object} source The source object.                                                                       // 2948
     * @param {Function} [customizer] The function to customize merged values.                                         // 2949
     * @param {Object} [stack] Tracks traversed source values and their merged counterparts.                           // 2950
     */                                                                                                                // 2951
    function baseMerge(object, source, customizer, stack) {                                                            // 2952
      if (object === source) {                                                                                         // 2953
        return;                                                                                                        // 2954
      }                                                                                                                // 2955
      var props = (isArray(source) || isTypedArray(source)) ? undefined : keysIn(source);                              // 2956
      arrayEach(props || source, function(srcValue, key) {                                                             // 2957
        if (props) {                                                                                                   // 2958
          key = srcValue;                                                                                              // 2959
          srcValue = source[key];                                                                                      // 2960
        }                                                                                                              // 2961
        if (isObject(srcValue)) {                                                                                      // 2962
          stack || (stack = new Stack);                                                                                // 2963
          baseMergeDeep(object, source, key, baseMerge, customizer, stack);                                            // 2964
        }                                                                                                              // 2965
        else {                                                                                                         // 2966
          var newValue = customizer ? customizer(object[key], srcValue, (key + ''), object, source, stack) : undefined;
          if (newValue === undefined) {                                                                                // 2968
            newValue = srcValue;                                                                                       // 2969
          }                                                                                                            // 2970
          assignMergeValue(object, key, newValue);                                                                     // 2971
        }                                                                                                              // 2972
      });                                                                                                              // 2973
    }                                                                                                                  // 2974
                                                                                                                       // 2975
    /**                                                                                                                // 2976
     * A specialized version of `baseMerge` for arrays and objects which performs                                      // 2977
     * deep merges and tracks traversed objects enabling objects with circular                                         // 2978
     * references to be merged.                                                                                        // 2979
     *                                                                                                                 // 2980
     * @private                                                                                                        // 2981
     * @param {Object} object The destination object.                                                                  // 2982
     * @param {Object} source The source object.                                                                       // 2983
     * @param {string} key The key of the value to merge.                                                              // 2984
     * @param {Function} mergeFunc The function to merge values.                                                       // 2985
     * @param {Function} [customizer] The function to customize assigned values.                                       // 2986
     * @param {Object} [stack] Tracks traversed source values and their merged counterparts.                           // 2987
     */                                                                                                                // 2988
    function baseMergeDeep(object, source, key, mergeFunc, customizer, stack) {                                        // 2989
      var objValue = object[key],                                                                                      // 2990
          srcValue = source[key],                                                                                      // 2991
          stacked = stack.get(srcValue) || stack.get(objValue);                                                        // 2992
                                                                                                                       // 2993
      if (stacked) {                                                                                                   // 2994
        assignMergeValue(object, key, stacked);                                                                        // 2995
        return;                                                                                                        // 2996
      }                                                                                                                // 2997
      var newValue = customizer ? customizer(objValue, srcValue, (key + ''), object, source, stack) : undefined,       // 2998
          isCommon = newValue === undefined;                                                                           // 2999
                                                                                                                       // 3000
      if (isCommon) {                                                                                                  // 3001
        newValue = srcValue;                                                                                           // 3002
        if (isArray(srcValue) || isTypedArray(srcValue)) {                                                             // 3003
          newValue = isArray(objValue)                                                                                 // 3004
            ? objValue                                                                                                 // 3005
            : ((isArrayLikeObject(objValue)) ? copyArray(objValue) : baseClone(srcValue));                             // 3006
        }                                                                                                              // 3007
        else if (isPlainObject(srcValue) || isArguments(srcValue)) {                                                   // 3008
          newValue = isArguments(objValue)                                                                             // 3009
            ? toPlainObject(objValue)                                                                                  // 3010
            : (isObject(objValue) ? objValue : baseClone(srcValue));                                                   // 3011
        }                                                                                                              // 3012
        else {                                                                                                         // 3013
          isCommon = isFunction(srcValue);                                                                             // 3014
        }                                                                                                              // 3015
      }                                                                                                                // 3016
      stack.set(srcValue, newValue);                                                                                   // 3017
                                                                                                                       // 3018
      if (isCommon) {                                                                                                  // 3019
        // Recursively merge objects and arrays (susceptible to call stack limits).                                    // 3020
        mergeFunc(newValue, srcValue, customizer, stack);                                                              // 3021
      }                                                                                                                // 3022
      assignMergeValue(object, key, newValue);                                                                         // 3023
    }                                                                                                                  // 3024
                                                                                                                       // 3025
    /**                                                                                                                // 3026
     * The base implementation of `_.orderBy` without param guards.                                                    // 3027
     *                                                                                                                 // 3028
     * @private                                                                                                        // 3029
     * @param {Array|Object} collection The collection to iterate over.                                                // 3030
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.                                       // 3031
     * @param {string[]} orders The sort orders of `iteratees`.                                                        // 3032
     * @returns {Array} Returns the new sorted array.                                                                  // 3033
     */                                                                                                                // 3034
    function baseOrderBy(collection, iteratees, orders) {                                                              // 3035
      var index = -1,                                                                                                  // 3036
          toIteratee = getIteratee();                                                                                  // 3037
                                                                                                                       // 3038
      iteratees = arrayMap(iteratees.length ? iteratees : Array(1), function(iteratee) {                               // 3039
        return toIteratee(iteratee);                                                                                   // 3040
      });                                                                                                              // 3041
                                                                                                                       // 3042
      var result = baseMap(collection, function(value, key, collection) {                                              // 3043
        var criteria = arrayMap(iteratees, function(iteratee) {                                                        // 3044
          return iteratee(value);                                                                                      // 3045
        });                                                                                                            // 3046
        return { 'criteria': criteria, 'index': ++index, 'value': value };                                             // 3047
      });                                                                                                              // 3048
                                                                                                                       // 3049
      return baseSortBy(result, function(object, other) {                                                              // 3050
        return compareMultiple(object, other, orders);                                                                 // 3051
      });                                                                                                              // 3052
    }                                                                                                                  // 3053
                                                                                                                       // 3054
    /**                                                                                                                // 3055
     * The base implementation of `_.pick` without support for individual                                              // 3056
     * property names.                                                                                                 // 3057
     *                                                                                                                 // 3058
     * @private                                                                                                        // 3059
     * @param {Object} object The source object.                                                                       // 3060
     * @param {string[]} props The property names to pick.                                                             // 3061
     * @returns {Object} Returns the new object.                                                                       // 3062
     */                                                                                                                // 3063
    function basePick(object, props) {                                                                                 // 3064
      object = Object(object);                                                                                         // 3065
      return arrayReduce(props, function(result, key) {                                                                // 3066
        if (key in object) {                                                                                           // 3067
          result[key] = object[key];                                                                                   // 3068
        }                                                                                                              // 3069
        return result;                                                                                                 // 3070
      }, {});                                                                                                          // 3071
    }                                                                                                                  // 3072
                                                                                                                       // 3073
    /**                                                                                                                // 3074
     * The base implementation of  `_.pickBy` without support for iteratee shorthands.                                 // 3075
     *                                                                                                                 // 3076
     * @private                                                                                                        // 3077
     * @param {Object} object The source object.                                                                       // 3078
     * @param {Function} predicate The function invoked per property.                                                  // 3079
     * @returns {Object} Returns the new object.                                                                       // 3080
     */                                                                                                                // 3081
    function basePickBy(object, predicate) {                                                                           // 3082
      var result = {};                                                                                                 // 3083
      baseForIn(object, function(value, key) {                                                                         // 3084
        if (predicate(value)) {                                                                                        // 3085
          result[key] = value;                                                                                         // 3086
        }                                                                                                              // 3087
      });                                                                                                              // 3088
      return result;                                                                                                   // 3089
    }                                                                                                                  // 3090
                                                                                                                       // 3091
    /**                                                                                                                // 3092
     * The base implementation of `_.property` without support for deep paths.                                         // 3093
     *                                                                                                                 // 3094
     * @private                                                                                                        // 3095
     * @param {string} key The key of the property to get.                                                             // 3096
     * @returns {Function} Returns the new function.                                                                   // 3097
     */                                                                                                                // 3098
    function baseProperty(key) {                                                                                       // 3099
      return function(object) {                                                                                        // 3100
        return object == null ? undefined : object[key];                                                               // 3101
      };                                                                                                               // 3102
    }                                                                                                                  // 3103
                                                                                                                       // 3104
    /**                                                                                                                // 3105
     * A specialized version of `baseProperty` which supports deep paths.                                              // 3106
     *                                                                                                                 // 3107
     * @private                                                                                                        // 3108
     * @param {Array|string} path The path of the property to get.                                                     // 3109
     * @returns {Function} Returns the new function.                                                                   // 3110
     */                                                                                                                // 3111
    function basePropertyDeep(path) {                                                                                  // 3112
      return function(object) {                                                                                        // 3113
        return baseGet(object, path);                                                                                  // 3114
      };                                                                                                               // 3115
    }                                                                                                                  // 3116
                                                                                                                       // 3117
    /**                                                                                                                // 3118
     * The base implementation of `_.pullAll`.                                                                         // 3119
     *                                                                                                                 // 3120
     * @private                                                                                                        // 3121
     * @param {Array} array The array to modify.                                                                       // 3122
     * @param {Array} values The values to remove.                                                                     // 3123
     * @returns {Array} Returns `array`.                                                                               // 3124
     */                                                                                                                // 3125
    function basePullAll(array, values) {                                                                              // 3126
      return basePullAllBy(array, values);                                                                             // 3127
    }                                                                                                                  // 3128
                                                                                                                       // 3129
    /**                                                                                                                // 3130
     * The base implementation of `_.pullAllBy` without support for iteratee                                           // 3131
     * shorthands.                                                                                                     // 3132
     *                                                                                                                 // 3133
     * @private                                                                                                        // 3134
     * @param {Array} array The array to modify.                                                                       // 3135
     * @param {Array} values The values to remove.                                                                     // 3136
     * @param {Function} [iteratee] The iteratee invoked per element.                                                  // 3137
     * @returns {Array} Returns `array`.                                                                               // 3138
     */                                                                                                                // 3139
    function basePullAllBy(array, values, iteratee) {                                                                  // 3140
      var index = -1,                                                                                                  // 3141
          length = values.length,                                                                                      // 3142
          seen = array;                                                                                                // 3143
                                                                                                                       // 3144
      if (iteratee) {                                                                                                  // 3145
        seen = arrayMap(array, function(value) { return iteratee(value); });                                           // 3146
      }                                                                                                                // 3147
      while (++index < length) {                                                                                       // 3148
        var fromIndex = 0,                                                                                             // 3149
            value = values[index],                                                                                     // 3150
            computed = iteratee ? iteratee(value) : value;                                                             // 3151
                                                                                                                       // 3152
        while ((fromIndex = baseIndexOf(seen, computed, fromIndex)) > -1) {                                            // 3153
          if (seen !== array) {                                                                                        // 3154
            splice.call(seen, fromIndex, 1);                                                                           // 3155
          }                                                                                                            // 3156
          splice.call(array, fromIndex, 1);                                                                            // 3157
        }                                                                                                              // 3158
      }                                                                                                                // 3159
      return array;                                                                                                    // 3160
    }                                                                                                                  // 3161
                                                                                                                       // 3162
    /**                                                                                                                // 3163
     * The base implementation of `_.pullAt` without support for individual                                            // 3164
     * indexes or capturing the removed elements.                                                                      // 3165
     *                                                                                                                 // 3166
     * @private                                                                                                        // 3167
     * @param {Array} array The array to modify.                                                                       // 3168
     * @param {number[]} indexes The indexes of elements to remove.                                                    // 3169
     * @returns {Array} Returns `array`.                                                                               // 3170
     */                                                                                                                // 3171
    function basePullAt(array, indexes) {                                                                              // 3172
      var length = array ? indexes.length : 0,                                                                         // 3173
          lastIndex = length - 1;                                                                                      // 3174
                                                                                                                       // 3175
      while (length--) {                                                                                               // 3176
        var index = indexes[length];                                                                                   // 3177
        if (lastIndex == length || index != previous) {                                                                // 3178
          var previous = index;                                                                                        // 3179
          if (isIndex(index)) {                                                                                        // 3180
            splice.call(array, index, 1);                                                                              // 3181
          }                                                                                                            // 3182
          else if (!isKey(index, array)) {                                                                             // 3183
            var path = baseToPath(index),                                                                              // 3184
                object = parent(array, path);                                                                          // 3185
                                                                                                                       // 3186
            if (object != null) {                                                                                      // 3187
              delete object[last(path)];                                                                               // 3188
            }                                                                                                          // 3189
          }                                                                                                            // 3190
          else {                                                                                                       // 3191
            delete array[index];                                                                                       // 3192
          }                                                                                                            // 3193
        }                                                                                                              // 3194
      }                                                                                                                // 3195
      return array;                                                                                                    // 3196
    }                                                                                                                  // 3197
                                                                                                                       // 3198
    /**                                                                                                                // 3199
     * The base implementation of `_.random` without support for returning                                             // 3200
     * floating-point numbers.                                                                                         // 3201
     *                                                                                                                 // 3202
     * @private                                                                                                        // 3203
     * @param {number} lower The lower bound.                                                                          // 3204
     * @param {number} upper The upper bound.                                                                          // 3205
     * @returns {number} Returns the random number.                                                                    // 3206
     */                                                                                                                // 3207
    function baseRandom(lower, upper) {                                                                                // 3208
      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));                                                // 3209
    }                                                                                                                  // 3210
                                                                                                                       // 3211
    /**                                                                                                                // 3212
     * The base implementation of `_.range` and `_.rangeRight` which doesn't                                           // 3213
     * coerce arguments to numbers.                                                                                    // 3214
     *                                                                                                                 // 3215
     * @private                                                                                                        // 3216
     * @param {number} start The start of the range.                                                                   // 3217
     * @param {number} end The end of the range.                                                                       // 3218
     * @param {number} step The value to increment or decrement by.                                                    // 3219
     * @param {boolean} [fromRight] Specify iterating from right to left.                                              // 3220
     * @returns {Array} Returns the new array of numbers.                                                              // 3221
     */                                                                                                                // 3222
    function baseRange(start, end, step, fromRight) {                                                                  // 3223
      var index = -1,                                                                                                  // 3224
          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),                                              // 3225
          result = Array(length);                                                                                      // 3226
                                                                                                                       // 3227
      while (length--) {                                                                                               // 3228
        result[fromRight ? length : ++index] = start;                                                                  // 3229
        start += step;                                                                                                 // 3230
      }                                                                                                                // 3231
      return result;                                                                                                   // 3232
    }                                                                                                                  // 3233
                                                                                                                       // 3234
    /**                                                                                                                // 3235
     * The base implementation of `_.set`.                                                                             // 3236
     *                                                                                                                 // 3237
     * @private                                                                                                        // 3238
     * @param {Object} object The object to query.                                                                     // 3239
     * @param {Array|string} path The path of the property to set.                                                     // 3240
     * @param {*} value The value to set.                                                                              // 3241
     * @param {Function} [customizer] The function to customize path creation.                                         // 3242
     * @returns {Object} Returns `object`.                                                                             // 3243
     */                                                                                                                // 3244
    function baseSet(object, path, value, customizer) {                                                                // 3245
      path = isKey(path, object) ? [path + ''] : baseToPath(path);                                                     // 3246
                                                                                                                       // 3247
      var index = -1,                                                                                                  // 3248
          length = path.length,                                                                                        // 3249
          lastIndex = length - 1,                                                                                      // 3250
          nested = object;                                                                                             // 3251
                                                                                                                       // 3252
      while (nested != null && ++index < length) {                                                                     // 3253
        var key = path[index];                                                                                         // 3254
        if (isObject(nested)) {                                                                                        // 3255
          var newValue = value;                                                                                        // 3256
          if (index != lastIndex) {                                                                                    // 3257
            var objValue = nested[key];                                                                                // 3258
            newValue = customizer ? customizer(objValue, key, nested) : undefined;                                     // 3259
            if (newValue === undefined) {                                                                              // 3260
              newValue = objValue == null ? (isIndex(path[index + 1]) ? [] : {}) : objValue;                           // 3261
            }                                                                                                          // 3262
          }                                                                                                            // 3263
          assignValue(nested, key, newValue);                                                                          // 3264
        }                                                                                                              // 3265
        nested = nested[key];                                                                                          // 3266
      }                                                                                                                // 3267
      return object;                                                                                                   // 3268
    }                                                                                                                  // 3269
                                                                                                                       // 3270
    /**                                                                                                                // 3271
     * The base implementation of `setData` without support for hot loop detection.                                    // 3272
     *                                                                                                                 // 3273
     * @private                                                                                                        // 3274
     * @param {Function} func The function to associate metadata with.                                                 // 3275
     * @param {*} data The metadata.                                                                                   // 3276
     * @returns {Function} Returns `func`.                                                                             // 3277
     */                                                                                                                // 3278
    var baseSetData = !metaMap ? identity : function(func, data) {                                                     // 3279
      metaMap.set(func, data);                                                                                         // 3280
      return func;                                                                                                     // 3281
    };                                                                                                                 // 3282
                                                                                                                       // 3283
    /**                                                                                                                // 3284
     * The base implementation of `_.slice` without an iteratee call guard.                                            // 3285
     *                                                                                                                 // 3286
     * @private                                                                                                        // 3287
     * @param {Array} array The array to slice.                                                                        // 3288
     * @param {number} [start=0] The start position.                                                                   // 3289
     * @param {number} [end=array.length] The end position.                                                            // 3290
     * @returns {Array} Returns the slice of `array`.                                                                  // 3291
     */                                                                                                                // 3292
    function baseSlice(array, start, end) {                                                                            // 3293
      var index = -1,                                                                                                  // 3294
          length = array.length;                                                                                       // 3295
                                                                                                                       // 3296
      if (start < 0) {                                                                                                 // 3297
        start = -start > length ? 0 : (length + start);                                                                // 3298
      }                                                                                                                // 3299
      end = end > length ? length : end;                                                                               // 3300
      if (end < 0) {                                                                                                   // 3301
        end += length;                                                                                                 // 3302
      }                                                                                                                // 3303
      length = start > end ? 0 : ((end - start) >>> 0);                                                                // 3304
      start >>>= 0;                                                                                                    // 3305
                                                                                                                       // 3306
      var result = Array(length);                                                                                      // 3307
      while (++index < length) {                                                                                       // 3308
        result[index] = array[index + start];                                                                          // 3309
      }                                                                                                                // 3310
      return result;                                                                                                   // 3311
    }                                                                                                                  // 3312
                                                                                                                       // 3313
    /**                                                                                                                // 3314
     * The base implementation of `_.some` without support for iteratee shorthands.                                    // 3315
     *                                                                                                                 // 3316
     * @private                                                                                                        // 3317
     * @param {Array|Object} collection The collection to iterate over.                                                // 3318
     * @param {Function} predicate The function invoked per iteration.                                                 // 3319
     * @returns {boolean} Returns `true` if any element passes the predicate check, else `false`.                      // 3320
     */                                                                                                                // 3321
    function baseSome(collection, predicate) {                                                                         // 3322
      var result;                                                                                                      // 3323
                                                                                                                       // 3324
      baseEach(collection, function(value, index, collection) {                                                        // 3325
        result = predicate(value, index, collection);                                                                  // 3326
        return !result;                                                                                                // 3327
      });                                                                                                              // 3328
      return !!result;                                                                                                 // 3329
    }                                                                                                                  // 3330
                                                                                                                       // 3331
    /**                                                                                                                // 3332
     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which                                        // 3333
     * performs a binary search of `array` to determine the index at which `value`                                     // 3334
     * should be inserted into `array` in order to maintain its sort order.                                            // 3335
     *                                                                                                                 // 3336
     * @private                                                                                                        // 3337
     * @param {Array} array The sorted array to inspect.                                                               // 3338
     * @param {*} value The value to evaluate.                                                                         // 3339
     * @param {boolean} [retHighest] Specify returning the highest qualified index.                                    // 3340
     * @returns {number} Returns the index at which `value` should be inserted                                         // 3341
     *  into `array`.                                                                                                  // 3342
     */                                                                                                                // 3343
    function baseSortedIndex(array, value, retHighest) {                                                               // 3344
      var low = 0,                                                                                                     // 3345
          high = array ? array.length : low;                                                                           // 3346
                                                                                                                       // 3347
      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {                              // 3348
        while (low < high) {                                                                                           // 3349
          var mid = (low + high) >>> 1,                                                                                // 3350
              computed = array[mid];                                                                                   // 3351
                                                                                                                       // 3352
          if ((retHighest ? (computed <= value) : (computed < value)) && computed !== null) {                          // 3353
            low = mid + 1;                                                                                             // 3354
          } else {                                                                                                     // 3355
            high = mid;                                                                                                // 3356
          }                                                                                                            // 3357
        }                                                                                                              // 3358
        return high;                                                                                                   // 3359
      }                                                                                                                // 3360
      return baseSortedIndexBy(array, value, identity, retHighest);                                                    // 3361
    }                                                                                                                  // 3362
                                                                                                                       // 3363
    /**                                                                                                                // 3364
     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`                                          // 3365
     * which invokes `iteratee` for `value` and each element of `array` to compute                                     // 3366
     * their sort ranking. The iteratee is invoked with one argument; (value).                                         // 3367
     *                                                                                                                 // 3368
     * @private                                                                                                        // 3369
     * @param {Array} array The sorted array to inspect.                                                               // 3370
     * @param {*} value The value to evaluate.                                                                         // 3371
     * @param {Function} iteratee The iteratee invoked per element.                                                    // 3372
     * @param {boolean} [retHighest] Specify returning the highest qualified index.                                    // 3373
     * @returns {number} Returns the index at which `value` should be inserted into `array`.                           // 3374
     */                                                                                                                // 3375
    function baseSortedIndexBy(array, value, iteratee, retHighest) {                                                   // 3376
      value = iteratee(value);                                                                                         // 3377
                                                                                                                       // 3378
      var low = 0,                                                                                                     // 3379
          high = array ? array.length : 0,                                                                             // 3380
          valIsNaN = value !== value,                                                                                  // 3381
          valIsNull = value === null,                                                                                  // 3382
          valIsUndef = value === undefined;                                                                            // 3383
                                                                                                                       // 3384
      while (low < high) {                                                                                             // 3385
        var mid = nativeFloor((low + high) / 2),                                                                       // 3386
            computed = iteratee(array[mid]),                                                                           // 3387
            isDef = computed !== undefined,                                                                            // 3388
            isReflexive = computed === computed;                                                                       // 3389
                                                                                                                       // 3390
        if (valIsNaN) {                                                                                                // 3391
          var setLow = isReflexive || retHighest;                                                                      // 3392
        } else if (valIsNull) {                                                                                        // 3393
          setLow = isReflexive && isDef && (retHighest || computed != null);                                           // 3394
        } else if (valIsUndef) {                                                                                       // 3395
          setLow = isReflexive && (retHighest || isDef);                                                               // 3396
        } else if (computed == null) {                                                                                 // 3397
          setLow = false;                                                                                              // 3398
        } else {                                                                                                       // 3399
          setLow = retHighest ? (computed <= value) : (computed < value);                                              // 3400
        }                                                                                                              // 3401
        if (setLow) {                                                                                                  // 3402
          low = mid + 1;                                                                                               // 3403
        } else {                                                                                                       // 3404
          high = mid;                                                                                                  // 3405
        }                                                                                                              // 3406
      }                                                                                                                // 3407
      return nativeMin(high, MAX_ARRAY_INDEX);                                                                         // 3408
    }                                                                                                                  // 3409
                                                                                                                       // 3410
    /**                                                                                                                // 3411
     * The base implementation of `_.sortedUniq`.                                                                      // 3412
     *                                                                                                                 // 3413
     * @private                                                                                                        // 3414
     * @param {Array} array The array to inspect.                                                                      // 3415
     * @returns {Array} Returns the new duplicate free array.                                                          // 3416
     */                                                                                                                // 3417
    function baseSortedUniq(array) {                                                                                   // 3418
      return baseSortedUniqBy(array);                                                                                  // 3419
    }                                                                                                                  // 3420
                                                                                                                       // 3421
    /**                                                                                                                // 3422
     * The base implementation of `_.sortedUniqBy` without support for iteratee                                        // 3423
     * shorthands.                                                                                                     // 3424
     *                                                                                                                 // 3425
     * @private                                                                                                        // 3426
     * @param {Array} array The array to inspect.                                                                      // 3427
     * @param {Function} [iteratee] The iteratee invoked per element.                                                  // 3428
     * @returns {Array} Returns the new duplicate free array.                                                          // 3429
     */                                                                                                                // 3430
    function baseSortedUniqBy(array, iteratee) {                                                                       // 3431
      var index = 0,                                                                                                   // 3432
          length = array.length,                                                                                       // 3433
          value = array[0],                                                                                            // 3434
          computed = iteratee ? iteratee(value) : value,                                                               // 3435
          seen = computed,                                                                                             // 3436
          resIndex = 0,                                                                                                // 3437
          result = [value];                                                                                            // 3438
                                                                                                                       // 3439
      while (++index < length) {                                                                                       // 3440
        value = array[index],                                                                                          // 3441
        computed = iteratee ? iteratee(value) : value;                                                                 // 3442
                                                                                                                       // 3443
        if (!eq(computed, seen)) {                                                                                     // 3444
          seen = computed;                                                                                             // 3445
          result[++resIndex] = value;                                                                                  // 3446
        }                                                                                                              // 3447
      }                                                                                                                // 3448
      return result;                                                                                                   // 3449
    }                                                                                                                  // 3450
                                                                                                                       // 3451
    /**                                                                                                                // 3452
     * The base implementation of `_.toPath` which only converts `value` to a                                          // 3453
     * path if it's not one.                                                                                           // 3454
     *                                                                                                                 // 3455
     * @private                                                                                                        // 3456
     * @param {*} value The value to process.                                                                          // 3457
     * @returns {Array} Returns the property path array.                                                               // 3458
     */                                                                                                                // 3459
    function baseToPath(value) {                                                                                       // 3460
      return isArray(value) ? value : stringToPath(value);                                                             // 3461
    }                                                                                                                  // 3462
                                                                                                                       // 3463
    /**                                                                                                                // 3464
     * The base implementation of `_.uniqBy` without support for iteratee shorthands.                                  // 3465
     *                                                                                                                 // 3466
     * @private                                                                                                        // 3467
     * @param {Array} array The array to inspect.                                                                      // 3468
     * @param {Function} [iteratee] The iteratee invoked per element.                                                  // 3469
     * @param {Function} [comparator] The comparator invoked per element.                                              // 3470
     * @returns {Array} Returns the new duplicate free array.                                                          // 3471
     */                                                                                                                // 3472
    function baseUniq(array, iteratee, comparator) {                                                                   // 3473
      var index = -1,                                                                                                  // 3474
          includes = arrayIncludes,                                                                                    // 3475
          length = array.length,                                                                                       // 3476
          isCommon = true,                                                                                             // 3477
          result = [],                                                                                                 // 3478
          seen = result;                                                                                               // 3479
                                                                                                                       // 3480
      if (comparator) {                                                                                                // 3481
        isCommon = false;                                                                                              // 3482
        includes = arrayIncludesWith;                                                                                  // 3483
      }                                                                                                                // 3484
      else if (length >= LARGE_ARRAY_SIZE) {                                                                           // 3485
        var set = iteratee ? null : createSet(array);                                                                  // 3486
        if (set) {                                                                                                     // 3487
          return setToArray(set);                                                                                      // 3488
        }                                                                                                              // 3489
        isCommon = false;                                                                                              // 3490
        includes = cacheHas;                                                                                           // 3491
        seen = new SetCache;                                                                                           // 3492
      }                                                                                                                // 3493
      else {                                                                                                           // 3494
        seen = iteratee ? [] : result;                                                                                 // 3495
      }                                                                                                                // 3496
      outer:                                                                                                           // 3497
      while (++index < length) {                                                                                       // 3498
        var value = array[index],                                                                                      // 3499
            computed = iteratee ? iteratee(value) : value;                                                             // 3500
                                                                                                                       // 3501
        if (isCommon && computed === computed) {                                                                       // 3502
          var seenIndex = seen.length;                                                                                 // 3503
          while (seenIndex--) {                                                                                        // 3504
            if (seen[seenIndex] === computed) {                                                                        // 3505
              continue outer;                                                                                          // 3506
            }                                                                                                          // 3507
          }                                                                                                            // 3508
          if (iteratee) {                                                                                              // 3509
            seen.push(computed);                                                                                       // 3510
          }                                                                                                            // 3511
          result.push(value);                                                                                          // 3512
        }                                                                                                              // 3513
        else if (!includes(seen, computed, comparator)) {                                                              // 3514
          if (seen !== result) {                                                                                       // 3515
            seen.push(computed);                                                                                       // 3516
          }                                                                                                            // 3517
          result.push(value);                                                                                          // 3518
        }                                                                                                              // 3519
      }                                                                                                                // 3520
      return result;                                                                                                   // 3521
    }                                                                                                                  // 3522
                                                                                                                       // 3523
    /**                                                                                                                // 3524
     * The base implementation of `_.unset`.                                                                           // 3525
     *                                                                                                                 // 3526
     * @private                                                                                                        // 3527
     * @param {Object} object The object to modify.                                                                    // 3528
     * @param {Array|string} path The path of the property to unset.                                                   // 3529
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.                                     // 3530
     */                                                                                                                // 3531
    function baseUnset(object, path) {                                                                                 // 3532
      path = isKey(path, object) ? [path + ''] : baseToPath(path);                                                     // 3533
      object = parent(object, path);                                                                                   // 3534
      var key = last(path);                                                                                            // 3535
      return (object != null && has(object, key)) ? delete object[key] : true;                                         // 3536
    }                                                                                                                  // 3537
                                                                                                                       // 3538
    /**                                                                                                                // 3539
     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`                                         // 3540
     * without support for iteratee shorthands.                                                                        // 3541
     *                                                                                                                 // 3542
     * @private                                                                                                        // 3543
     * @param {Array} array The array to query.                                                                        // 3544
     * @param {Function} predicate The function invoked per iteration.                                                 // 3545
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.                                     // 3546
     * @param {boolean} [fromRight] Specify iterating from right to left.                                              // 3547
     * @returns {Array} Returns the slice of `array`.                                                                  // 3548
     */                                                                                                                // 3549
    function baseWhile(array, predicate, isDrop, fromRight) {                                                          // 3550
      var length = array.length,                                                                                       // 3551
          index = fromRight ? length : -1;                                                                             // 3552
                                                                                                                       // 3553
      while ((fromRight ? index-- : ++index < length) &&                                                               // 3554
        predicate(array[index], index, array)) {}                                                                      // 3555
                                                                                                                       // 3556
      return isDrop                                                                                                    // 3557
        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))                                  // 3558
        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));                                 // 3559
    }                                                                                                                  // 3560
                                                                                                                       // 3561
    /**                                                                                                                // 3562
     * The base implementation of `wrapperValue` which returns the result of                                           // 3563
     * performing a sequence of actions on the unwrapped `value`, where each                                           // 3564
     * successive action is supplied the return value of the previous.                                                 // 3565
     *                                                                                                                 // 3566
     * @private                                                                                                        // 3567
     * @param {*} value The unwrapped value.                                                                           // 3568
     * @param {Array} actions Actions to perform to resolve the unwrapped value.                                       // 3569
     * @returns {*} Returns the resolved value.                                                                        // 3570
     */                                                                                                                // 3571
    function baseWrapperValue(value, actions) {                                                                        // 3572
      var result = value;                                                                                              // 3573
      if (result instanceof LazyWrapper) {                                                                             // 3574
        result = result.value();                                                                                       // 3575
      }                                                                                                                // 3576
      return arrayReduce(actions, function(result, action) {                                                           // 3577
        return action.func.apply(action.thisArg, arrayPush([result], action.args));                                    // 3578
      }, result);                                                                                                      // 3579
    }                                                                                                                  // 3580
                                                                                                                       // 3581
    /**                                                                                                                // 3582
     * The base implementation of methods like `_.xor`, without support for                                            // 3583
     * iteratee shorthands, that accepts an array of arrays to inspect.                                                // 3584
     *                                                                                                                 // 3585
     * @private                                                                                                        // 3586
     * @param {Array} arrays The arrays to inspect.                                                                    // 3587
     * @param {Function} [iteratee] The iteratee invoked per element.                                                  // 3588
     * @param {Function} [comparator] The comparator invoked per element.                                              // 3589
     * @returns {Array} Returns the new array of values.                                                               // 3590
     */                                                                                                                // 3591
    function baseXor(arrays, iteratee, comparator) {                                                                   // 3592
      var index = -1,                                                                                                  // 3593
          length = arrays.length;                                                                                      // 3594
                                                                                                                       // 3595
      while (++index < length) {                                                                                       // 3596
        var result = result                                                                                            // 3597
          ? arrayPush(                                                                                                 // 3598
              baseDifference(result, arrays[index], iteratee, comparator),                                             // 3599
              baseDifference(arrays[index], result, iteratee, comparator)                                              // 3600
            )                                                                                                          // 3601
          : arrays[index];                                                                                             // 3602
      }                                                                                                                // 3603
      return (result && result.length) ? baseUniq(result, iteratee, comparator) : [];                                  // 3604
    }                                                                                                                  // 3605
                                                                                                                       // 3606
    /**                                                                                                                // 3607
     * Creates a clone of `buffer`.                                                                                    // 3608
     *                                                                                                                 // 3609
     * @private                                                                                                        // 3610
     * @param {ArrayBuffer} buffer The array buffer to clone.                                                          // 3611
     * @returns {ArrayBuffer} Returns the cloned array buffer.                                                         // 3612
     */                                                                                                                // 3613
    function cloneBuffer(buffer) {                                                                                     // 3614
      var Ctor = buffer.constructor,                                                                                   // 3615
          result = new Ctor(buffer.byteLength),                                                                        // 3616
          view = new Uint8Array(result);                                                                               // 3617
                                                                                                                       // 3618
      view.set(new Uint8Array(buffer));                                                                                // 3619
      return result;                                                                                                   // 3620
    }                                                                                                                  // 3621
                                                                                                                       // 3622
    /**                                                                                                                // 3623
     * Creates a clone of `map`.                                                                                       // 3624
     *                                                                                                                 // 3625
     * @private                                                                                                        // 3626
     * @param {Object} map The map to clone.                                                                           // 3627
     * @returns {Object} Returns the cloned map.                                                                       // 3628
     */                                                                                                                // 3629
    function cloneMap(map) {                                                                                           // 3630
      var Ctor = map.constructor;                                                                                      // 3631
      return arrayReduce(mapToArray(map), addMapEntry, new Ctor);                                                      // 3632
    }                                                                                                                  // 3633
                                                                                                                       // 3634
    /**                                                                                                                // 3635
     * Creates a clone of `regexp`.                                                                                    // 3636
     *                                                                                                                 // 3637
     * @private                                                                                                        // 3638
     * @param {Object} regexp The regexp to clone.                                                                     // 3639
     * @returns {Object} Returns the cloned regexp.                                                                    // 3640
     */                                                                                                                // 3641
    function cloneRegExp(regexp) {                                                                                     // 3642
      var Ctor = regexp.constructor,                                                                                   // 3643
          result = new Ctor(regexp.source, reFlags.exec(regexp));                                                      // 3644
                                                                                                                       // 3645
      result.lastIndex = regexp.lastIndex;                                                                             // 3646
      return result;                                                                                                   // 3647
    }                                                                                                                  // 3648
                                                                                                                       // 3649
    /**                                                                                                                // 3650
     * Creates a clone of `set`.                                                                                       // 3651
     *                                                                                                                 // 3652
     * @private                                                                                                        // 3653
     * @param {Object} set The set to clone.                                                                           // 3654
     * @returns {Object} Returns the cloned set.                                                                       // 3655
     */                                                                                                                // 3656
    function cloneSet(set) {                                                                                           // 3657
      var Ctor = set.constructor;                                                                                      // 3658
      return arrayReduce(setToArray(set), addSetEntry, new Ctor);                                                      // 3659
    }                                                                                                                  // 3660
                                                                                                                       // 3661
    /**                                                                                                                // 3662
     * Creates a clone of the `symbol` object.                                                                         // 3663
     *                                                                                                                 // 3664
     * @private                                                                                                        // 3665
     * @param {Object} symbol The symbol object to clone.                                                              // 3666
     * @returns {Object} Returns the cloned symbol object.                                                             // 3667
     */                                                                                                                // 3668
    function cloneSymbol(symbol) {                                                                                     // 3669
      return _Symbol ? Object(symbolValueOf.call(symbol)) : {};                                                        // 3670
    }                                                                                                                  // 3671
                                                                                                                       // 3672
    /**                                                                                                                // 3673
     * Creates a clone of `typedArray`.                                                                                // 3674
     *                                                                                                                 // 3675
     * @private                                                                                                        // 3676
     * @param {Object} typedArray The typed array to clone.                                                            // 3677
     * @param {boolean} [isDeep] Specify a deep clone.                                                                 // 3678
     * @returns {Object} Returns the cloned typed array.                                                               // 3679
     */                                                                                                                // 3680
    function cloneTypedArray(typedArray, isDeep) {                                                                     // 3681
      var buffer = typedArray.buffer,                                                                                  // 3682
          Ctor = typedArray.constructor;                                                                               // 3683
                                                                                                                       // 3684
      return new Ctor(isDeep ? cloneBuffer(buffer) : buffer, typedArray.byteOffset, typedArray.length);                // 3685
    }                                                                                                                  // 3686
                                                                                                                       // 3687
    /**                                                                                                                // 3688
     * Creates an array that is the composition of partially applied arguments,                                        // 3689
     * placeholders, and provided arguments into a single array of arguments.                                          // 3690
     *                                                                                                                 // 3691
     * @private                                                                                                        // 3692
     * @param {Array|Object} args The provided arguments.                                                              // 3693
     * @param {Array} partials The arguments to prepend to those provided.                                             // 3694
     * @param {Array} holders The `partials` placeholder indexes.                                                      // 3695
     * @returns {Array} Returns the new array of composed arguments.                                                   // 3696
     */                                                                                                                // 3697
    function composeArgs(args, partials, holders) {                                                                    // 3698
      var holdersLength = holders.length,                                                                              // 3699
          argsIndex = -1,                                                                                              // 3700
          argsLength = nativeMax(args.length - holdersLength, 0),                                                      // 3701
          leftIndex = -1,                                                                                              // 3702
          leftLength = partials.length,                                                                                // 3703
          result = Array(leftLength + argsLength);                                                                     // 3704
                                                                                                                       // 3705
      while (++leftIndex < leftLength) {                                                                               // 3706
        result[leftIndex] = partials[leftIndex];                                                                       // 3707
      }                                                                                                                // 3708
      while (++argsIndex < holdersLength) {                                                                            // 3709
        result[holders[argsIndex]] = args[argsIndex];                                                                  // 3710
      }                                                                                                                // 3711
      while (argsLength--) {                                                                                           // 3712
        result[leftIndex++] = args[argsIndex++];                                                                       // 3713
      }                                                                                                                // 3714
      return result;                                                                                                   // 3715
    }                                                                                                                  // 3716
                                                                                                                       // 3717
    /**                                                                                                                // 3718
     * This function is like `composeArgs` except that the arguments composition                                       // 3719
     * is tailored for `_.partialRight`.                                                                               // 3720
     *                                                                                                                 // 3721
     * @private                                                                                                        // 3722
     * @param {Array|Object} args The provided arguments.                                                              // 3723
     * @param {Array} partials The arguments to append to those provided.                                              // 3724
     * @param {Array} holders The `partials` placeholder indexes.                                                      // 3725
     * @returns {Array} Returns the new array of composed arguments.                                                   // 3726
     */                                                                                                                // 3727
    function composeArgsRight(args, partials, holders) {                                                               // 3728
      var holdersIndex = -1,                                                                                           // 3729
          holdersLength = holders.length,                                                                              // 3730
          argsIndex = -1,                                                                                              // 3731
          argsLength = nativeMax(args.length - holdersLength, 0),                                                      // 3732
          rightIndex = -1,                                                                                             // 3733
          rightLength = partials.length,                                                                               // 3734
          result = Array(argsLength + rightLength);                                                                    // 3735
                                                                                                                       // 3736
      while (++argsIndex < argsLength) {                                                                               // 3737
        result[argsIndex] = args[argsIndex];                                                                           // 3738
      }                                                                                                                // 3739
      var offset = argsIndex;                                                                                          // 3740
      while (++rightIndex < rightLength) {                                                                             // 3741
        result[offset + rightIndex] = partials[rightIndex];                                                            // 3742
      }                                                                                                                // 3743
      while (++holdersIndex < holdersLength) {                                                                         // 3744
        result[offset + holders[holdersIndex]] = args[argsIndex++];                                                    // 3745
      }                                                                                                                // 3746
      return result;                                                                                                   // 3747
    }                                                                                                                  // 3748
                                                                                                                       // 3749
    /**                                                                                                                // 3750
     * Copies the values of `source` to `array`.                                                                       // 3751
     *                                                                                                                 // 3752
     * @private                                                                                                        // 3753
     * @param {Array} source The array to copy values from.                                                            // 3754
     * @param {Array} [array=[]] The array to copy values to.                                                          // 3755
     * @returns {Array} Returns `array`.                                                                               // 3756
     */                                                                                                                // 3757
    function copyArray(source, array) {                                                                                // 3758
      var index = -1,                                                                                                  // 3759
          length = source.length;                                                                                      // 3760
                                                                                                                       // 3761
      array || (array = Array(length));                                                                                // 3762
      while (++index < length) {                                                                                       // 3763
        array[index] = source[index];                                                                                  // 3764
      }                                                                                                                // 3765
      return array;                                                                                                    // 3766
    }                                                                                                                  // 3767
                                                                                                                       // 3768
    /**                                                                                                                // 3769
     * Copies properties of `source` to `object`.                                                                      // 3770
     *                                                                                                                 // 3771
     * @private                                                                                                        // 3772
     * @param {Object} source The object to copy properties from.                                                      // 3773
     * @param {Array} props The property names to copy.                                                                // 3774
     * @param {Object} [object={}] The object to copy properties to.                                                   // 3775
     * @returns {Object} Returns `object`.                                                                             // 3776
     */                                                                                                                // 3777
    function copyObject(source, props, object) {                                                                       // 3778
      return copyObjectWith(source, props, object);                                                                    // 3779
    }                                                                                                                  // 3780
                                                                                                                       // 3781
    /**                                                                                                                // 3782
     * This function is like `copyObject` except that it accepts a function to                                         // 3783
     * customize copied values.                                                                                        // 3784
     *                                                                                                                 // 3785
     * @private                                                                                                        // 3786
     * @param {Object} source The object to copy properties from.                                                      // 3787
     * @param {Array} props The property names to copy.                                                                // 3788
     * @param {Object} [object={}] The object to copy properties to.                                                   // 3789
     * @param {Function} [customizer] The function to customize copied values.                                         // 3790
     * @returns {Object} Returns `object`.                                                                             // 3791
     */                                                                                                                // 3792
    function copyObjectWith(source, props, object, customizer) {                                                       // 3793
      object || (object = {});                                                                                         // 3794
                                                                                                                       // 3795
      var index = -1,                                                                                                  // 3796
          length = props.length;                                                                                       // 3797
                                                                                                                       // 3798
      while (++index < length) {                                                                                       // 3799
        var key = props[index],                                                                                        // 3800
            newValue = customizer ? customizer(object[key], source[key], key, object, source) : source[key];           // 3801
                                                                                                                       // 3802
        assignValue(object, key, newValue);                                                                            // 3803
      }                                                                                                                // 3804
      return object;                                                                                                   // 3805
    }                                                                                                                  // 3806
                                                                                                                       // 3807
    /**                                                                                                                // 3808
     * Copies own symbol properties of `source` to `object`.                                                           // 3809
     *                                                                                                                 // 3810
     * @private                                                                                                        // 3811
     * @param {Object} source The object to copy symbols from.                                                         // 3812
     * @param {Object} [object={}] The object to copy symbols to.                                                      // 3813
     * @returns {Object} Returns `object`.                                                                             // 3814
     */                                                                                                                // 3815
    function copySymbols(source, object) {                                                                             // 3816
      return copyObject(source, getSymbols(source), object);                                                           // 3817
    }                                                                                                                  // 3818
                                                                                                                       // 3819
    /**                                                                                                                // 3820
     * Creates a function like `_.groupBy`.                                                                            // 3821
     *                                                                                                                 // 3822
     * @private                                                                                                        // 3823
     * @param {Function} setter The function to set keys and values of the accumulator object.                         // 3824
     * @param {Function} [initializer] The function to initialize the accumulator object.                              // 3825
     * @returns {Function} Returns the new aggregator function.                                                        // 3826
     */                                                                                                                // 3827
    function createAggregator(setter, initializer) {                                                                   // 3828
      return function(collection, iteratee) {                                                                          // 3829
        var result = initializer ? initializer() : {};                                                                 // 3830
        iteratee = getIteratee(iteratee);                                                                              // 3831
                                                                                                                       // 3832
        if (isArray(collection)) {                                                                                     // 3833
          var index = -1,                                                                                              // 3834
              length = collection.length;                                                                              // 3835
                                                                                                                       // 3836
          while (++index < length) {                                                                                   // 3837
            var value = collection[index];                                                                             // 3838
            setter(result, value, iteratee(value), collection);                                                        // 3839
          }                                                                                                            // 3840
        } else {                                                                                                       // 3841
          baseEach(collection, function(value, key, collection) {                                                      // 3842
            setter(result, value, iteratee(value), collection);                                                        // 3843
          });                                                                                                          // 3844
        }                                                                                                              // 3845
        return result;                                                                                                 // 3846
      };                                                                                                               // 3847
    }                                                                                                                  // 3848
                                                                                                                       // 3849
    /**                                                                                                                // 3850
     * Creates a function like `_.assign`.                                                                             // 3851
     *                                                                                                                 // 3852
     * @private                                                                                                        // 3853
     * @param {Function} assigner The function to assign values.                                                       // 3854
     * @returns {Function} Returns the new assigner function.                                                          // 3855
     */                                                                                                                // 3856
    function createAssigner(assigner) {                                                                                // 3857
      return rest(function(object, sources) {                                                                          // 3858
        var index = -1,                                                                                                // 3859
            length = sources.length,                                                                                   // 3860
            customizer = length > 1 ? sources[length - 1] : undefined,                                                 // 3861
            guard = length > 2 ? sources[2] : undefined;                                                               // 3862
                                                                                                                       // 3863
        customizer = typeof customizer == 'function' ? (length--, customizer) : undefined;                             // 3864
        if (guard && isIterateeCall(sources[0], sources[1], guard)) {                                                  // 3865
          customizer = length < 3 ? undefined : customizer;                                                            // 3866
          length = 1;                                                                                                  // 3867
        }                                                                                                              // 3868
        object = Object(object);                                                                                       // 3869
        while (++index < length) {                                                                                     // 3870
          var source = sources[index];                                                                                 // 3871
          if (source) {                                                                                                // 3872
            assigner(object, source, customizer);                                                                      // 3873
          }                                                                                                            // 3874
        }                                                                                                              // 3875
        return object;                                                                                                 // 3876
      });                                                                                                              // 3877
    }                                                                                                                  // 3878
                                                                                                                       // 3879
    /**                                                                                                                // 3880
     * Creates a `baseEach` or `baseEachRight` function.                                                               // 3881
     *                                                                                                                 // 3882
     * @private                                                                                                        // 3883
     * @param {Function} eachFunc The function to iterate over a collection.                                           // 3884
     * @param {boolean} [fromRight] Specify iterating from right to left.                                              // 3885
     * @returns {Function} Returns the new base function.                                                              // 3886
     */                                                                                                                // 3887
    function createBaseEach(eachFunc, fromRight) {                                                                     // 3888
      return function(collection, iteratee) {                                                                          // 3889
        if (collection == null) {                                                                                      // 3890
          return collection;                                                                                           // 3891
        }                                                                                                              // 3892
        if (!isArrayLike(collection)) {                                                                                // 3893
          return eachFunc(collection, iteratee);                                                                       // 3894
        }                                                                                                              // 3895
        var length = collection.length,                                                                                // 3896
            index = fromRight ? length : -1,                                                                           // 3897
            iterable = Object(collection);                                                                             // 3898
                                                                                                                       // 3899
        while ((fromRight ? index-- : ++index < length)) {                                                             // 3900
          if (iteratee(iterable[index], index, iterable) === false) {                                                  // 3901
            break;                                                                                                     // 3902
          }                                                                                                            // 3903
        }                                                                                                              // 3904
        return collection;                                                                                             // 3905
      };                                                                                                               // 3906
    }                                                                                                                  // 3907
                                                                                                                       // 3908
    /**                                                                                                                // 3909
     * Creates a base function for methods like `_.forIn`.                                                             // 3910
     *                                                                                                                 // 3911
     * @private                                                                                                        // 3912
     * @param {boolean} [fromRight] Specify iterating from right to left.                                              // 3913
     * @returns {Function} Returns the new base function.                                                              // 3914
     */                                                                                                                // 3915
    function createBaseFor(fromRight) {                                                                                // 3916
      return function(object, iteratee, keysFunc) {                                                                    // 3917
        var index = -1,                                                                                                // 3918
            iterable = Object(object),                                                                                 // 3919
            props = keysFunc(object),                                                                                  // 3920
            length = props.length;                                                                                     // 3921
                                                                                                                       // 3922
        while (length--) {                                                                                             // 3923
          var key = props[fromRight ? length : ++index];                                                               // 3924
          if (iteratee(iterable[key], key, iterable) === false) {                                                      // 3925
            break;                                                                                                     // 3926
          }                                                                                                            // 3927
        }                                                                                                              // 3928
        return object;                                                                                                 // 3929
      };                                                                                                               // 3930
    }                                                                                                                  // 3931
                                                                                                                       // 3932
    /**                                                                                                                // 3933
     * Creates a function that wraps `func` to invoke it with the optional `this`                                      // 3934
     * binding of `thisArg`.                                                                                           // 3935
     *                                                                                                                 // 3936
     * @private                                                                                                        // 3937
     * @param {Function} func The function to wrap.                                                                    // 3938
     * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper` for more details.                     // 3939
     * @param {*} [thisArg] The `this` binding of `func`.                                                              // 3940
     * @returns {Function} Returns the new wrapped function.                                                           // 3941
     */                                                                                                                // 3942
    function createBaseWrapper(func, bitmask, thisArg) {                                                               // 3943
      var isBind = bitmask & BIND_FLAG,                                                                                // 3944
          Ctor = createCtorWrapper(func);                                                                              // 3945
                                                                                                                       // 3946
      function wrapper() {                                                                                             // 3947
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;                                     // 3948
        return fn.apply(isBind ? thisArg : this, arguments);                                                           // 3949
      }                                                                                                                // 3950
      return wrapper;                                                                                                  // 3951
    }                                                                                                                  // 3952
                                                                                                                       // 3953
    /**                                                                                                                // 3954
     * Creates a function like `_.lowerFirst`.                                                                         // 3955
     *                                                                                                                 // 3956
     * @private                                                                                                        // 3957
     * @param {string} methodName The name of the `String` case method to use.                                         // 3958
     * @returns {Function} Returns the new function.                                                                   // 3959
     */                                                                                                                // 3960
    function createCaseFirst(methodName) {                                                                             // 3961
      return function(string) {                                                                                        // 3962
        string = toString(string);                                                                                     // 3963
                                                                                                                       // 3964
        var strSymbols = reHasComplexSymbol.test(string) ? stringToArray(string) : undefined,                          // 3965
            chr = strSymbols ? strSymbols[0] : string.charAt(0),                                                       // 3966
            trailing = strSymbols ? strSymbols.slice(1).join('') : string.slice(1);                                    // 3967
                                                                                                                       // 3968
        return chr[methodName]() + trailing;                                                                           // 3969
      };                                                                                                               // 3970
    }                                                                                                                  // 3971
                                                                                                                       // 3972
    /**                                                                                                                // 3973
     * Creates a function like `_.camelCase`.                                                                          // 3974
     *                                                                                                                 // 3975
     * @private                                                                                                        // 3976
     * @param {Function} callback The function to combine each word.                                                   // 3977
     * @returns {Function} Returns the new compounder function.                                                        // 3978
     */                                                                                                                // 3979
    function createCompounder(callback) {                                                                              // 3980
      return function(string) {                                                                                        // 3981
        return arrayReduce(words(deburr(string)), callback, '');                                                       // 3982
      };                                                                                                               // 3983
    }                                                                                                                  // 3984
                                                                                                                       // 3985
    /**                                                                                                                // 3986
     * Creates a function that produces an instance of `Ctor` regardless of                                            // 3987
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.                                   // 3988
     *                                                                                                                 // 3989
     * @private                                                                                                        // 3990
     * @param {Function} Ctor The constructor to wrap.                                                                 // 3991
     * @returns {Function} Returns the new wrapped function.                                                           // 3992
     */                                                                                                                // 3993
    function createCtorWrapper(Ctor) {                                                                                 // 3994
      return function() {                                                                                              // 3995
        // Use a `switch` statement to work with class constructors.                                                   // 3996
        // See http://ecma-international.org/ecma-262/6.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
        // for more details.                                                                                           // 3998
        var args = arguments;                                                                                          // 3999
        switch (args.length) {                                                                                         // 4000
          case 0: return new Ctor;                                                                                     // 4001
          case 1: return new Ctor(args[0]);                                                                            // 4002
          case 2: return new Ctor(args[0], args[1]);                                                                   // 4003
          case 3: return new Ctor(args[0], args[1], args[2]);                                                          // 4004
          case 4: return new Ctor(args[0], args[1], args[2], args[3]);                                                 // 4005
          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);                                        // 4006
          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);                               // 4007
          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);                      // 4008
        }                                                                                                              // 4009
        var thisBinding = baseCreate(Ctor.prototype),                                                                  // 4010
            result = Ctor.apply(thisBinding, args);                                                                    // 4011
                                                                                                                       // 4012
        // Mimic the constructor's `return` behavior.                                                                  // 4013
        // See https://es5.github.io/#x13.2.2 for more details.                                                        // 4014
        return isObject(result) ? result : thisBinding;                                                                // 4015
      };                                                                                                               // 4016
    }                                                                                                                  // 4017
                                                                                                                       // 4018
    /**                                                                                                                // 4019
     * Creates a function that wraps `func` to enable currying.                                                        // 4020
     *                                                                                                                 // 4021
     * @private                                                                                                        // 4022
     * @param {Function} func The function to wrap.                                                                    // 4023
     * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper` for more details.                     // 4024
     * @param {number} arity The arity of `func`.                                                                      // 4025
     * @returns {Function} Returns the new wrapped function.                                                           // 4026
     */                                                                                                                // 4027
    function createCurryWrapper(func, bitmask, arity) {                                                                // 4028
      var Ctor = createCtorWrapper(func);                                                                              // 4029
                                                                                                                       // 4030
      function wrapper() {                                                                                             // 4031
        var length = arguments.length,                                                                                 // 4032
            index = length,                                                                                            // 4033
            args = Array(length),                                                                                      // 4034
            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func,                                     // 4035
            placeholder = wrapper.placeholder;                                                                         // 4036
                                                                                                                       // 4037
        while (index--) {                                                                                              // 4038
          args[index] = arguments[index];                                                                              // 4039
        }                                                                                                              // 4040
        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)                      // 4041
          ? []                                                                                                         // 4042
          : replaceHolders(args, placeholder);                                                                         // 4043
                                                                                                                       // 4044
        length -= holders.length;                                                                                      // 4045
        return length < arity                                                                                          // 4046
          ? createRecurryWrapper(func, bitmask, createHybridWrapper, placeholder, undefined, args, holders, undefined, undefined, arity - length)
          : apply(fn, this, args);                                                                                     // 4048
      }                                                                                                                // 4049
      return wrapper;                                                                                                  // 4050
    }                                                                                                                  // 4051
                                                                                                                       // 4052
    /**                                                                                                                // 4053
     * Creates a `_.flow` or `_.flowRight` function.                                                                   // 4054
     *                                                                                                                 // 4055
     * @private                                                                                                        // 4056
     * @param {boolean} [fromRight] Specify iterating from right to left.                                              // 4057
     * @returns {Function} Returns the new flow function.                                                              // 4058
     */                                                                                                                // 4059
    function createFlow(fromRight) {                                                                                   // 4060
      return rest(function(funcs) {                                                                                    // 4061
        funcs = baseFlatten(funcs);                                                                                    // 4062
                                                                                                                       // 4063
        var length = funcs.length,                                                                                     // 4064
            index = length,                                                                                            // 4065
            prereq = LodashWrapper.prototype.thru;                                                                     // 4066
                                                                                                                       // 4067
        if (fromRight) {                                                                                               // 4068
          funcs.reverse();                                                                                             // 4069
        }                                                                                                              // 4070
        while (index--) {                                                                                              // 4071
          var func = funcs[index];                                                                                     // 4072
          if (typeof func != 'function') {                                                                             // 4073
            throw new TypeError(FUNC_ERROR_TEXT);                                                                      // 4074
          }                                                                                                            // 4075
          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {                                                  // 4076
            var wrapper = new LodashWrapper([], true);                                                                 // 4077
          }                                                                                                            // 4078
        }                                                                                                              // 4079
        index = wrapper ? index : length;                                                                              // 4080
        while (++index < length) {                                                                                     // 4081
          func = funcs[index];                                                                                         // 4082
                                                                                                                       // 4083
          var funcName = getFuncName(func),                                                                            // 4084
              data = funcName == 'wrapper' ? getData(func) : undefined;                                                // 4085
                                                                                                                       // 4086
          if (data && isLaziable(data[0]) && data[1] == (ARY_FLAG | CURRY_FLAG | PARTIAL_FLAG | REARG_FLAG) && !data[4].length && data[9] == 1) {
            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);                                           // 4088
          } else {                                                                                                     // 4089
            wrapper = (func.length == 1 && isLaziable(func)) ? wrapper[funcName]() : wrapper.thru(func);               // 4090
          }                                                                                                            // 4091
        }                                                                                                              // 4092
        return function() {                                                                                            // 4093
          var args = arguments,                                                                                        // 4094
              value = args[0];                                                                                         // 4095
                                                                                                                       // 4096
          if (wrapper && args.length == 1 && isArray(value) && value.length >= LARGE_ARRAY_SIZE) {                     // 4097
            return wrapper.plant(value).value();                                                                       // 4098
          }                                                                                                            // 4099
          var index = 0,                                                                                               // 4100
              result = length ? funcs[index].apply(this, args) : value;                                                // 4101
                                                                                                                       // 4102
          while (++index < length) {                                                                                   // 4103
            result = funcs[index].call(this, result);                                                                  // 4104
          }                                                                                                            // 4105
          return result;                                                                                               // 4106
        };                                                                                                             // 4107
      });                                                                                                              // 4108
    }                                                                                                                  // 4109
                                                                                                                       // 4110
    /**                                                                                                                // 4111
     * Creates a function that wraps `func` to invoke it with optional `this`                                          // 4112
     * binding of `thisArg`, partial application, and currying.                                                        // 4113
     *                                                                                                                 // 4114
     * @private                                                                                                        // 4115
     * @param {Function|string} func The function or method name to wrap.                                              // 4116
     * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper` for more details.                     // 4117
     * @param {*} [thisArg] The `this` binding of `func`.                                                              // 4118
     * @param {Array} [partials] The arguments to prepend to those provided to the new function.                       // 4119
     * @param {Array} [holders] The `partials` placeholder indexes.                                                    // 4120
     * @param {Array} [partialsRight] The arguments to append to those provided to the new function.                   // 4121
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.                                          // 4122
     * @param {Array} [argPos] The argument positions of the new function.                                             // 4123
     * @param {number} [ary] The arity cap of `func`.                                                                  // 4124
     * @param {number} [arity] The arity of `func`.                                                                    // 4125
     * @returns {Function} Returns the new wrapped function.                                                           // 4126
     */                                                                                                                // 4127
    function createHybridWrapper(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
      var isAry = bitmask & ARY_FLAG,                                                                                  // 4129
          isBind = bitmask & BIND_FLAG,                                                                                // 4130
          isBindKey = bitmask & BIND_KEY_FLAG,                                                                         // 4131
          isCurry = bitmask & CURRY_FLAG,                                                                              // 4132
          isCurryRight = bitmask & CURRY_RIGHT_FLAG,                                                                   // 4133
          isFlip = bitmask & FLIP_FLAG,                                                                                // 4134
          Ctor = isBindKey ? undefined : createCtorWrapper(func);                                                      // 4135
                                                                                                                       // 4136
      function wrapper() {                                                                                             // 4137
        var length = arguments.length,                                                                                 // 4138
            index = length,                                                                                            // 4139
            args = Array(length);                                                                                      // 4140
                                                                                                                       // 4141
        while (index--) {                                                                                              // 4142
          args[index] = arguments[index];                                                                              // 4143
        }                                                                                                              // 4144
        if (partials) {                                                                                                // 4145
          args = composeArgs(args, partials, holders);                                                                 // 4146
        }                                                                                                              // 4147
        if (partialsRight) {                                                                                           // 4148
          args = composeArgsRight(args, partialsRight, holdersRight);                                                  // 4149
        }                                                                                                              // 4150
        if (isCurry || isCurryRight) {                                                                                 // 4151
          var placeholder = wrapper.placeholder,                                                                       // 4152
              argsHolders = replaceHolders(args, placeholder);                                                         // 4153
                                                                                                                       // 4154
          length -= argsHolders.length;                                                                                // 4155
          if (length < arity) {                                                                                        // 4156
            return createRecurryWrapper(func, bitmask, createHybridWrapper, placeholder, thisArg, args, argsHolders, argPos, ary, arity - length);
          }                                                                                                            // 4158
        }                                                                                                              // 4159
        var thisBinding = isBind ? thisArg : this,                                                                     // 4160
            fn = isBindKey ? thisBinding[func] : func;                                                                 // 4161
                                                                                                                       // 4162
        if (argPos) {                                                                                                  // 4163
          args = reorder(args, argPos);                                                                                // 4164
        } else if (isFlip && args.length > 1) {                                                                        // 4165
          args.reverse();                                                                                              // 4166
        }                                                                                                              // 4167
        if (isAry && ary < args.length) {                                                                              // 4168
          args.length = ary;                                                                                           // 4169
        }                                                                                                              // 4170
        if (this && this !== root && this instanceof wrapper) {                                                        // 4171
          fn = Ctor || createCtorWrapper(fn);                                                                          // 4172
        }                                                                                                              // 4173
        return fn.apply(thisBinding, args);                                                                            // 4174
      }                                                                                                                // 4175
      return wrapper;                                                                                                  // 4176
    }                                                                                                                  // 4177
                                                                                                                       // 4178
    /**                                                                                                                // 4179
     * Creates a function like `_.over`.                                                                               // 4180
     *                                                                                                                 // 4181
     * @private                                                                                                        // 4182
     * @param {Function} arrayFunc The function to iterate over iteratees.                                             // 4183
     * @returns {Function} Returns the new invoker function.                                                           // 4184
     */                                                                                                                // 4185
    function createOver(arrayFunc) {                                                                                   // 4186
      return rest(function(iteratees) {                                                                                // 4187
        iteratees = arrayMap(baseFlatten(iteratees), getIteratee());                                                   // 4188
        return rest(function(args) {                                                                                   // 4189
          var thisArg = this;                                                                                          // 4190
          return arrayFunc(iteratees, function(iteratee) {                                                             // 4191
            return apply(iteratee, thisArg, args);                                                                     // 4192
          });                                                                                                          // 4193
        });                                                                                                            // 4194
      });                                                                                                              // 4195
    }                                                                                                                  // 4196
                                                                                                                       // 4197
    /**                                                                                                                // 4198
     * Creates the padding for `string` based on `length`. The `chars` string                                          // 4199
     * is truncated if the number of characters exceeds `length`.                                                      // 4200
     *                                                                                                                 // 4201
     * @private                                                                                                        // 4202
     * @param {string} string The string to create padding for.                                                        // 4203
     * @param {number} [length=0] The padding length.                                                                  // 4204
     * @param {string} [chars=' '] The string used as padding.                                                         // 4205
     * @returns {string} Returns the padding for `string`.                                                             // 4206
     */                                                                                                                // 4207
    function createPadding(string, length, chars) {                                                                    // 4208
      length = toInteger(length);                                                                                      // 4209
                                                                                                                       // 4210
      var strLength = stringSize(string);                                                                              // 4211
      if (!length || strLength >= length) {                                                                            // 4212
        return '';                                                                                                     // 4213
      }                                                                                                                // 4214
      var padLength = length - strLength;                                                                              // 4215
      chars = chars === undefined ? ' ' : (chars + '');                                                                // 4216
                                                                                                                       // 4217
      var result = repeat(chars, nativeCeil(padLength / stringSize(chars)));                                           // 4218
      return reHasComplexSymbol.test(chars)                                                                            // 4219
        ? stringToArray(result).slice(0, padLength).join('')                                                           // 4220
        : result.slice(0, padLength);                                                                                  // 4221
    }                                                                                                                  // 4222
                                                                                                                       // 4223
    /**                                                                                                                // 4224
     * Creates a function that wraps `func` to invoke it with the optional `this`                                      // 4225
     * binding of `thisArg` and the `partials` prepended to those provided to                                          // 4226
     * the wrapper.                                                                                                    // 4227
     *                                                                                                                 // 4228
     * @private                                                                                                        // 4229
     * @param {Function} func The function to wrap.                                                                    // 4230
     * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper` for more details.                     // 4231
     * @param {*} thisArg The `this` binding of `func`.                                                                // 4232
     * @param {Array} partials The arguments to prepend to those provided to the new function.                         // 4233
     * @returns {Function} Returns the new wrapped function.                                                           // 4234
     */                                                                                                                // 4235
    function createPartialWrapper(func, bitmask, thisArg, partials) {                                                  // 4236
      var isBind = bitmask & BIND_FLAG,                                                                                // 4237
          Ctor = createCtorWrapper(func);                                                                              // 4238
                                                                                                                       // 4239
      function wrapper() {                                                                                             // 4240
        var argsIndex = -1,                                                                                            // 4241
            argsLength = arguments.length,                                                                             // 4242
            leftIndex = -1,                                                                                            // 4243
            leftLength = partials.length,                                                                              // 4244
            args = Array(leftLength + argsLength),                                                                     // 4245
            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;                                     // 4246
                                                                                                                       // 4247
        while (++leftIndex < leftLength) {                                                                             // 4248
          args[leftIndex] = partials[leftIndex];                                                                       // 4249
        }                                                                                                              // 4250
        while (argsLength--) {                                                                                         // 4251
          args[leftIndex++] = arguments[++argsIndex];                                                                  // 4252
        }                                                                                                              // 4253
        return apply(fn, isBind ? thisArg : this, args);                                                               // 4254
      }                                                                                                                // 4255
      return wrapper;                                                                                                  // 4256
    }                                                                                                                  // 4257
                                                                                                                       // 4258
    /**                                                                                                                // 4259
     * Creates a `_.range` or `_.rangeRight` function.                                                                 // 4260
     *                                                                                                                 // 4261
     * @private                                                                                                        // 4262
     * @param {boolean} [fromRight] Specify iterating from right to left.                                              // 4263
     * @returns {Function} Returns the new range function.                                                             // 4264
     */                                                                                                                // 4265
    function createRange(fromRight) {                                                                                  // 4266
      return function(start, end, step) {                                                                              // 4267
        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {                                     // 4268
          end = step = undefined;                                                                                      // 4269
        }                                                                                                              // 4270
        // Ensure the sign of `-0` is preserved.                                                                       // 4271
        start = toNumber(start);                                                                                       // 4272
        start = start === start ? start : 0;                                                                           // 4273
        if (end === undefined) {                                                                                       // 4274
          end = start;                                                                                                 // 4275
          start = 0;                                                                                                   // 4276
        } else {                                                                                                       // 4277
          end = toNumber(end) || 0;                                                                                    // 4278
        }                                                                                                              // 4279
        step = step === undefined ? (start < end ? 1 : -1) : (toNumber(step) || 0);                                    // 4280
        return baseRange(start, end, step, fromRight);                                                                 // 4281
      };                                                                                                               // 4282
    }                                                                                                                  // 4283
                                                                                                                       // 4284
    /**                                                                                                                // 4285
     * Creates a function that wraps `func` to continue currying.                                                      // 4286
     *                                                                                                                 // 4287
     * @private                                                                                                        // 4288
     * @param {Function} func The function to wrap.                                                                    // 4289
     * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper` for more details.                     // 4290
     * @param {Function} wrapFunc The function to create the `func` wrapper.                                           // 4291
     * @param {*} placeholder The placeholder to replace.                                                              // 4292
     * @param {*} [thisArg] The `this` binding of `func`.                                                              // 4293
     * @param {Array} [partials] The arguments to prepend to those provided to the new function.                       // 4294
     * @param {Array} [holders] The `partials` placeholder indexes.                                                    // 4295
     * @param {Array} [argPos] The argument positions of the new function.                                             // 4296
     * @param {number} [ary] The arity cap of `func`.                                                                  // 4297
     * @param {number} [arity] The arity of `func`.                                                                    // 4298
     * @returns {Function} Returns the new wrapped function.                                                           // 4299
     */                                                                                                                // 4300
    function createRecurryWrapper(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
      var isCurry = bitmask & CURRY_FLAG,                                                                              // 4302
          newArgPos = argPos ? copyArray(argPos) : undefined,                                                          // 4303
          newsHolders = isCurry ? holders : undefined,                                                                 // 4304
          newHoldersRight = isCurry ? undefined : holders,                                                             // 4305
          newPartials = isCurry ? partials : undefined,                                                                // 4306
          newPartialsRight = isCurry ? undefined : partials;                                                           // 4307
                                                                                                                       // 4308
      bitmask |= (isCurry ? PARTIAL_FLAG : PARTIAL_RIGHT_FLAG);                                                        // 4309
      bitmask &= ~(isCurry ? PARTIAL_RIGHT_FLAG : PARTIAL_FLAG);                                                       // 4310
                                                                                                                       // 4311
      if (!(bitmask & CURRY_BOUND_FLAG)) {                                                                             // 4312
        bitmask &= ~(BIND_FLAG | BIND_KEY_FLAG);                                                                       // 4313
      }                                                                                                                // 4314
      var newData = [func, bitmask, thisArg, newPartials, newsHolders, newPartialsRight, newHoldersRight, newArgPos, ary, arity],
          result = wrapFunc.apply(undefined, newData);                                                                 // 4316
                                                                                                                       // 4317
      if (isLaziable(func)) {                                                                                          // 4318
        setData(result, newData);                                                                                      // 4319
      }                                                                                                                // 4320
      result.placeholder = placeholder;                                                                                // 4321
      return result;                                                                                                   // 4322
    }                                                                                                                  // 4323
                                                                                                                       // 4324
    /**                                                                                                                // 4325
     * Creates a function like `_.round`.                                                                              // 4326
     *                                                                                                                 // 4327
     * @private                                                                                                        // 4328
     * @param {string} methodName The name of the `Math` method to use when rounding.                                  // 4329
     * @returns {Function} Returns the new round function.                                                             // 4330
     */                                                                                                                // 4331
    function createRound(methodName) {                                                                                 // 4332
      var func = Math[methodName];                                                                                     // 4333
      return function(number, precision) {                                                                             // 4334
        number = toNumber(number);                                                                                     // 4335
        precision = toInteger(precision);                                                                              // 4336
        if (precision) {                                                                                               // 4337
          // Shift with exponential notation to avoid floating-point issues.                                           // 4338
          // See [MDN](https://mdn.io/round#Examples) for more details.                                                // 4339
          var pair = (toString(number) + 'e').split('e'),                                                              // 4340
              value = func(pair[0] + 'e' + (+pair[1] + precision));                                                    // 4341
                                                                                                                       // 4342
          pair = (toString(value) + 'e').split('e');                                                                   // 4343
          return +(pair[0] + 'e' + (+pair[1] - precision));                                                            // 4344
        }                                                                                                              // 4345
        return func(number);                                                                                           // 4346
      };                                                                                                               // 4347
    }                                                                                                                  // 4348
                                                                                                                       // 4349
    /**                                                                                                                // 4350
     * Creates a set of `values`.                                                                                      // 4351
     *                                                                                                                 // 4352
     * @private                                                                                                        // 4353
     * @param {Array} values The values to add to the set.                                                             // 4354
     * @returns {Object} Returns the new set.                                                                          // 4355
     */                                                                                                                // 4356
    var createSet = !(Set && new Set([1, 2]).size === 2) ? noop : function(values) {                                   // 4357
      return new Set(values);                                                                                          // 4358
    };                                                                                                                 // 4359
                                                                                                                       // 4360
    /**                                                                                                                // 4361
     * Creates a function that either curries or invokes `func` with optional                                          // 4362
     * `this` binding and partially applied arguments.                                                                 // 4363
     *                                                                                                                 // 4364
     * @private                                                                                                        // 4365
     * @param {Function|string} func The function or method name to wrap.                                              // 4366
     * @param {number} bitmask The bitmask of wrapper flags.                                                           // 4367
     *  The bitmask may be composed of the following flags:                                                            // 4368
     *     1 - `_.bind`                                                                                                // 4369
     *     2 - `_.bindKey`                                                                                             // 4370
     *     4 - `_.curry` or `_.curryRight` of a bound function                                                         // 4371
     *     8 - `_.curry`                                                                                               // 4372
     *    16 - `_.curryRight`                                                                                          // 4373
     *    32 - `_.partial`                                                                                             // 4374
     *    64 - `_.partialRight`                                                                                        // 4375
     *   128 - `_.rearg`                                                                                               // 4376
     *   256 - `_.ary`                                                                                                 // 4377
     * @param {*} [thisArg] The `this` binding of `func`.                                                              // 4378
     * @param {Array} [partials] The arguments to be partially applied.                                                // 4379
     * @param {Array} [holders] The `partials` placeholder indexes.                                                    // 4380
     * @param {Array} [argPos] The argument positions of the new function.                                             // 4381
     * @param {number} [ary] The arity cap of `func`.                                                                  // 4382
     * @param {number} [arity] The arity of `func`.                                                                    // 4383
     * @returns {Function} Returns the new wrapped function.                                                           // 4384
     */                                                                                                                // 4385
    function createWrapper(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {                            // 4386
      var isBindKey = bitmask & BIND_KEY_FLAG;                                                                         // 4387
      if (!isBindKey && typeof func != 'function') {                                                                   // 4388
        throw new TypeError(FUNC_ERROR_TEXT);                                                                          // 4389
      }                                                                                                                // 4390
      var length = partials ? partials.length : 0;                                                                     // 4391
      if (!length) {                                                                                                   // 4392
        bitmask &= ~(PARTIAL_FLAG | PARTIAL_RIGHT_FLAG);                                                               // 4393
        partials = holders = undefined;                                                                                // 4394
      }                                                                                                                // 4395
      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);                                                    // 4396
      arity = arity === undefined ? arity : toInteger(arity);                                                          // 4397
      length -= holders ? holders.length : 0;                                                                          // 4398
                                                                                                                       // 4399
      if (bitmask & PARTIAL_RIGHT_FLAG) {                                                                              // 4400
        var partialsRight = partials,                                                                                  // 4401
            holdersRight = holders;                                                                                    // 4402
                                                                                                                       // 4403
        partials = holders = undefined;                                                                                // 4404
      }                                                                                                                // 4405
      var data = isBindKey ? undefined : getData(func),                                                                // 4406
          newData = [func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity];      // 4407
                                                                                                                       // 4408
      if (data) {                                                                                                      // 4409
        mergeData(newData, data);                                                                                      // 4410
      }                                                                                                                // 4411
      func = newData[0];                                                                                               // 4412
      bitmask = newData[1];                                                                                            // 4413
      thisArg = newData[2];                                                                                            // 4414
      partials = newData[3];                                                                                           // 4415
      holders = newData[4];                                                                                            // 4416
      arity = newData[9] = newData[9] == null                                                                          // 4417
        ? (isBindKey ? 0 : func.length)                                                                                // 4418
        : nativeMax(newData[9] - length, 0);                                                                           // 4419
                                                                                                                       // 4420
      if (!arity && bitmask & (CURRY_FLAG | CURRY_RIGHT_FLAG)) {                                                       // 4421
        bitmask &= ~(CURRY_FLAG | CURRY_RIGHT_FLAG);                                                                   // 4422
      }                                                                                                                // 4423
      if (!bitmask || bitmask == BIND_FLAG) {                                                                          // 4424
        var result = createBaseWrapper(func, bitmask, thisArg);                                                        // 4425
      } else if (bitmask == CURRY_FLAG || bitmask == CURRY_RIGHT_FLAG) {                                               // 4426
        result = createCurryWrapper(func, bitmask, arity);                                                             // 4427
      } else if ((bitmask == PARTIAL_FLAG || bitmask == (BIND_FLAG | PARTIAL_FLAG)) && !holders.length) {              // 4428
        result = createPartialWrapper(func, bitmask, thisArg, partials);                                               // 4429
      } else {                                                                                                         // 4430
        result = createHybridWrapper.apply(undefined, newData);                                                        // 4431
      }                                                                                                                // 4432
      var setter = data ? baseSetData : setData;                                                                       // 4433
      return setter(result, newData);                                                                                  // 4434
    }                                                                                                                  // 4435
                                                                                                                       // 4436
    /**                                                                                                                // 4437
     * A specialized version of `baseIsEqualDeep` for arrays with support for                                          // 4438
     * partial deep comparisons.                                                                                       // 4439
     *                                                                                                                 // 4440
     * @private                                                                                                        // 4441
     * @param {Array} array The array to compare.                                                                      // 4442
     * @param {Array} other The other array to compare.                                                                // 4443
     * @param {Function} equalFunc The function to determine equivalents of values.                                    // 4444
     * @param {Function} [customizer] The function to customize comparisons.                                           // 4445
     * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual` for more details.                  // 4446
     * @param {Object} [stack] Tracks traversed `array` and `other` objects.                                           // 4447
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.                                   // 4448
     */                                                                                                                // 4449
    function equalArrays(array, other, equalFunc, customizer, bitmask, stack) {                                        // 4450
      var index = -1,                                                                                                  // 4451
          isPartial = bitmask & PARTIAL_COMPARE_FLAG,                                                                  // 4452
          isUnordered = bitmask & UNORDERED_COMPARE_FLAG,                                                              // 4453
          arrLength = array.length,                                                                                    // 4454
          othLength = other.length;                                                                                    // 4455
                                                                                                                       // 4456
      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {                                           // 4457
        return false;                                                                                                  // 4458
      }                                                                                                                // 4459
      // Assume cyclic values are equal.                                                                               // 4460
      var stacked = stack.get(array);                                                                                  // 4461
      if (stacked) {                                                                                                   // 4462
        return stacked == other;                                                                                       // 4463
      }                                                                                                                // 4464
      var result = true;                                                                                               // 4465
      stack.set(array, other);                                                                                         // 4466
                                                                                                                       // 4467
      // Ignore non-index properties.                                                                                  // 4468
      while (++index < arrLength) {                                                                                    // 4469
        var arrValue = array[index],                                                                                   // 4470
            othValue = other[index];                                                                                   // 4471
                                                                                                                       // 4472
        if (customizer) {                                                                                              // 4473
          var compared = isPartial                                                                                     // 4474
            ? customizer(othValue, arrValue, index, other, array, stack)                                               // 4475
            : customizer(arrValue, othValue, index, array, other, stack);                                              // 4476
        }                                                                                                              // 4477
        if (compared !== undefined) {                                                                                  // 4478
          if (compared) {                                                                                              // 4479
            continue;                                                                                                  // 4480
          }                                                                                                            // 4481
          result = false;                                                                                              // 4482
          break;                                                                                                       // 4483
        }                                                                                                              // 4484
        // Recursively compare arrays (susceptible to call stack limits).                                              // 4485
        if (isUnordered) {                                                                                             // 4486
          if (!arraySome(other, function(othValue) {                                                                   // 4487
                return arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack);             // 4488
              })) {                                                                                                    // 4489
            result = false;                                                                                            // 4490
            break;                                                                                                     // 4491
          }                                                                                                            // 4492
        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {            // 4493
          result = false;                                                                                              // 4494
          break;                                                                                                       // 4495
        }                                                                                                              // 4496
      }                                                                                                                // 4497
      stack['delete'](array);                                                                                          // 4498
      return result;                                                                                                   // 4499
    }                                                                                                                  // 4500
                                                                                                                       // 4501
    /**                                                                                                                // 4502
     * A specialized version of `baseIsEqualDeep` for comparing objects of                                             // 4503
     * the same `toStringTag`.                                                                                         // 4504
     *                                                                                                                 // 4505
     * **Note:** This function only supports comparing values with tags of                                             // 4506
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.                                                    // 4507
     *                                                                                                                 // 4508
     * @private                                                                                                        // 4509
     * @param {Object} object The object to compare.                                                                   // 4510
     * @param {Object} other The other object to compare.                                                              // 4511
     * @param {string} tag The `toStringTag` of the objects to compare.                                                // 4512
     * @param {Function} equalFunc The function to determine equivalents of values.                                    // 4513
     * @param {Function} [customizer] The function to customize comparisons.                                           // 4514
     * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual` for more details.                  // 4515
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.                                  // 4516
     */                                                                                                                // 4517
    function equalByTag(object, other, tag, equalFunc, customizer, bitmask) {                                          // 4518
      switch (tag) {                                                                                                   // 4519
        case arrayBufferTag:                                                                                           // 4520
          if ((object.byteLength != other.byteLength) ||                                                               // 4521
              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {                                             // 4522
            return false;                                                                                              // 4523
          }                                                                                                            // 4524
          return true;                                                                                                 // 4525
                                                                                                                       // 4526
        case boolTag:                                                                                                  // 4527
        case dateTag:                                                                                                  // 4528
          // Coerce dates and booleans to numbers, dates to milliseconds and booleans                                  // 4529
          // to `1` or `0` treating invalid dates coerced to `NaN` as not equal.                                       // 4530
          return +object == +other;                                                                                    // 4531
                                                                                                                       // 4532
        case errorTag:                                                                                                 // 4533
          return object.name == other.name && object.message == other.message;                                         // 4534
                                                                                                                       // 4535
        case numberTag:                                                                                                // 4536
          // Treat `NaN` vs. `NaN` as equal.                                                                           // 4537
          return (object != +object) ? other != +other : object == +other;                                             // 4538
                                                                                                                       // 4539
        case regexpTag:                                                                                                // 4540
        case stringTag:                                                                                                // 4541
          // Coerce regexes to strings and treat strings primitives and string                                         // 4542
          // objects as equal. See https://es5.github.io/#x15.10.6.4 for more details.                                 // 4543
          return object == (other + '');                                                                               // 4544
                                                                                                                       // 4545
        case mapTag:                                                                                                   // 4546
          var convert = mapToArray;                                                                                    // 4547
                                                                                                                       // 4548
        case setTag:                                                                                                   // 4549
          var isPartial = bitmask & PARTIAL_COMPARE_FLAG;                                                              // 4550
          convert || (convert = setToArray);                                                                           // 4551
                                                                                                                       // 4552
          // Recursively compare objects (susceptible to call stack limits).                                           // 4553
          return (isPartial || object.size == other.size) &&                                                           // 4554
            equalFunc(convert(object), convert(other), customizer, bitmask | UNORDERED_COMPARE_FLAG);                  // 4555
                                                                                                                       // 4556
        case symbolTag:                                                                                                // 4557
          return !!_Symbol && (symbolValueOf.call(object) == symbolValueOf.call(other));                               // 4558
      }                                                                                                                // 4559
      return false;                                                                                                    // 4560
    }                                                                                                                  // 4561
                                                                                                                       // 4562
    /**                                                                                                                // 4563
     * A specialized version of `baseIsEqualDeep` for objects with support for                                         // 4564
     * partial deep comparisons.                                                                                       // 4565
     *                                                                                                                 // 4566
     * @private                                                                                                        // 4567
     * @param {Object} object The object to compare.                                                                   // 4568
     * @param {Object} other The other object to compare.                                                              // 4569
     * @param {Function} equalFunc The function to determine equivalents of values.                                    // 4570
     * @param {Function} [customizer] The function to customize comparisons.                                           // 4571
     * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual` for more details.                  // 4572
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.                                          // 4573
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.                                  // 4574
     */                                                                                                                // 4575
    function equalObjects(object, other, equalFunc, customizer, bitmask, stack) {                                      // 4576
      var isPartial = bitmask & PARTIAL_COMPARE_FLAG,                                                                  // 4577
          isUnordered = bitmask & UNORDERED_COMPARE_FLAG,                                                              // 4578
          objProps = keys(object),                                                                                     // 4579
          objLength = objProps.length,                                                                                 // 4580
          othProps = keys(other),                                                                                      // 4581
          othLength = othProps.length;                                                                                 // 4582
                                                                                                                       // 4583
      if (objLength != othLength && !isPartial) {                                                                      // 4584
        return false;                                                                                                  // 4585
      }                                                                                                                // 4586
      var index = objLength;                                                                                           // 4587
      while (index--) {                                                                                                // 4588
        var key = objProps[index];                                                                                     // 4589
        if (!(isPartial ? key in other : baseHas(other, key)) ||                                                       // 4590
            !(isUnordered || key == othProps[index])) {                                                                // 4591
          return false;                                                                                                // 4592
        }                                                                                                              // 4593
      }                                                                                                                // 4594
      // Assume cyclic values are equal.                                                                               // 4595
      var stacked = stack.get(object);                                                                                 // 4596
      if (stacked) {                                                                                                   // 4597
        return stacked == other;                                                                                       // 4598
      }                                                                                                                // 4599
      var result = true;                                                                                               // 4600
      stack.set(object, other);                                                                                        // 4601
                                                                                                                       // 4602
      var skipCtor = isPartial;                                                                                        // 4603
      while (++index < objLength) {                                                                                    // 4604
        key = objProps[index];                                                                                         // 4605
        var objValue = object[key],                                                                                    // 4606
            othValue = other[key];                                                                                     // 4607
                                                                                                                       // 4608
        if (customizer) {                                                                                              // 4609
          var compared = isPartial                                                                                     // 4610
            ? customizer(othValue, objValue, key, other, object, stack)                                                // 4611
            : customizer(objValue, othValue, key, object, other, stack);                                               // 4612
        }                                                                                                              // 4613
        // Recursively compare objects (susceptible to call stack limits).                                             // 4614
        if (!(compared === undefined                                                                                   // 4615
              ? (objValue === othValue || equalFunc(objValue, othValue, customizer, bitmask, stack))                   // 4616
              : compared                                                                                               // 4617
            )) {                                                                                                       // 4618
          result = false;                                                                                              // 4619
          break;                                                                                                       // 4620
        }                                                                                                              // 4621
        skipCtor || (skipCtor = key == 'constructor');                                                                 // 4622
      }                                                                                                                // 4623
      if (result && !skipCtor) {                                                                                       // 4624
        var objCtor = object.constructor,                                                                              // 4625
            othCtor = other.constructor;                                                                               // 4626
                                                                                                                       // 4627
        // Non `Object` object instances with different constructors are not equal.                                    // 4628
        if (objCtor != othCtor &&                                                                                      // 4629
            ('constructor' in object && 'constructor' in other) &&                                                     // 4630
            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&                                            // 4631
              typeof othCtor == 'function' && othCtor instanceof othCtor)) {                                           // 4632
          result = false;                                                                                              // 4633
        }                                                                                                              // 4634
      }                                                                                                                // 4635
      stack['delete'](object);                                                                                         // 4636
      return result;                                                                                                   // 4637
    }                                                                                                                  // 4638
                                                                                                                       // 4639
    /**                                                                                                                // 4640
     * Gets metadata for `func`.                                                                                       // 4641
     *                                                                                                                 // 4642
     * @private                                                                                                        // 4643
     * @param {Function} func The function to query.                                                                   // 4644
     * @returns {*} Returns the metadata for `func`.                                                                   // 4645
     */                                                                                                                // 4646
    var getData = !metaMap ? noop : function(func) {                                                                   // 4647
      return metaMap.get(func);                                                                                        // 4648
    };                                                                                                                 // 4649
                                                                                                                       // 4650
    /**                                                                                                                // 4651
     * Gets the name of `func`.                                                                                        // 4652
     *                                                                                                                 // 4653
     * @private                                                                                                        // 4654
     * @param {Function} func The function to query.                                                                   // 4655
     * @returns {string} Returns the function name.                                                                    // 4656
     */                                                                                                                // 4657
    function getFuncName(func) {                                                                                       // 4658
      var result = (func.name + ''),                                                                                   // 4659
          array = realNames[result],                                                                                   // 4660
          length = array ? array.length : 0;                                                                           // 4661
                                                                                                                       // 4662
      while (length--) {                                                                                               // 4663
        var data = array[length],                                                                                      // 4664
            otherFunc = data.func;                                                                                     // 4665
        if (otherFunc == null || otherFunc == func) {                                                                  // 4666
          return data.name;                                                                                            // 4667
        }                                                                                                              // 4668
      }                                                                                                                // 4669
      return result;                                                                                                   // 4670
    }                                                                                                                  // 4671
                                                                                                                       // 4672
    /**                                                                                                                // 4673
     * Gets the appropriate "iteratee" function. If the `_.iteratee` method is                                         // 4674
     * customized this function returns the custom method, otherwise it returns                                        // 4675
     * `baseIteratee`. If arguments are provided the chosen function is invoked                                        // 4676
     * with them and its result is returned.                                                                           // 4677
     *                                                                                                                 // 4678
     * @private                                                                                                        // 4679
     * @param {*} [value] The value to convert to an iteratee.                                                         // 4680
     * @param {number} [arity] The arity of the created iteratee.                                                      // 4681
     * @returns {Function} Returns the chosen function or its result.                                                  // 4682
     */                                                                                                                // 4683
    function getIteratee() {                                                                                           // 4684
      var result = lodash.iteratee || iteratee;                                                                        // 4685
      result = result === iteratee ? baseIteratee : result;                                                            // 4686
      return arguments.length ? result(arguments[0], arguments[1]) : result;                                           // 4687
    }                                                                                                                  // 4688
                                                                                                                       // 4689
    /**                                                                                                                // 4690
     * Gets the "length" property value of `object`.                                                                   // 4691
     *                                                                                                                 // 4692
     * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)            // 4693
     * that affects Safari on at least iOS 8.1-8.3 ARM64.                                                              // 4694
     *                                                                                                                 // 4695
     * @private                                                                                                        // 4696
     * @param {Object} object The object to query.                                                                     // 4697
     * @returns {*} Returns the "length" value.                                                                        // 4698
     */                                                                                                                // 4699
    var getLength = baseProperty('length');                                                                            // 4700
                                                                                                                       // 4701
    /**                                                                                                                // 4702
     * Gets the property names, values, and compare flags of `object`.                                                 // 4703
     *                                                                                                                 // 4704
     * @private                                                                                                        // 4705
     * @param {Object} object The object to query.                                                                     // 4706
     * @returns {Array} Returns the match data of `object`.                                                            // 4707
     */                                                                                                                // 4708
    function getMatchData(object) {                                                                                    // 4709
      var result = toPairs(object),                                                                                    // 4710
          length = result.length;                                                                                      // 4711
                                                                                                                       // 4712
      while (length--) {                                                                                               // 4713
        result[length][2] = isStrictComparable(result[length][1]);                                                     // 4714
      }                                                                                                                // 4715
      return result;                                                                                                   // 4716
    }                                                                                                                  // 4717
                                                                                                                       // 4718
    /**                                                                                                                // 4719
     * Gets the native function at `key` of `object`.                                                                  // 4720
     *                                                                                                                 // 4721
     * @private                                                                                                        // 4722
     * @param {Object} object The object to query.                                                                     // 4723
     * @param {string} key The key of the method to get.                                                               // 4724
     * @returns {*} Returns the function if it's native, else `undefined`.                                             // 4725
     */                                                                                                                // 4726
    function getNative(object, key) {                                                                                  // 4727
      var value = object == null ? undefined : object[key];                                                            // 4728
      return isNative(value) ? value : undefined;                                                                      // 4729
    }                                                                                                                  // 4730
                                                                                                                       // 4731
    /**                                                                                                                // 4732
     * Creates an array of the own symbol properties of `object`.                                                      // 4733
     *                                                                                                                 // 4734
     * @private                                                                                                        // 4735
     * @param {Object} object The object to query.                                                                     // 4736
     * @returns {Array} Returns the array of symbols.                                                                  // 4737
     */                                                                                                                // 4738
    var getSymbols = getOwnPropertySymbols || function() {                                                             // 4739
      return [];                                                                                                       // 4740
    };                                                                                                                 // 4741
                                                                                                                       // 4742
    /**                                                                                                                // 4743
     * Gets the `toStringTag` of `value`.                                                                              // 4744
     *                                                                                                                 // 4745
     * @private                                                                                                        // 4746
     * @param {*} value The value to query.                                                                            // 4747
     * @returns {string} Returns the `toStringTag`.                                                                    // 4748
     */                                                                                                                // 4749
    function getTag(value) {                                                                                           // 4750
      return objectToString.call(value);                                                                               // 4751
    }                                                                                                                  // 4752
                                                                                                                       // 4753
    // Fallback for IE 11 providing `toStringTag` values for maps and sets.                                            // 4754
    if ((Map && getTag(new Map) != mapTag) || (Set && getTag(new Set) != setTag)) {                                    // 4755
      getTag = function(value) {                                                                                       // 4756
        var result = objectToString.call(value),                                                                       // 4757
            Ctor = result == objectTag ? value.constructor : null,                                                     // 4758
            ctorString = typeof Ctor == 'function' ? funcToString.call(Ctor) : '';                                     // 4759
                                                                                                                       // 4760
        if (ctorString) {                                                                                              // 4761
          if (ctorString == mapCtorString) {                                                                           // 4762
            return mapTag;                                                                                             // 4763
          }                                                                                                            // 4764
          if (ctorString == setCtorString) {                                                                           // 4765
            return setTag;                                                                                             // 4766
          }                                                                                                            // 4767
        }                                                                                                              // 4768
        return result;                                                                                                 // 4769
      };                                                                                                               // 4770
    }                                                                                                                  // 4771
                                                                                                                       // 4772
    /**                                                                                                                // 4773
     * Gets the view, applying any `transforms` to the `start` and `end` positions.                                    // 4774
     *                                                                                                                 // 4775
     * @private                                                                                                        // 4776
     * @param {number} start The start of the view.                                                                    // 4777
     * @param {number} end The end of the view.                                                                        // 4778
     * @param {Array} transforms The transformations to apply to the view.                                             // 4779
     * @returns {Object} Returns an object containing the `start` and `end`                                            // 4780
     *  positions of the view.                                                                                         // 4781
     */                                                                                                                // 4782
    function getView(start, end, transforms) {                                                                         // 4783
      var index = -1,                                                                                                  // 4784
          length = transforms.length;                                                                                  // 4785
                                                                                                                       // 4786
      while (++index < length) {                                                                                       // 4787
        var data = transforms[index],                                                                                  // 4788
            size = data.size;                                                                                          // 4789
                                                                                                                       // 4790
        switch (data.type) {                                                                                           // 4791
          case 'drop':      start += size; break;                                                                      // 4792
          case 'dropRight': end -= size; break;                                                                        // 4793
          case 'take':      end = nativeMin(end, start + size); break;                                                 // 4794
          case 'takeRight': start = nativeMax(start, end - size); break;                                               // 4795
        }                                                                                                              // 4796
      }                                                                                                                // 4797
      return { 'start': start, 'end': end };                                                                           // 4798
    }                                                                                                                  // 4799
                                                                                                                       // 4800
    /**                                                                                                                // 4801
     * Checks if `path` exists on `object`.                                                                            // 4802
     *                                                                                                                 // 4803
     * @private                                                                                                        // 4804
     * @param {Object} object The object to query.                                                                     // 4805
     * @param {Array|string} path The path to check.                                                                   // 4806
     * @param {Function} hasFunc The function to check properties.                                                     // 4807
     * @returns {boolean} Returns `true` if `path` exists, else `false`.                                               // 4808
     */                                                                                                                // 4809
    function hasPath(object, path, hasFunc) {                                                                          // 4810
      if (object == null) {                                                                                            // 4811
        return false;                                                                                                  // 4812
      }                                                                                                                // 4813
      var result = hasFunc(object, path);                                                                              // 4814
      if (!result && !isKey(path)) {                                                                                   // 4815
        path = baseToPath(path);                                                                                       // 4816
        object = parent(object, path);                                                                                 // 4817
        if (object != null) {                                                                                          // 4818
          path = last(path);                                                                                           // 4819
          result = hasFunc(object, path);                                                                              // 4820
        }                                                                                                              // 4821
      }                                                                                                                // 4822
      return result || (isLength(object && object.length) && isIndex(path, object.length) &&                           // 4823
        (isArray(object) || isString(object) || isArguments(object)));                                                 // 4824
    }                                                                                                                  // 4825
                                                                                                                       // 4826
    /**                                                                                                                // 4827
     * Initializes an array clone.                                                                                     // 4828
     *                                                                                                                 // 4829
     * @private                                                                                                        // 4830
     * @param {Array} array The array to clone.                                                                        // 4831
     * @returns {Array} Returns the initialized clone.                                                                 // 4832
     */                                                                                                                // 4833
    function initCloneArray(array) {                                                                                   // 4834
      var length = array.length,                                                                                       // 4835
          result = array.constructor(length);                                                                          // 4836
                                                                                                                       // 4837
      // Add properties assigned by `RegExp#exec`.                                                                     // 4838
      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {                              // 4839
        result.index = array.index;                                                                                    // 4840
        result.input = array.input;                                                                                    // 4841
      }                                                                                                                // 4842
      return result;                                                                                                   // 4843
    }                                                                                                                  // 4844
                                                                                                                       // 4845
    /**                                                                                                                // 4846
     * Initializes an object clone.                                                                                    // 4847
     *                                                                                                                 // 4848
     * @private                                                                                                        // 4849
     * @param {Object} object The object to clone.                                                                     // 4850
     * @returns {Object} Returns the initialized clone.                                                                // 4851
     */                                                                                                                // 4852
    function initCloneObject(object) {                                                                                 // 4853
      var Ctor = object.constructor;                                                                                   // 4854
      return baseCreate(isFunction(Ctor) ? Ctor.prototype : undefined);                                                // 4855
    }                                                                                                                  // 4856
                                                                                                                       // 4857
    /**                                                                                                                // 4858
     * Initializes an object clone based on its `toStringTag`.                                                         // 4859
     *                                                                                                                 // 4860
     * **Note:** This function only supports cloning values with tags of                                               // 4861
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.                                                    // 4862
     *                                                                                                                 // 4863
     * @private                                                                                                        // 4864
     * @param {Object} object The object to clone.                                                                     // 4865
     * @param {string} tag The `toStringTag` of the object to clone.                                                   // 4866
     * @param {boolean} [isDeep] Specify a deep clone.                                                                 // 4867
     * @returns {Object} Returns the initialized clone.                                                                // 4868
     */                                                                                                                // 4869
    function initCloneByTag(object, tag, isDeep) {                                                                     // 4870
      var Ctor = object.constructor;                                                                                   // 4871
      switch (tag) {                                                                                                   // 4872
        case arrayBufferTag:                                                                                           // 4873
          return cloneBuffer(object);                                                                                  // 4874
                                                                                                                       // 4875
        case boolTag:                                                                                                  // 4876
        case dateTag:                                                                                                  // 4877
          return new Ctor(+object);                                                                                    // 4878
                                                                                                                       // 4879
        case float32Tag: case float64Tag:                                                                              // 4880
        case int8Tag: case int16Tag: case int32Tag:                                                                    // 4881
        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:                                           // 4882
          return cloneTypedArray(object, isDeep);                                                                      // 4883
                                                                                                                       // 4884
        case mapTag:                                                                                                   // 4885
          return cloneMap(object);                                                                                     // 4886
                                                                                                                       // 4887
        case numberTag:                                                                                                // 4888
        case stringTag:                                                                                                // 4889
          return new Ctor(object);                                                                                     // 4890
                                                                                                                       // 4891
        case regexpTag:                                                                                                // 4892
          return cloneRegExp(object);                                                                                  // 4893
                                                                                                                       // 4894
        case setTag:                                                                                                   // 4895
          return cloneSet(object);                                                                                     // 4896
                                                                                                                       // 4897
        case symbolTag:                                                                                                // 4898
          return cloneSymbol(object);                                                                                  // 4899
      }                                                                                                                // 4900
    }                                                                                                                  // 4901
                                                                                                                       // 4902
    /**                                                                                                                // 4903
     * Creates an array of index keys for `object` values of arrays,                                                   // 4904
     * `arguments` objects, and strings, otherwise `null` is returned.                                                 // 4905
     *                                                                                                                 // 4906
     * @private                                                                                                        // 4907
     * @param {Object} object The object to query.                                                                     // 4908
     * @returns {Array|null} Returns index keys, else `null`.                                                          // 4909
     */                                                                                                                // 4910
    function indexKeys(object) {                                                                                       // 4911
      var length = object ? object.length : undefined;                                                                 // 4912
      return (isLength(length) && (isArray(object) || isString(object) || isArguments(object)))                        // 4913
        ? baseTimes(length, String)                                                                                    // 4914
        : null;                                                                                                        // 4915
    }                                                                                                                  // 4916
                                                                                                                       // 4917
    /**                                                                                                                // 4918
     * Checks if the provided arguments are from an iteratee call.                                                     // 4919
     *                                                                                                                 // 4920
     * @private                                                                                                        // 4921
     * @param {*} value The potential iteratee value argument.                                                         // 4922
     * @param {*} index The potential iteratee index or key argument.                                                  // 4923
     * @param {*} object The potential iteratee object argument.                                                       // 4924
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call, else `false`.                     // 4925
     */                                                                                                                // 4926
    function isIterateeCall(value, index, object) {                                                                    // 4927
      if (!isObject(object)) {                                                                                         // 4928
        return false;                                                                                                  // 4929
      }                                                                                                                // 4930
      var type = typeof index;                                                                                         // 4931
      if (type == 'number'                                                                                             // 4932
          ? (isArrayLike(object) && isIndex(index, object.length))                                                     // 4933
          : (type == 'string' && index in object)) {                                                                   // 4934
        return eq(object[index], value);                                                                               // 4935
      }                                                                                                                // 4936
      return false;                                                                                                    // 4937
    }                                                                                                                  // 4938
                                                                                                                       // 4939
    /**                                                                                                                // 4940
     * Checks if `value` is a property name and not a property path.                                                   // 4941
     *                                                                                                                 // 4942
     * @private                                                                                                        // 4943
     * @param {*} value The value to check.                                                                            // 4944
     * @param {Object} [object] The object to query keys on.                                                           // 4945
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.                                  // 4946
     */                                                                                                                // 4947
    function isKey(value, object) {                                                                                    // 4948
      if (typeof value == 'number') {                                                                                  // 4949
        return true;                                                                                                   // 4950
      }                                                                                                                // 4951
      return !isArray(value) &&                                                                                        // 4952
        (reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||                                                     // 4953
          (object != null && value in Object(object)));                                                                // 4954
    }                                                                                                                  // 4955
                                                                                                                       // 4956
    /**                                                                                                                // 4957
     * Checks if `value` is suitable for use as unique object key.                                                     // 4958
     *                                                                                                                 // 4959
     * @private                                                                                                        // 4960
     * @param {*} value The value to check.                                                                            // 4961
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.                                         // 4962
     */                                                                                                                // 4963
    function isKeyable(value) {                                                                                        // 4964
      var type = typeof value;                                                                                         // 4965
      return type == 'number' || type == 'boolean' ||                                                                  // 4966
        (type == 'string' && value !== '__proto__') || value == null;                                                  // 4967
    }                                                                                                                  // 4968
                                                                                                                       // 4969
    /**                                                                                                                // 4970
     * Checks if `func` has a lazy counterpart.                                                                        // 4971
     *                                                                                                                 // 4972
     * @private                                                                                                        // 4973
     * @param {Function} func The function to check.                                                                   // 4974
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart, else `false`.                               // 4975
     */                                                                                                                // 4976
    function isLaziable(func) {                                                                                        // 4977
      var funcName = getFuncName(func),                                                                                // 4978
          other = lodash[funcName];                                                                                    // 4979
                                                                                                                       // 4980
      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {                                        // 4981
        return false;                                                                                                  // 4982
      }                                                                                                                // 4983
      if (func === other) {                                                                                            // 4984
        return true;                                                                                                   // 4985
      }                                                                                                                // 4986
      var data = getData(other);                                                                                       // 4987
      return !!data && func === data[0];                                                                               // 4988
    }                                                                                                                  // 4989
                                                                                                                       // 4990
    /**                                                                                                                // 4991
     * Checks if `value` is likely a prototype object.                                                                 // 4992
     *                                                                                                                 // 4993
     * @private                                                                                                        // 4994
     * @param {*} value The value to check.                                                                            // 4995
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.                                      // 4996
     */                                                                                                                // 4997
    function isPrototype(value) {                                                                                      // 4998
      var Ctor = value && value.constructor,                                                                           // 4999
          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;                                        // 5000
                                                                                                                       // 5001
      return value === proto;                                                                                          // 5002
    }                                                                                                                  // 5003
                                                                                                                       // 5004
    /**                                                                                                                // 5005
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.                                      // 5006
     *                                                                                                                 // 5007
     * @private                                                                                                        // 5008
     * @param {*} value The value to check.                                                                            // 5009
     * @returns {boolean} Returns `true` if `value` if suitable for strict                                             // 5010
     *  equality comparisons, else `false`.                                                                            // 5011
     */                                                                                                                // 5012
    function isStrictComparable(value) {                                                                               // 5013
      return value === value && !isObject(value);                                                                      // 5014
    }                                                                                                                  // 5015
                                                                                                                       // 5016
    /**                                                                                                                // 5017
     * Merges the function metadata of `source` into `data`.                                                           // 5018
     *                                                                                                                 // 5019
     * Merging metadata reduces the number of wrappers used to invoke a function.                                      // 5020
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`                                      // 5021
     * may be applied regardless of execution order. Methods like `_.ary` and `_.rearg`                                // 5022
     * modify function arguments, making the order in which they are executed important,                               // 5023
     * preventing the merging of metadata. However, we make an exception for a safe                                    // 5024
     * combined case where curried functions have `_.ary` and or `_.rearg` applied.                                    // 5025
     *                                                                                                                 // 5026
     * @private                                                                                                        // 5027
     * @param {Array} data The destination metadata.                                                                   // 5028
     * @param {Array} source The source metadata.                                                                      // 5029
     * @returns {Array} Returns `data`.                                                                                // 5030
     */                                                                                                                // 5031
    function mergeData(data, source) {                                                                                 // 5032
      var bitmask = data[1],                                                                                           // 5033
          srcBitmask = source[1],                                                                                      // 5034
          newBitmask = bitmask | srcBitmask,                                                                           // 5035
          isCommon = newBitmask < (BIND_FLAG | BIND_KEY_FLAG | ARY_FLAG);                                              // 5036
                                                                                                                       // 5037
      var isCombo =                                                                                                    // 5038
        (srcBitmask == ARY_FLAG && (bitmask == CURRY_FLAG)) ||                                                         // 5039
        (srcBitmask == ARY_FLAG && (bitmask == REARG_FLAG) && (data[7].length <= source[8])) ||                        // 5040
        (srcBitmask == (ARY_FLAG | REARG_FLAG) && (source[7].length <= source[8]) && (bitmask == CURRY_FLAG));         // 5041
                                                                                                                       // 5042
      // Exit early if metadata can't be merged.                                                                       // 5043
      if (!(isCommon || isCombo)) {                                                                                    // 5044
        return data;                                                                                                   // 5045
      }                                                                                                                // 5046
      // Use source `thisArg` if available.                                                                            // 5047
      if (srcBitmask & BIND_FLAG) {                                                                                    // 5048
        data[2] = source[2];                                                                                           // 5049
        // Set when currying a bound function.                                                                         // 5050
        newBitmask |= (bitmask & BIND_FLAG) ? 0 : CURRY_BOUND_FLAG;                                                    // 5051
      }                                                                                                                // 5052
      // Compose partial arguments.                                                                                    // 5053
      var value = source[3];                                                                                           // 5054
      if (value) {                                                                                                     // 5055
        var partials = data[3];                                                                                        // 5056
        data[3] = partials ? composeArgs(partials, value, source[4]) : copyArray(value);                               // 5057
        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : copyArray(source[4]);                              // 5058
      }                                                                                                                // 5059
      // Compose partial right arguments.                                                                              // 5060
      value = source[5];                                                                                               // 5061
      if (value) {                                                                                                     // 5062
        partials = data[5];                                                                                            // 5063
        data[5] = partials ? composeArgsRight(partials, value, source[6]) : copyArray(value);                          // 5064
        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : copyArray(source[6]);                              // 5065
      }                                                                                                                // 5066
      // Use source `argPos` if available.                                                                             // 5067
      value = source[7];                                                                                               // 5068
      if (value) {                                                                                                     // 5069
        data[7] = copyArray(value);                                                                                    // 5070
      }                                                                                                                // 5071
      // Use source `ary` if it's smaller.                                                                             // 5072
      if (srcBitmask & ARY_FLAG) {                                                                                     // 5073
        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);                                         // 5074
      }                                                                                                                // 5075
      // Use source `arity` if one is not provided.                                                                    // 5076
      if (data[9] == null) {                                                                                           // 5077
        data[9] = source[9];                                                                                           // 5078
      }                                                                                                                // 5079
      // Use source `func` and merge bitmasks.                                                                         // 5080
      data[0] = source[0];                                                                                             // 5081
      data[1] = newBitmask;                                                                                            // 5082
                                                                                                                       // 5083
      return data;                                                                                                     // 5084
    }                                                                                                                  // 5085
                                                                                                                       // 5086
    /**                                                                                                                // 5087
     * Used by `_.defaultsDeep` to customize its `_.merge` use.                                                        // 5088
     *                                                                                                                 // 5089
     * @private                                                                                                        // 5090
     * @param {*} objValue The destination value.                                                                      // 5091
     * @param {*} srcValue The source value.                                                                           // 5092
     * @param {string} key The key of the property to merge.                                                           // 5093
     * @param {Object} object The parent object of `objValue`.                                                         // 5094
     * @param {Object} source The parent object of `srcValue`.                                                         // 5095
     * @param {Object} [stack] Tracks traversed source values and their merged counterparts.                           // 5096
     * @returns {*} Returns the value to assign.                                                                       // 5097
     */                                                                                                                // 5098
    function mergeDefaults(objValue, srcValue, key, object, source, stack) {                                           // 5099
      if (isObject(objValue) && isObject(srcValue)) {                                                                  // 5100
        stack.set(srcValue, objValue);                                                                                 // 5101
        baseMerge(objValue, srcValue, mergeDefaults, stack);                                                           // 5102
      }                                                                                                                // 5103
      return objValue === undefined ? baseClone(srcValue) : objValue;                                                  // 5104
    }                                                                                                                  // 5105
                                                                                                                       // 5106
    /**                                                                                                                // 5107
     * Gets the parent value at `path` of `object`.                                                                    // 5108
     *                                                                                                                 // 5109
     * @private                                                                                                        // 5110
     * @param {Object} object The object to query.                                                                     // 5111
     * @param {Array} path The path to get the parent value of.                                                        // 5112
     * @returns {*} Returns the parent value.                                                                          // 5113
     */                                                                                                                // 5114
    function parent(object, path) {                                                                                    // 5115
      return path.length == 1 ? object : get(object, baseSlice(path, 0, -1));                                          // 5116
    }                                                                                                                  // 5117
                                                                                                                       // 5118
    /**                                                                                                                // 5119
     * Reorder `array` according to the specified indexes where the element at                                         // 5120
     * the first index is assigned as the first element, the element at                                                // 5121
     * the second index is assigned as the second element, and so on.                                                  // 5122
     *                                                                                                                 // 5123
     * @private                                                                                                        // 5124
     * @param {Array} array The array to reorder.                                                                      // 5125
     * @param {Array} indexes The arranged array indexes.                                                              // 5126
     * @returns {Array} Returns `array`.                                                                               // 5127
     */                                                                                                                // 5128
    function reorder(array, indexes) {                                                                                 // 5129
      var arrLength = array.length,                                                                                    // 5130
          length = nativeMin(indexes.length, arrLength),                                                               // 5131
          oldArray = copyArray(array);                                                                                 // 5132
                                                                                                                       // 5133
      while (length--) {                                                                                               // 5134
        var index = indexes[length];                                                                                   // 5135
        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;                                       // 5136
      }                                                                                                                // 5137
      return array;                                                                                                    // 5138
    }                                                                                                                  // 5139
                                                                                                                       // 5140
    /**                                                                                                                // 5141
     * Sets metadata for `func`.                                                                                       // 5142
     *                                                                                                                 // 5143
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short                                        // 5144
     * period of time, it will trip its breaker and transition to an identity function                                 // 5145
     * to avoid garbage collection pauses in V8. See [V8 issue 2070](https://code.google.com/p/v8/issues/detail?id=2070)
     * for more details.                                                                                               // 5147
     *                                                                                                                 // 5148
     * @private                                                                                                        // 5149
     * @param {Function} func The function to associate metadata with.                                                 // 5150
     * @param {*} data The metadata.                                                                                   // 5151
     * @returns {Function} Returns `func`.                                                                             // 5152
     */                                                                                                                // 5153
    var setData = (function() {                                                                                        // 5154
      var count = 0,                                                                                                   // 5155
          lastCalled = 0;                                                                                              // 5156
                                                                                                                       // 5157
      return function(key, value) {                                                                                    // 5158
        var stamp = now(),                                                                                             // 5159
            remaining = HOT_SPAN - (stamp - lastCalled);                                                               // 5160
                                                                                                                       // 5161
        lastCalled = stamp;                                                                                            // 5162
        if (remaining > 0) {                                                                                           // 5163
          if (++count >= HOT_COUNT) {                                                                                  // 5164
            return key;                                                                                                // 5165
          }                                                                                                            // 5166
        } else {                                                                                                       // 5167
          count = 0;                                                                                                   // 5168
        }                                                                                                              // 5169
        return baseSetData(key, value);                                                                                // 5170
      };                                                                                                               // 5171
    }());                                                                                                              // 5172
                                                                                                                       // 5173
    /**                                                                                                                // 5174
     * Converts `string` to a property path array.                                                                     // 5175
     *                                                                                                                 // 5176
     * @private                                                                                                        // 5177
     * @param {string} string The string to convert.                                                                   // 5178
     * @returns {Array} Returns the property path array.                                                               // 5179
     */                                                                                                                // 5180
    function stringToPath(string) {                                                                                    // 5181
      var result = [];                                                                                                 // 5182
      toString(string).replace(rePropName, function(match, number, quote, string) {                                    // 5183
        result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));                                   // 5184
      });                                                                                                              // 5185
      return result;                                                                                                   // 5186
    }                                                                                                                  // 5187
                                                                                                                       // 5188
    /**                                                                                                                // 5189
     * Converts `value` to an array-like object if it's not one.                                                       // 5190
     *                                                                                                                 // 5191
     * @private                                                                                                        // 5192
     * @param {*} value The value to process.                                                                          // 5193
     * @returns {Array} Returns the array-like object.                                                                 // 5194
     */                                                                                                                // 5195
    function toArrayLikeObject(value) {                                                                                // 5196
      return isArrayLikeObject(value) ? value : [];                                                                    // 5197
    }                                                                                                                  // 5198
                                                                                                                       // 5199
    /**                                                                                                                // 5200
     * Converts `value` to a function if it's not one.                                                                 // 5201
     *                                                                                                                 // 5202
     * @private                                                                                                        // 5203
     * @param {*} value The value to process.                                                                          // 5204
     * @returns {Function} Returns the function.                                                                       // 5205
     */                                                                                                                // 5206
    function toFunction(value) {                                                                                       // 5207
      return typeof value == 'function' ? value : identity;                                                            // 5208
    }                                                                                                                  // 5209
                                                                                                                       // 5210
    /**                                                                                                                // 5211
     * Creates a clone of `wrapper`.                                                                                   // 5212
     *                                                                                                                 // 5213
     * @private                                                                                                        // 5214
     * @param {Object} wrapper The wrapper to clone.                                                                   // 5215
     * @returns {Object} Returns the cloned wrapper.                                                                   // 5216
     */                                                                                                                // 5217
    function wrapperClone(wrapper) {                                                                                   // 5218
      if (wrapper instanceof LazyWrapper) {                                                                            // 5219
        return wrapper.clone();                                                                                        // 5220
      }                                                                                                                // 5221
      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);                                          // 5222
      result.__actions__ = copyArray(wrapper.__actions__);                                                             // 5223
      result.__index__  = wrapper.__index__;                                                                           // 5224
      result.__values__ = wrapper.__values__;                                                                          // 5225
      return result;                                                                                                   // 5226
    }                                                                                                                  // 5227
                                                                                                                       // 5228
    /*------------------------------------------------------------------------*/                                       // 5229
                                                                                                                       // 5230
    /**                                                                                                                // 5231
     * Creates an array of elements split into groups the length of `size`.                                            // 5232
     * If `array` can't be split evenly, the final chunk will be the remaining                                         // 5233
     * elements.                                                                                                       // 5234
     *                                                                                                                 // 5235
     * @static                                                                                                         // 5236
     * @memberOf _                                                                                                     // 5237
     * @category Array                                                                                                 // 5238
     * @param {Array} array The array to process.                                                                      // 5239
     * @param {number} [size=0] The length of each chunk.                                                              // 5240
     * @returns {Array} Returns the new array containing chunks.                                                       // 5241
     * @example                                                                                                        // 5242
     *                                                                                                                 // 5243
     * _.chunk(['a', 'b', 'c', 'd'], 2);                                                                               // 5244
     * // => [['a', 'b'], ['c', 'd']]                                                                                  // 5245
     *                                                                                                                 // 5246
     * _.chunk(['a', 'b', 'c', 'd'], 3);                                                                               // 5247
     * // => [['a', 'b', 'c'], ['d']]                                                                                  // 5248
     */                                                                                                                // 5249
    function chunk(array, size) {                                                                                      // 5250
      size = nativeMax(toInteger(size), 0);                                                                            // 5251
                                                                                                                       // 5252
      var length = array ? array.length : 0;                                                                           // 5253
      if (!length || size < 1) {                                                                                       // 5254
        return [];                                                                                                     // 5255
      }                                                                                                                // 5256
      var index = 0,                                                                                                   // 5257
          resIndex = -1,                                                                                               // 5258
          result = Array(nativeCeil(length / size));                                                                   // 5259
                                                                                                                       // 5260
      while (index < length) {                                                                                         // 5261
        result[++resIndex] = baseSlice(array, index, (index += size));                                                 // 5262
      }                                                                                                                // 5263
      return result;                                                                                                   // 5264
    }                                                                                                                  // 5265
                                                                                                                       // 5266
    /**                                                                                                                // 5267
     * Creates an array with all falsey values removed. The values `false`, `null`,                                    // 5268
     * `0`, `""`, `undefined`, and `NaN` are falsey.                                                                   // 5269
     *                                                                                                                 // 5270
     * @static                                                                                                         // 5271
     * @memberOf _                                                                                                     // 5272
     * @category Array                                                                                                 // 5273
     * @param {Array} array The array to compact.                                                                      // 5274
     * @returns {Array} Returns the new array of filtered values.                                                      // 5275
     * @example                                                                                                        // 5276
     *                                                                                                                 // 5277
     * _.compact([0, 1, false, 2, '', 3]);                                                                             // 5278
     * // => [1, 2, 3]                                                                                                 // 5279
     */                                                                                                                // 5280
    function compact(array) {                                                                                          // 5281
      var index = -1,                                                                                                  // 5282
          length = array ? array.length : 0,                                                                           // 5283
          resIndex = -1,                                                                                               // 5284
          result = [];                                                                                                 // 5285
                                                                                                                       // 5286
      while (++index < length) {                                                                                       // 5287
        var value = array[index];                                                                                      // 5288
        if (value) {                                                                                                   // 5289
          result[++resIndex] = value;                                                                                  // 5290
        }                                                                                                              // 5291
      }                                                                                                                // 5292
      return result;                                                                                                   // 5293
    }                                                                                                                  // 5294
                                                                                                                       // 5295
    /**                                                                                                                // 5296
     * Creates a new array concatenating `array` with any additional arrays                                            // 5297
     * and/or values.                                                                                                  // 5298
     *                                                                                                                 // 5299
     * @static                                                                                                         // 5300
     * @memberOf _                                                                                                     // 5301
     * @category Array                                                                                                 // 5302
     * @param {Array} array The array to concatenate.                                                                  // 5303
     * @param {...*} [values] The values to concatenate.                                                               // 5304
     * @returns {Array} Returns the new concatenated array.                                                            // 5305
     * @example                                                                                                        // 5306
     *                                                                                                                 // 5307
     * var array = [1];                                                                                                // 5308
     * var other = _.concat(array, 2, [3], [[4]]);                                                                     // 5309
     *                                                                                                                 // 5310
     * console.log(other);                                                                                             // 5311
     * // => [1, 2, 3, [4]]                                                                                            // 5312
     *                                                                                                                 // 5313
     * console.log(array);                                                                                             // 5314
     * // => [1]                                                                                                       // 5315
     */                                                                                                                // 5316
    var concat = rest(function(array, values) {                                                                        // 5317
      values = baseFlatten(values);                                                                                    // 5318
      return arrayConcat(isArray(array) ? array : [Object(array)], values);                                            // 5319
    });                                                                                                                // 5320
                                                                                                                       // 5321
    /**                                                                                                                // 5322
     * Creates an array of unique `array` values not included in the other                                             // 5323
     * provided arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)          // 5324
     * for equality comparisons.                                                                                       // 5325
     *                                                                                                                 // 5326
     * @static                                                                                                         // 5327
     * @memberOf _                                                                                                     // 5328
     * @category Array                                                                                                 // 5329
     * @param {Array} array The array to inspect.                                                                      // 5330
     * @param {...Array} [values] The values to exclude.                                                               // 5331
     * @returns {Array} Returns the new array of filtered values.                                                      // 5332
     * @example                                                                                                        // 5333
     *                                                                                                                 // 5334
     * _.difference([3, 2, 1], [4, 2]);                                                                                // 5335
     * // => [3, 1]                                                                                                    // 5336
     */                                                                                                                // 5337
    var difference = rest(function(array, values) {                                                                    // 5338
      return isArrayLikeObject(array)                                                                                  // 5339
        ? baseDifference(array, baseFlatten(values, false, true))                                                      // 5340
        : [];                                                                                                          // 5341
    });                                                                                                                // 5342
                                                                                                                       // 5343
    /**                                                                                                                // 5344
     * This method is like `_.difference` except that it accepts `iteratee` which                                      // 5345
     * is invoked for each element of `array` and `values` to generate the criterion                                   // 5346
     * by which uniqueness is computed. The iteratee is invoked with one argument: (value).                            // 5347
     *                                                                                                                 // 5348
     * @static                                                                                                         // 5349
     * @memberOf _                                                                                                     // 5350
     * @category Array                                                                                                 // 5351
     * @param {Array} array The array to inspect.                                                                      // 5352
     * @param {...Array} [values] The values to exclude.                                                               // 5353
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.                         // 5354
     * @returns {Array} Returns the new array of filtered values.                                                      // 5355
     * @example                                                                                                        // 5356
     *                                                                                                                 // 5357
     * _.differenceBy([3.1, 2.2, 1.3], [4.4, 2.5], Math.floor);                                                        // 5358
     * // => [3.1, 1.3]                                                                                                // 5359
     *                                                                                                                 // 5360
     * // using the `_.property` iteratee shorthand                                                                    // 5361
     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');                                                    // 5362
     * // => [{ 'x': 2 }]                                                                                              // 5363
     */                                                                                                                // 5364
    var differenceBy = rest(function(array, values) {                                                                  // 5365
      var iteratee = last(values);                                                                                     // 5366
      if (isArrayLikeObject(iteratee)) {                                                                               // 5367
        iteratee = undefined;                                                                                          // 5368
      }                                                                                                                // 5369
      return isArrayLikeObject(array)                                                                                  // 5370
        ? baseDifference(array, baseFlatten(values, false, true), getIteratee(iteratee))                               // 5371
        : [];                                                                                                          // 5372
    });                                                                                                                // 5373
                                                                                                                       // 5374
    /**                                                                                                                // 5375
     * This method is like `_.difference` except that it accepts `comparator`                                          // 5376
     * which is invoked to compare elements of `array` to `values`. The comparator                                     // 5377
     * is invoked with two arguments: (arrVal, othVal).                                                                // 5378
     *                                                                                                                 // 5379
     * @static                                                                                                         // 5380
     * @memberOf _                                                                                                     // 5381
     * @category Array                                                                                                 // 5382
     * @param {Array} array The array to inspect.                                                                      // 5383
     * @param {...Array} [values] The values to exclude.                                                               // 5384
     * @param {Function} [comparator] The comparator invoked per element.                                              // 5385
     * @returns {Array} Returns the new array of filtered values.                                                      // 5386
     * @example                                                                                                        // 5387
     *                                                                                                                 // 5388
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];                                                         // 5389
     *                                                                                                                 // 5390
     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);                                                     // 5391
     * // => [{ 'x': 2, 'y': 1 }]                                                                                      // 5392
     */                                                                                                                // 5393
    var differenceWith = rest(function(array, values) {                                                                // 5394
      var comparator = last(values);                                                                                   // 5395
      if (isArrayLikeObject(comparator)) {                                                                             // 5396
        comparator = undefined;                                                                                        // 5397
      }                                                                                                                // 5398
      return isArrayLikeObject(array)                                                                                  // 5399
        ? baseDifference(array, baseFlatten(values, false, true), undefined, comparator)                               // 5400
        : [];                                                                                                          // 5401
    });                                                                                                                // 5402
                                                                                                                       // 5403
    /**                                                                                                                // 5404
     * Creates a slice of `array` with `n` elements dropped from the beginning.                                        // 5405
     *                                                                                                                 // 5406
     * @static                                                                                                         // 5407
     * @memberOf _                                                                                                     // 5408
     * @category Array                                                                                                 // 5409
     * @param {Array} array The array to query.                                                                        // 5410
     * @param {number} [n=1] The number of elements to drop.                                                           // 5411
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.                                 // 5412
     * @returns {Array} Returns the slice of `array`.                                                                  // 5413
     * @example                                                                                                        // 5414
     *                                                                                                                 // 5415
     * _.drop([1, 2, 3]);                                                                                              // 5416
     * // => [2, 3]                                                                                                    // 5417
     *                                                                                                                 // 5418
     * _.drop([1, 2, 3], 2);                                                                                           // 5419
     * // => [3]                                                                                                       // 5420
     *                                                                                                                 // 5421
     * _.drop([1, 2, 3], 5);                                                                                           // 5422
     * // => []                                                                                                        // 5423
     *                                                                                                                 // 5424
     * _.drop([1, 2, 3], 0);                                                                                           // 5425
     * // => [1, 2, 3]                                                                                                 // 5426
     */                                                                                                                // 5427
    function drop(array, n, guard) {                                                                                   // 5428
      var length = array ? array.length : 0;                                                                           // 5429
      if (!length) {                                                                                                   // 5430
        return [];                                                                                                     // 5431
      }                                                                                                                // 5432
      n = (guard || n === undefined) ? 1 : toInteger(n);                                                               // 5433
      return baseSlice(array, n < 0 ? 0 : n, length);                                                                  // 5434
    }                                                                                                                  // 5435
                                                                                                                       // 5436
    /**                                                                                                                // 5437
     * Creates a slice of `array` with `n` elements dropped from the end.                                              // 5438
     *                                                                                                                 // 5439
     * @static                                                                                                         // 5440
     * @memberOf _                                                                                                     // 5441
     * @category Array                                                                                                 // 5442
     * @param {Array} array The array to query.                                                                        // 5443
     * @param {number} [n=1] The number of elements to drop.                                                           // 5444
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.                                 // 5445
     * @returns {Array} Returns the slice of `array`.                                                                  // 5446
     * @example                                                                                                        // 5447
     *                                                                                                                 // 5448
     * _.dropRight([1, 2, 3]);                                                                                         // 5449
     * // => [1, 2]                                                                                                    // 5450
     *                                                                                                                 // 5451
     * _.dropRight([1, 2, 3], 2);                                                                                      // 5452
     * // => [1]                                                                                                       // 5453
     *                                                                                                                 // 5454
     * _.dropRight([1, 2, 3], 5);                                                                                      // 5455
     * // => []                                                                                                        // 5456
     *                                                                                                                 // 5457
     * _.dropRight([1, 2, 3], 0);                                                                                      // 5458
     * // => [1, 2, 3]                                                                                                 // 5459
     */                                                                                                                // 5460
    function dropRight(array, n, guard) {                                                                              // 5461
      var length = array ? array.length : 0;                                                                           // 5462
      if (!length) {                                                                                                   // 5463
        return [];                                                                                                     // 5464
      }                                                                                                                // 5465
      n = (guard || n === undefined) ? 1 : toInteger(n);                                                               // 5466
      n = length - n;                                                                                                  // 5467
      return baseSlice(array, 0, n < 0 ? 0 : n);                                                                       // 5468
    }                                                                                                                  // 5469
                                                                                                                       // 5470
    /**                                                                                                                // 5471
     * Creates a slice of `array` excluding elements dropped from the end.                                             // 5472
     * Elements are dropped until `predicate` returns falsey. The predicate is                                         // 5473
     * invoked with three arguments: (value, index, array).                                                            // 5474
     *                                                                                                                 // 5475
     * @static                                                                                                         // 5476
     * @memberOf _                                                                                                     // 5477
     * @category Array                                                                                                 // 5478
     * @param {Array} array The array to query.                                                                        // 5479
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.                      // 5480
     * @returns {Array} Returns the slice of `array`.                                                                  // 5481
     * @example                                                                                                        // 5482
     *                                                                                                                 // 5483
     * var users = [                                                                                                   // 5484
     *   { 'user': 'barney',  'active': true },                                                                        // 5485
     *   { 'user': 'fred',    'active': false },                                                                       // 5486
     *   { 'user': 'pebbles', 'active': false }                                                                        // 5487
     * ];                                                                                                              // 5488
     *                                                                                                                 // 5489
     * _.dropRightWhile(users, function(o) { return !o.active; });                                                     // 5490
     * // => objects for ['barney']                                                                                    // 5491
     *                                                                                                                 // 5492
     * // using the `_.matches` iteratee shorthand                                                                     // 5493
     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });                                                // 5494
     * // => objects for ['barney', 'fred']                                                                            // 5495
     *                                                                                                                 // 5496
     * // using the `_.matchesProperty` iteratee shorthand                                                             // 5497
     * _.dropRightWhile(users, ['active', false]);                                                                     // 5498
     * // => objects for ['barney']                                                                                    // 5499
     *                                                                                                                 // 5500
     * // using the `_.property` iteratee shorthand                                                                    // 5501
     * _.dropRightWhile(users, 'active');                                                                              // 5502
     * // => objects for ['barney', 'fred', 'pebbles']                                                                 // 5503
     */                                                                                                                // 5504
    function dropRightWhile(array, predicate) {                                                                        // 5505
      return (array && array.length)                                                                                   // 5506
        ? baseWhile(array, getIteratee(predicate, 3), true, true)                                                      // 5507
        : [];                                                                                                          // 5508
    }                                                                                                                  // 5509
                                                                                                                       // 5510
    /**                                                                                                                // 5511
     * Creates a slice of `array` excluding elements dropped from the beginning.                                       // 5512
     * Elements are dropped until `predicate` returns falsey. The predicate is                                         // 5513
     * invoked with three arguments: (value, index, array).                                                            // 5514
     *                                                                                                                 // 5515
     * @static                                                                                                         // 5516
     * @memberOf _                                                                                                     // 5517
     * @category Array                                                                                                 // 5518
     * @param {Array} array The array to query.                                                                        // 5519
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.                      // 5520
     * @returns {Array} Returns the slice of `array`.                                                                  // 5521
     * @example                                                                                                        // 5522
     *                                                                                                                 // 5523
     * var users = [                                                                                                   // 5524
     *   { 'user': 'barney',  'active': false },                                                                       // 5525
     *   { 'user': 'fred',    'active': false },                                                                       // 5526
     *   { 'user': 'pebbles', 'active': true }                                                                         // 5527
     * ];                                                                                                              // 5528
     *                                                                                                                 // 5529
     * _.dropWhile(users, function(o) { return !o.active; });                                                          // 5530
     * // => objects for ['pebbles']                                                                                   // 5531
     *                                                                                                                 // 5532
     * // using the `_.matches` iteratee shorthand                                                                     // 5533
     * _.dropWhile(users, { 'user': 'barney', 'active': false });                                                      // 5534
     * // => objects for ['fred', 'pebbles']                                                                           // 5535
     *                                                                                                                 // 5536
     * // using the `_.matchesProperty` iteratee shorthand                                                             // 5537
     * _.dropWhile(users, ['active', false]);                                                                          // 5538
     * // => objects for ['pebbles']                                                                                   // 5539
     *                                                                                                                 // 5540
     * // using the `_.property` iteratee shorthand                                                                    // 5541
     * _.dropWhile(users, 'active');                                                                                   // 5542
     * // => objects for ['barney', 'fred', 'pebbles']                                                                 // 5543
     */                                                                                                                // 5544
    function dropWhile(array, predicate) {                                                                             // 5545
      return (array && array.length)                                                                                   // 5546
        ? baseWhile(array, getIteratee(predicate, 3), true)                                                            // 5547
        : [];                                                                                                          // 5548
    }                                                                                                                  // 5549
                                                                                                                       // 5550
    /**                                                                                                                // 5551
     * Fills elements of `array` with `value` from `start` up to, but not                                              // 5552
     * including, `end`.                                                                                               // 5553
     *                                                                                                                 // 5554
     * **Note:** This method mutates `array`.                                                                          // 5555
     *                                                                                                                 // 5556
     * @static                                                                                                         // 5557
     * @memberOf _                                                                                                     // 5558
     * @category Array                                                                                                 // 5559
     * @param {Array} array The array to fill.                                                                         // 5560
     * @param {*} value The value to fill `array` with.                                                                // 5561
     * @param {number} [start=0] The start position.                                                                   // 5562
     * @param {number} [end=array.length] The end position.                                                            // 5563
     * @returns {Array} Returns `array`.                                                                               // 5564
     * @example                                                                                                        // 5565
     *                                                                                                                 // 5566
     * var array = [1, 2, 3];                                                                                          // 5567
     *                                                                                                                 // 5568
     * _.fill(array, 'a');                                                                                             // 5569
     * console.log(array);                                                                                             // 5570
     * // => ['a', 'a', 'a']                                                                                           // 5571
     *                                                                                                                 // 5572
     * _.fill(Array(3), 2);                                                                                            // 5573
     * // => [2, 2, 2]                                                                                                 // 5574
     *                                                                                                                 // 5575
     * _.fill([4, 6, 8, 10], '*', 1, 3);                                                                               // 5576
     * // => [4, '*', '*', 10]                                                                                         // 5577
     */                                                                                                                // 5578
    function fill(array, value, start, end) {                                                                          // 5579
      var length = array ? array.length : 0;                                                                           // 5580
      if (!length) {                                                                                                   // 5581
        return [];                                                                                                     // 5582
      }                                                                                                                // 5583
      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {                                  // 5584
        start = 0;                                                                                                     // 5585
        end = length;                                                                                                  // 5586
      }                                                                                                                // 5587
      return baseFill(array, value, start, end);                                                                       // 5588
    }                                                                                                                  // 5589
                                                                                                                       // 5590
    /**                                                                                                                // 5591
     * This method is like `_.find` except that it returns the index of the first                                      // 5592
     * element `predicate` returns truthy for instead of the element itself.                                           // 5593
     *                                                                                                                 // 5594
     * @static                                                                                                         // 5595
     * @memberOf _                                                                                                     // 5596
     * @category Array                                                                                                 // 5597
     * @param {Array} array The array to search.                                                                       // 5598
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.                      // 5599
     * @returns {number} Returns the index of the found element, else `-1`.                                            // 5600
     * @example                                                                                                        // 5601
     *                                                                                                                 // 5602
     * var users = [                                                                                                   // 5603
     *   { 'user': 'barney',  'active': false },                                                                       // 5604
     *   { 'user': 'fred',    'active': false },                                                                       // 5605
     *   { 'user': 'pebbles', 'active': true }                                                                         // 5606
     * ];                                                                                                              // 5607
     *                                                                                                                 // 5608
     * _.findIndex(users, function(o) { return o.user == 'barney'; });                                                 // 5609
     * // => 0                                                                                                         // 5610
     *                                                                                                                 // 5611
     * // using the `_.matches` iteratee shorthand                                                                     // 5612
     * _.findIndex(users, { 'user': 'fred', 'active': false });                                                        // 5613
     * // => 1                                                                                                         // 5614
     *                                                                                                                 // 5615
     * // using the `_.matchesProperty` iteratee shorthand                                                             // 5616
     * _.findIndex(users, ['active', false]);                                                                          // 5617
     * // => 0                                                                                                         // 5618
     *                                                                                                                 // 5619
     * // using the `_.property` iteratee shorthand                                                                    // 5620
     * _.findIndex(users, 'active');                                                                                   // 5621
     * // => 2                                                                                                         // 5622
     */                                                                                                                // 5623
    function findIndex(array, predicate) {                                                                             // 5624
      return (array && array.length)                                                                                   // 5625
        ? baseFindIndex(array, getIteratee(predicate, 3))                                                              // 5626
        : -1;                                                                                                          // 5627
    }                                                                                                                  // 5628
                                                                                                                       // 5629
    /**                                                                                                                // 5630
     * This method is like `_.findIndex` except that it iterates over elements                                         // 5631
     * of `collection` from right to left.                                                                             // 5632
     *                                                                                                                 // 5633
     * @static                                                                                                         // 5634
     * @memberOf _                                                                                                     // 5635
     * @category Array                                                                                                 // 5636
     * @param {Array} array The array to search.                                                                       // 5637
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.                      // 5638
     * @returns {number} Returns the index of the found element, else `-1`.                                            // 5639
     * @example                                                                                                        // 5640
     *                                                                                                                 // 5641
     * var users = [                                                                                                   // 5642
     *   { 'user': 'barney',  'active': true },                                                                        // 5643
     *   { 'user': 'fred',    'active': false },                                                                       // 5644
     *   { 'user': 'pebbles', 'active': false }                                                                        // 5645
     * ];                                                                                                              // 5646
     *                                                                                                                 // 5647
     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });                                            // 5648
     * // => 2                                                                                                         // 5649
     *                                                                                                                 // 5650
     * // using the `_.matches` iteratee shorthand                                                                     // 5651
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });                                                   // 5652
     * // => 0                                                                                                         // 5653
     *                                                                                                                 // 5654
     * // using the `_.matchesProperty` iteratee shorthand                                                             // 5655
     * _.findLastIndex(users, ['active', false]);                                                                      // 5656
     * // => 2                                                                                                         // 5657
     *                                                                                                                 // 5658
     * // using the `_.property` iteratee shorthand                                                                    // 5659
     * _.findLastIndex(users, 'active');                                                                               // 5660
     * // => 0                                                                                                         // 5661
     */                                                                                                                // 5662
    function findLastIndex(array, predicate) {                                                                         // 5663
      return (array && array.length)                                                                                   // 5664
        ? baseFindIndex(array, getIteratee(predicate, 3), true)                                                        // 5665
        : -1;                                                                                                          // 5666
    }                                                                                                                  // 5667
                                                                                                                       // 5668
    /**                                                                                                                // 5669
     * Creates an array of flattened values by running each element in `array`                                         // 5670
     * through `iteratee` and concating its result to the other mapped values.                                         // 5671
     * The iteratee is invoked with three arguments: (value, index|key, array).                                        // 5672
     *                                                                                                                 // 5673
     * @static                                                                                                         // 5674
     * @memberOf _                                                                                                     // 5675
     * @category Array                                                                                                 // 5676
     * @param {Array} array The array to iterate over.                                                                 // 5677
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked per iteration.                       // 5678
     * @returns {Array} Returns the new array.                                                                         // 5679
     * @example                                                                                                        // 5680
     *                                                                                                                 // 5681
     * function duplicate(n) {                                                                                         // 5682
     *   return [n, n];                                                                                                // 5683
     * }                                                                                                               // 5684
     *                                                                                                                 // 5685
     * _.flatMap([1, 2], duplicate);                                                                                   // 5686
     * // => [1, 1, 2, 2]                                                                                              // 5687
     */                                                                                                                // 5688
    function flatMap(array, iteratee) {                                                                                // 5689
      var length = array ? array.length : 0;                                                                           // 5690
      return length ? baseFlatten(arrayMap(array, getIteratee(iteratee, 3))) : [];                                     // 5691
    }                                                                                                                  // 5692
                                                                                                                       // 5693
    /**                                                                                                                // 5694
     * Flattens `array` a single level.                                                                                // 5695
     *                                                                                                                 // 5696
     * @static                                                                                                         // 5697
     * @memberOf _                                                                                                     // 5698
     * @category Array                                                                                                 // 5699
     * @param {Array} array The array to flatten.                                                                      // 5700
     * @returns {Array} Returns the new flattened array.                                                               // 5701
     * @example                                                                                                        // 5702
     *                                                                                                                 // 5703
     * _.flatten([1, [2, 3, [4]]]);                                                                                    // 5704
     * // => [1, 2, 3, [4]]                                                                                            // 5705
     */                                                                                                                // 5706
    function flatten(array) {                                                                                          // 5707
      var length = array ? array.length : 0;                                                                           // 5708
      return length ? baseFlatten(array) : [];                                                                         // 5709
    }                                                                                                                  // 5710
                                                                                                                       // 5711
    /**                                                                                                                // 5712
     * This method is like `_.flatten` except that it recursively flattens `array`.                                    // 5713
     *                                                                                                                 // 5714
     * @static                                                                                                         // 5715
     * @memberOf _                                                                                                     // 5716
     * @category Array                                                                                                 // 5717
     * @param {Array} array The array to recursively flatten.                                                          // 5718
     * @returns {Array} Returns the new flattened array.                                                               // 5719
     * @example                                                                                                        // 5720
     *                                                                                                                 // 5721
     * _.flattenDeep([1, [2, 3, [4]]]);                                                                                // 5722
     * // => [1, 2, 3, 4]                                                                                              // 5723
     */                                                                                                                // 5724
    function flattenDeep(array) {                                                                                      // 5725
      var length = array ? array.length : 0;                                                                           // 5726
      return length ? baseFlatten(array, true) : [];                                                                   // 5727
    }                                                                                                                  // 5728
                                                                                                                       // 5729
    /**                                                                                                                // 5730
     * The inverse of `_.toPairs`; this method returns an object composed                                              // 5731
     * from key-value `pairs`.                                                                                         // 5732
     *                                                                                                                 // 5733
     * @static                                                                                                         // 5734
     * @memberOf _                                                                                                     // 5735
     * @category Array                                                                                                 // 5736
     * @param {Array} pairs The key-value pairs.                                                                       // 5737
     * @returns {Object} Returns the new object.                                                                       // 5738
     * @example                                                                                                        // 5739
     *                                                                                                                 // 5740
     * _.fromPairs([['fred', 30], ['barney', 40]]);                                                                    // 5741
     * // => { 'fred': 30, 'barney': 40 }                                                                              // 5742
     */                                                                                                                // 5743
    function fromPairs(pairs) {                                                                                        // 5744
      var index = -1,                                                                                                  // 5745
          length = pairs ? pairs.length : 0,                                                                           // 5746
          result = {};                                                                                                 // 5747
                                                                                                                       // 5748
      while (++index < length) {                                                                                       // 5749
        var pair = pairs[index];                                                                                       // 5750
        baseSet(result, pair[0], pair[1]);                                                                             // 5751
      }                                                                                                                // 5752
      return result;                                                                                                   // 5753
    }                                                                                                                  // 5754
                                                                                                                       // 5755
    /**                                                                                                                // 5756
     * Gets the first element of `array`.                                                                              // 5757
     *                                                                                                                 // 5758
     * @static                                                                                                         // 5759
     * @memberOf _                                                                                                     // 5760
     * @alias first                                                                                                    // 5761
     * @category Array                                                                                                 // 5762
     * @param {Array} array The array to query.                                                                        // 5763
     * @returns {*} Returns the first element of `array`.                                                              // 5764
     * @example                                                                                                        // 5765
     *                                                                                                                 // 5766
     * _.head([1, 2, 3]);                                                                                              // 5767
     * // => 1                                                                                                         // 5768
     *                                                                                                                 // 5769
     * _.head([]);                                                                                                     // 5770
     * // => undefined                                                                                                 // 5771
     */                                                                                                                // 5772
    function head(array) {                                                                                             // 5773
      return array ? array[0] : undefined;                                                                             // 5774
    }                                                                                                                  // 5775
                                                                                                                       // 5776
    /**                                                                                                                // 5777
     * Gets the index at which the first occurrence of `value` is found in `array`                                     // 5778
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)                          // 5779
     * for equality comparisons. If `fromIndex` is negative, it's used as the offset                                   // 5780
     * from the end of `array`. If `array` is sorted providing `true` for `fromIndex`                                  // 5781
     * performs a faster binary search.                                                                                // 5782
     *                                                                                                                 // 5783
     * @static                                                                                                         // 5784
     * @memberOf _                                                                                                     // 5785
     * @category Array                                                                                                 // 5786
     * @param {Array} array The array to search.                                                                       // 5787
     * @param {*} value The value to search for.                                                                       // 5788
     * @param {number} [fromIndex=0] The index to search from.                                                         // 5789
     * @returns {number} Returns the index of the matched value, else `-1`.                                            // 5790
     * @example                                                                                                        // 5791
     *                                                                                                                 // 5792
     * _.indexOf([1, 2, 1, 2], 2);                                                                                     // 5793
     * // => 1                                                                                                         // 5794
     *                                                                                                                 // 5795
     * // using `fromIndex`                                                                                            // 5796
     * _.indexOf([1, 2, 1, 2], 2, 2);                                                                                  // 5797
     * // => 3                                                                                                         // 5798
     */                                                                                                                // 5799
    function indexOf(array, value, fromIndex) {                                                                        // 5800
      var length = array ? array.length : 0;                                                                           // 5801
      if (!length) {                                                                                                   // 5802
        return -1;                                                                                                     // 5803
      }                                                                                                                // 5804
      fromIndex = toInteger(fromIndex);                                                                                // 5805
      if (fromIndex < 0) {                                                                                             // 5806
        fromIndex = nativeMax(length + fromIndex, 0);                                                                  // 5807
      }                                                                                                                // 5808
      return baseIndexOf(array, value, fromIndex);                                                                     // 5809
    }                                                                                                                  // 5810
                                                                                                                       // 5811
    /**                                                                                                                // 5812
     * Gets all but the last element of `array`.                                                                       // 5813
     *                                                                                                                 // 5814
     * @static                                                                                                         // 5815
     * @memberOf _                                                                                                     // 5816
     * @category Array                                                                                                 // 5817
     * @param {Array} array The array to query.                                                                        // 5818
     * @returns {Array} Returns the slice of `array`.                                                                  // 5819
     * @example                                                                                                        // 5820
     *                                                                                                                 // 5821
     * _.initial([1, 2, 3]);                                                                                           // 5822
     * // => [1, 2]                                                                                                    // 5823
     */                                                                                                                // 5824
    function initial(array) {                                                                                          // 5825
      return dropRight(array, 1);                                                                                      // 5826
    }                                                                                                                  // 5827
                                                                                                                       // 5828
    /**                                                                                                                // 5829
     * Creates an array of unique values that are included in all of the provided                                      // 5830
     * arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)                   // 5831
     * for equality comparisons.                                                                                       // 5832
     *                                                                                                                 // 5833
     * @static                                                                                                         // 5834
     * @memberOf _                                                                                                     // 5835
     * @category Array                                                                                                 // 5836
     * @param {...Array} [arrays] The arrays to inspect.                                                               // 5837
     * @returns {Array} Returns the new array of shared values.                                                        // 5838
     * @example                                                                                                        // 5839
     * _.intersection([2, 1], [4, 2], [1, 2]);                                                                         // 5840
     * // => [2]                                                                                                       // 5841
     */                                                                                                                // 5842
    var intersection = rest(function(arrays) {                                                                         // 5843
      var mapped = arrayMap(arrays, toArrayLikeObject);                                                                // 5844
      return (mapped.length && mapped[0] === arrays[0])                                                                // 5845
        ? baseIntersection(mapped)                                                                                     // 5846
        : [];                                                                                                          // 5847
    });                                                                                                                // 5848
                                                                                                                       // 5849
    /**                                                                                                                // 5850
     * This method is like `_.intersection` except that it accepts `iteratee`                                          // 5851
     * which is invoked for each element of each `arrays` to generate the criterion                                    // 5852
     * by which uniqueness is computed. The iteratee is invoked with one argument: (value).                            // 5853
     *                                                                                                                 // 5854
     * @static                                                                                                         // 5855
     * @memberOf _                                                                                                     // 5856
     * @category Array                                                                                                 // 5857
     * @param {...Array} [arrays] The arrays to inspect.                                                               // 5858
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.                         // 5859
     * @returns {Array} Returns the new array of shared values.                                                        // 5860
     * @example                                                                                                        // 5861
     *                                                                                                                 // 5862
     * _.intersectionBy([2.1, 1.2], [4.3, 2.4], Math.floor);                                                           // 5863
     * // => [2.1]                                                                                                     // 5864
     *                                                                                                                 // 5865
     * // using the `_.property` iteratee shorthand                                                                    // 5866
     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');                                                  // 5867
     * // => [{ 'x': 1 }]                                                                                              // 5868
     */                                                                                                                // 5869
    var intersectionBy = rest(function(arrays) {                                                                       // 5870
      var iteratee = last(arrays),                                                                                     // 5871
          mapped = arrayMap(arrays, toArrayLikeObject);                                                                // 5872
                                                                                                                       // 5873
      if (iteratee === last(mapped)) {                                                                                 // 5874
        iteratee = undefined;                                                                                          // 5875
      } else {                                                                                                         // 5876
        mapped.pop();                                                                                                  // 5877
      }                                                                                                                // 5878
      return (mapped.length && mapped[0] === arrays[0])                                                                // 5879
        ? baseIntersection(mapped, getIteratee(iteratee))                                                              // 5880
        : [];                                                                                                          // 5881
    });                                                                                                                // 5882
                                                                                                                       // 5883
    /**                                                                                                                // 5884
     * This method is like `_.intersection` except that it accepts `comparator`                                        // 5885
     * which is invoked to compare elements of `arrays`. The comparator is invoked                                     // 5886
     * with two arguments: (arrVal, othVal).                                                                           // 5887
     *                                                                                                                 // 5888
     * @static                                                                                                         // 5889
     * @memberOf _                                                                                                     // 5890
     * @category Array                                                                                                 // 5891
     * @param {...Array} [arrays] The arrays to inspect.                                                               // 5892
     * @param {Function} [comparator] The comparator invoked per element.                                              // 5893
     * @returns {Array} Returns the new array of shared values.                                                        // 5894
     * @example                                                                                                        // 5895
     *                                                                                                                 // 5896
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];                                                         // 5897
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];                                                          // 5898
     *                                                                                                                 // 5899
     * _.intersectionWith(objects, others, _.isEqual);                                                                 // 5900
     * // => [{ 'x': 1, 'y': 2 }]                                                                                      // 5901
     */                                                                                                                // 5902
    var intersectionWith = rest(function(arrays) {                                                                     // 5903
      var comparator = last(arrays),                                                                                   // 5904
          mapped = arrayMap(arrays, toArrayLikeObject);                                                                // 5905
                                                                                                                       // 5906
      if (comparator === last(mapped)) {                                                                               // 5907
        comparator = undefined;                                                                                        // 5908
      } else {                                                                                                         // 5909
        mapped.pop();                                                                                                  // 5910
      }                                                                                                                // 5911
      return (mapped.length && mapped[0] === arrays[0])                                                                // 5912
        ? baseIntersection(mapped, undefined, comparator)                                                              // 5913
        : [];                                                                                                          // 5914
    });                                                                                                                // 5915
                                                                                                                       // 5916
    /**                                                                                                                // 5917
     * Converts all elements in `array` into a string separated by `separator`.                                        // 5918
     *                                                                                                                 // 5919
     * @static                                                                                                         // 5920
     * @memberOf _                                                                                                     // 5921
     * @category Array                                                                                                 // 5922
     * @param {Array} array The array to convert.                                                                      // 5923
     * @param {string} [separator=','] The element separator.                                                          // 5924
     * @returns {string} Returns the joined string.                                                                    // 5925
     * @example                                                                                                        // 5926
     *                                                                                                                 // 5927
     * _.join(['a', 'b', 'c'], '~');                                                                                   // 5928
     * // => 'a~b~c'                                                                                                   // 5929
     */                                                                                                                // 5930
    function join(array, separator) {                                                                                  // 5931
      return array ? nativeJoin.call(array, separator) : '';                                                           // 5932
    }                                                                                                                  // 5933
                                                                                                                       // 5934
    /**                                                                                                                // 5935
     * Gets the last element of `array`.                                                                               // 5936
     *                                                                                                                 // 5937
     * @static                                                                                                         // 5938
     * @memberOf _                                                                                                     // 5939
     * @category Array                                                                                                 // 5940
     * @param {Array} array The array to query.                                                                        // 5941
     * @returns {*} Returns the last element of `array`.                                                               // 5942
     * @example                                                                                                        // 5943
     *                                                                                                                 // 5944
     * _.last([1, 2, 3]);                                                                                              // 5945
     * // => 3                                                                                                         // 5946
     */                                                                                                                // 5947
    function last(array) {                                                                                             // 5948
      var length = array ? array.length : 0;                                                                           // 5949
      return length ? array[length - 1] : undefined;                                                                   // 5950
    }                                                                                                                  // 5951
                                                                                                                       // 5952
    /**                                                                                                                // 5953
     * This method is like `_.indexOf` except that it iterates over elements of                                        // 5954
     * `array` from right to left.                                                                                     // 5955
     *                                                                                                                 // 5956
     * @static                                                                                                         // 5957
     * @memberOf _                                                                                                     // 5958
     * @category Array                                                                                                 // 5959
     * @param {Array} array The array to search.                                                                       // 5960
     * @param {*} value The value to search for.                                                                       // 5961
     * @param {number} [fromIndex=array.length-1] The index to search from.                                            // 5962
     * @returns {number} Returns the index of the matched value, else `-1`.                                            // 5963
     * @example                                                                                                        // 5964
     *                                                                                                                 // 5965
     * _.lastIndexOf([1, 2, 1, 2], 2);                                                                                 // 5966
     * // => 3                                                                                                         // 5967
     *                                                                                                                 // 5968
     * // using `fromIndex`                                                                                            // 5969
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);                                                                              // 5970
     * // => 1                                                                                                         // 5971
     */                                                                                                                // 5972
    function lastIndexOf(array, value, fromIndex) {                                                                    // 5973
      var length = array ? array.length : 0;                                                                           // 5974
      if (!length) {                                                                                                   // 5975
        return -1;                                                                                                     // 5976
      }                                                                                                                // 5977
      var index = length;                                                                                              // 5978
      if (fromIndex !== undefined) {                                                                                   // 5979
        index = toInteger(fromIndex);                                                                                  // 5980
        index = (index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1)) + 1;                         // 5981
      }                                                                                                                // 5982
      if (value !== value) {                                                                                           // 5983
        return indexOfNaN(array, index, true);                                                                         // 5984
      }                                                                                                                // 5985
      while (index--) {                                                                                                // 5986
        if (array[index] === value) {                                                                                  // 5987
          return index;                                                                                                // 5988
        }                                                                                                              // 5989
      }                                                                                                                // 5990
      return -1;                                                                                                       // 5991
    }                                                                                                                  // 5992
                                                                                                                       // 5993
    /**                                                                                                                // 5994
     * Removes all provided values from `array` using                                                                  // 5995
     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)                                // 5996
     * for equality comparisons.                                                                                       // 5997
     *                                                                                                                 // 5998
     * **Note:** Unlike `_.without`, this method mutates `array`.                                                      // 5999
     *                                                                                                                 // 6000
     * @static                                                                                                         // 6001
     * @memberOf _                                                                                                     // 6002
     * @category Array                                                                                                 // 6003
     * @param {Array} array The array to modify.                                                                       // 6004
     * @param {...*} [values] The values to remove.                                                                    // 6005
     * @returns {Array} Returns `array`.                                                                               // 6006
     * @example                                                                                                        // 6007
     *                                                                                                                 // 6008
     * var array = [1, 2, 3, 1, 2, 3];                                                                                 // 6009
     *                                                                                                                 // 6010
     * _.pull(array, 2, 3);                                                                                            // 6011
     * console.log(array);                                                                                             // 6012
     * // => [1, 1]                                                                                                    // 6013
     */                                                                                                                // 6014
    var pull = rest(pullAll);                                                                                          // 6015
                                                                                                                       // 6016
    /**                                                                                                                // 6017
     * This method is like `_.pull` except that it accepts an array of values to remove.                               // 6018
     *                                                                                                                 // 6019
     * **Note:** Unlike `_.difference`, this method mutates `array`.                                                   // 6020
     *                                                                                                                 // 6021
     * @static                                                                                                         // 6022
     * @memberOf _                                                                                                     // 6023
     * @category Array                                                                                                 // 6024
     * @param {Array} array The array to modify.                                                                       // 6025
     * @param {Array} values The values to remove.                                                                     // 6026
     * @returns {Array} Returns `array`.                                                                               // 6027
     * @example                                                                                                        // 6028
     *                                                                                                                 // 6029
     * var array = [1, 2, 3, 1, 2, 3];                                                                                 // 6030
     *                                                                                                                 // 6031
     * _.pull(array, [2, 3]);                                                                                          // 6032
     * console.log(array);                                                                                             // 6033
     * // => [1, 1]                                                                                                    // 6034
     */                                                                                                                // 6035
    function pullAll(array, values) {                                                                                  // 6036
      return (array && array.length && values && values.length)                                                        // 6037
        ? basePullAll(array, values)                                                                                   // 6038
        : array;                                                                                                       // 6039
    }                                                                                                                  // 6040
                                                                                                                       // 6041
    /**                                                                                                                // 6042
     * This method is like `_.pullAll` except that it accepts `iteratee` which is                                      // 6043
     * invoked for each element of `array` and `values` to to generate the criterion                                   // 6044
     * by which uniqueness is computed. The iteratee is invoked with one argument: (value).                            // 6045
     *                                                                                                                 // 6046
     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.                                                 // 6047
     *                                                                                                                 // 6048
     * @static                                                                                                         // 6049
     * @memberOf _                                                                                                     // 6050
     * @category Array                                                                                                 // 6051
     * @param {Array} array The array to modify.                                                                       // 6052
     * @param {Array} values The values to remove.                                                                     // 6053
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.                         // 6054
     * @returns {Array} Returns `array`.                                                                               // 6055
     * @example                                                                                                        // 6056
     *                                                                                                                 // 6057
     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];                                                   // 6058
     *                                                                                                                 // 6059
     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');                                                              // 6060
     * console.log(array);                                                                                             // 6061
     * // => [{ 'x': 2 }]                                                                                              // 6062
     */                                                                                                                // 6063
    function pullAllBy(array, values, iteratee) {                                                                      // 6064
      return (array && array.length && values && values.length)                                                        // 6065
        ? basePullAllBy(array, values, getIteratee(iteratee))                                                          // 6066
        : array;                                                                                                       // 6067
    }                                                                                                                  // 6068
                                                                                                                       // 6069
    /**                                                                                                                // 6070
     * Removes elements from `array` corresponding to `indexes` and returns an                                         // 6071
     * array of removed elements.                                                                                      // 6072
     *                                                                                                                 // 6073
     * **Note:** Unlike `_.at`, this method mutates `array`.                                                           // 6074
     *                                                                                                                 // 6075
     * @static                                                                                                         // 6076
     * @memberOf _                                                                                                     // 6077
     * @category Array                                                                                                 // 6078
     * @param {Array} array The array to modify.                                                                       // 6079
     * @param {...(number|number[])} [indexes] The indexes of elements to remove,                                      // 6080
     *  specified individually or in arrays.                                                                           // 6081
     * @returns {Array} Returns the new array of removed elements.                                                     // 6082
     * @example                                                                                                        // 6083
     *                                                                                                                 // 6084
     * var array = [5, 10, 15, 20];                                                                                    // 6085
     * var evens = _.pullAt(array, 1, 3);                                                                              // 6086
     *                                                                                                                 // 6087
     * console.log(array);                                                                                             // 6088
     * // => [5, 15]                                                                                                   // 6089
     *                                                                                                                 // 6090
     * console.log(evens);                                                                                             // 6091
     * // => [10, 20]                                                                                                  // 6092
     */                                                                                                                // 6093
    var pullAt = rest(function(array, indexes) {                                                                       // 6094
      indexes = arrayMap(baseFlatten(indexes), String);                                                                // 6095
                                                                                                                       // 6096
      var result = baseAt(array, indexes);                                                                             // 6097
      basePullAt(array, indexes.sort(compareAscending));                                                               // 6098
      return result;                                                                                                   // 6099
    });                                                                                                                // 6100
                                                                                                                       // 6101
    /**                                                                                                                // 6102
     * Removes all elements from `array` that `predicate` returns truthy for                                           // 6103
     * and returns an array of the removed elements. The predicate is invoked with                                     // 6104
     * three arguments: (value, index, array).                                                                         // 6105
     *                                                                                                                 // 6106
     * **Note:** Unlike `_.filter`, this method mutates `array`.                                                       // 6107
     *                                                                                                                 // 6108
     * @static                                                                                                         // 6109
     * @memberOf _                                                                                                     // 6110
     * @category Array                                                                                                 // 6111
     * @param {Array} array The array to modify.                                                                       // 6112
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.                      // 6113
     * @returns {Array} Returns the new array of removed elements.                                                     // 6114
     * @example                                                                                                        // 6115
     *                                                                                                                 // 6116
     * var array = [1, 2, 3, 4];                                                                                       // 6117
     * var evens = _.remove(array, function(n) {                                                                       // 6118
     *   return n % 2 == 0;                                                                                            // 6119
     * });                                                                                                             // 6120
     *                                                                                                                 // 6121
     * console.log(array);                                                                                             // 6122
     * // => [1, 3]                                                                                                    // 6123
     *                                                                                                                 // 6124
     * console.log(evens);                                                                                             // 6125
     * // => [2, 4]                                                                                                    // 6126
     */                                                                                                                // 6127
    function remove(array, predicate) {                                                                                // 6128
      var result = [];                                                                                                 // 6129
      if (!(array && array.length)) {                                                                                  // 6130
        return result;                                                                                                 // 6131
      }                                                                                                                // 6132
      var index = -1,                                                                                                  // 6133
          indexes = [],                                                                                                // 6134
          length = array.length;                                                                                       // 6135
                                                                                                                       // 6136
      predicate = getIteratee(predicate, 3);                                                                           // 6137
      while (++index < length) {                                                                                       // 6138
        var value = array[index];                                                                                      // 6139
        if (predicate(value, index, array)) {                                                                          // 6140
          result.push(value);                                                                                          // 6141
          indexes.push(index);                                                                                         // 6142
        }                                                                                                              // 6143
      }                                                                                                                // 6144
      basePullAt(array, indexes);                                                                                      // 6145
      return result;                                                                                                   // 6146
    }                                                                                                                  // 6147
                                                                                                                       // 6148
    /**                                                                                                                // 6149
     * Reverses `array` so that the first element becomes the last, the second                                         // 6150
     * element becomes the second to last, and so on.                                                                  // 6151
     *                                                                                                                 // 6152
     * **Note:** This method mutates `array` and is based on                                                           // 6153
     * [`Array#reverse`](https://mdn.io/Array/reverse).                                                                // 6154
     *                                                                                                                 // 6155
     * @memberOf _                                                                                                     // 6156
     * @category Array                                                                                                 // 6157
     * @returns {Array} Returns `array`.                                                                               // 6158
     * @example                                                                                                        // 6159
     *                                                                                                                 // 6160
     * var array = [1, 2, 3];                                                                                          // 6161
     *                                                                                                                 // 6162
     * _.reverse(array);                                                                                               // 6163
     * // => [3, 2, 1]                                                                                                 // 6164
     *                                                                                                                 // 6165
     * console.log(array);                                                                                             // 6166
     * // => [3, 2, 1]                                                                                                 // 6167
     */                                                                                                                // 6168
    function reverse(array) {                                                                                          // 6169
      return array ? nativeReverse.call(array) : array;                                                                // 6170
    }                                                                                                                  // 6171
                                                                                                                       // 6172
    /**                                                                                                                // 6173
     * Creates a slice of `array` from `start` up to, but not including, `end`.                                        // 6174
     *                                                                                                                 // 6175
     * **Note:** This method is used instead of [`Array#slice`](https://mdn.io/Array/slice)                            // 6176
     * to ensure dense arrays are returned.                                                                            // 6177
     *                                                                                                                 // 6178
     * @static                                                                                                         // 6179
     * @memberOf _                                                                                                     // 6180
     * @category Array                                                                                                 // 6181
     * @param {Array} array The array to slice.                                                                        // 6182
     * @param {number} [start=0] The start position.                                                                   // 6183
     * @param {number} [end=array.length] The end position.                                                            // 6184
     * @returns {Array} Returns the slice of `array`.                                                                  // 6185
     */                                                                                                                // 6186
    function slice(array, start, end) {                                                                                // 6187
      var length = array ? array.length : 0;                                                                           // 6188
      if (!length) {                                                                                                   // 6189
        return [];                                                                                                     // 6190
      }                                                                                                                // 6191
      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {                                        // 6192
        start = 0;                                                                                                     // 6193
        end = length;                                                                                                  // 6194
      }                                                                                                                // 6195
      else {                                                                                                           // 6196
        start = start == null ? 0 : toInteger(start);                                                                  // 6197
        end = end === undefined ? length : toInteger(end);                                                             // 6198
      }                                                                                                                // 6199
      return baseSlice(array, start, end);                                                                             // 6200
    }                                                                                                                  // 6201
                                                                                                                       // 6202
    /**                                                                                                                // 6203
     * Uses a binary search to determine the lowest index at which `value` should                                      // 6204
     * be inserted into `array` in order to maintain its sort order.                                                   // 6205
     *                                                                                                                 // 6206
     * @static                                                                                                         // 6207
     * @memberOf _                                                                                                     // 6208
     * @category Array                                                                                                 // 6209
     * @param {Array} array The sorted array to inspect.                                                               // 6210
     * @param {*} value The value to evaluate.                                                                         // 6211
     * @returns {number} Returns the index at which `value` should be inserted into `array`.                           // 6212
     * @example                                                                                                        // 6213
     *                                                                                                                 // 6214
     * _.sortedIndex([30, 50], 40);                                                                                    // 6215
     * // => 1                                                                                                         // 6216
     *                                                                                                                 // 6217
     * _.sortedIndex([4, 5], 4);                                                                                       // 6218
     * // => 0                                                                                                         // 6219
     */                                                                                                                // 6220
    function sortedIndex(array, value) {                                                                               // 6221
      return baseSortedIndex(array, value);                                                                            // 6222
    }                                                                                                                  // 6223
                                                                                                                       // 6224
    /**                                                                                                                // 6225
     * This method is like `_.sortedIndex` except that it accepts `iteratee`                                           // 6226
     * which is invoked for `value` and each element of `array` to compute their                                       // 6227
     * sort ranking. The iteratee is invoked with one argument: (value).                                               // 6228
     *                                                                                                                 // 6229
     * @static                                                                                                         // 6230
     * @memberOf _                                                                                                     // 6231
     * @category Array                                                                                                 // 6232
     * @param {Array} array The sorted array to inspect.                                                               // 6233
     * @param {*} value The value to evaluate.                                                                         // 6234
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.                         // 6235
     * @returns {number} Returns the index at which `value` should be inserted into `array`.                           // 6236
     * @example                                                                                                        // 6237
     *                                                                                                                 // 6238
     * var dict = { 'thirty': 30, 'forty': 40, 'fifty': 50 };                                                          // 6239
     *                                                                                                                 // 6240
     * _.sortedIndexBy(['thirty', 'fifty'], 'forty', _.propertyOf(dict));                                              // 6241
     * // => 1                                                                                                         // 6242
     *                                                                                                                 // 6243
     * // using the `_.property` iteratee shorthand                                                                    // 6244
     * _.sortedIndexBy([{ 'x': 4 }, { 'x': 5 }], { 'x': 4 }, 'x');                                                     // 6245
     * // => 0                                                                                                         // 6246
     */                                                                                                                // 6247
    function sortedIndexBy(array, value, iteratee) {                                                                   // 6248
      return baseSortedIndexBy(array, value, getIteratee(iteratee));                                                   // 6249
    }                                                                                                                  // 6250
                                                                                                                       // 6251
    /**                                                                                                                // 6252
     * This method is like `_.indexOf` except that it performs a binary                                                // 6253
     * search on a sorted `array`.                                                                                     // 6254
     *                                                                                                                 // 6255
     * @static                                                                                                         // 6256
     * @memberOf _                                                                                                     // 6257
     * @category Array                                                                                                 // 6258
     * @param {Array} array The array to search.                                                                       // 6259
     * @param {*} value The value to search for.                                                                       // 6260
     * @returns {number} Returns the index of the matched value, else `-1`.                                            // 6261
     * @example                                                                                                        // 6262
     *                                                                                                                 // 6263
     * _.sortedIndexOf([1, 1, 2, 2], 2);                                                                               // 6264
     * // => 2                                                                                                         // 6265
     */                                                                                                                // 6266
    function sortedIndexOf(array, value) {                                                                             // 6267
      var length = array ? array.length : 0;                                                                           // 6268
      if (length) {                                                                                                    // 6269
        var index = baseSortedIndex(array, value);                                                                     // 6270
        if (index < length && eq(array[index], value)) {                                                               // 6271
          return index;                                                                                                // 6272
        }                                                                                                              // 6273
      }                                                                                                                // 6274
      return -1;                                                                                                       // 6275
    }                                                                                                                  // 6276
                                                                                                                       // 6277
    /**                                                                                                                // 6278
     * This method is like `_.sortedIndex` except that it returns the highest                                          // 6279
     * index at which `value` should be inserted into `array` in order to                                              // 6280
     * maintain its sort order.                                                                                        // 6281
     *                                                                                                                 // 6282
     * @static                                                                                                         // 6283
     * @memberOf _                                                                                                     // 6284
     * @category Array                                                                                                 // 6285
     * @param {Array} array The sorted array to inspect.                                                               // 6286
     * @param {*} value The value to evaluate.                                                                         // 6287
     * @returns {number} Returns the index at which `value` should be inserted into `array`.                           // 6288
     * @example                                                                                                        // 6289
     *                                                                                                                 // 6290
     * _.sortedLastIndex([4, 5], 4);                                                                                   // 6291
     * // => 1                                                                                                         // 6292
     */                                                                                                                // 6293
    function sortedLastIndex(array, value) {                                                                           // 6294
      return baseSortedIndex(array, value, true);                                                                      // 6295
    }                                                                                                                  // 6296
                                                                                                                       // 6297
    /**                                                                                                                // 6298
     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`                                       // 6299
     * which is invoked for `value` and each element of `array` to compute their                                       // 6300
     * sort ranking. The iteratee is invoked with one argument: (value).                                               // 6301
     *                                                                                                                 // 6302
     * @static                                                                                                         // 6303
     * @memberOf _                                                                                                     // 6304
     * @category Array                                                                                                 // 6305
     * @param {Array} array The sorted array to inspect.                                                               // 6306
     * @param {*} value The value to evaluate.                                                                         // 6307
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.                         // 6308
     * @returns {number} Returns the index at which `value` should be inserted into `array`.                           // 6309
     * @example                                                                                                        // 6310
     *                                                                                                                 // 6311
     * // using the `_.property` iteratee shorthand                                                                    // 6312
     * _.sortedLastIndexBy([{ 'x': 4 }, { 'x': 5 }], { 'x': 4 }, 'x');                                                 // 6313
     * // => 1                                                                                                         // 6314
     */                                                                                                                // 6315
    function sortedLastIndexBy(array, value, iteratee) {                                                               // 6316
      return baseSortedIndexBy(array, value, getIteratee(iteratee), true);                                             // 6317
    }                                                                                                                  // 6318
                                                                                                                       // 6319
    /**                                                                                                                // 6320
     * This method is like `_.lastIndexOf` except that it performs a binary                                            // 6321
     * search on a sorted `array`.                                                                                     // 6322
     *                                                                                                                 // 6323
     * @static                                                                                                         // 6324
     * @memberOf _                                                                                                     // 6325
     * @category Array                                                                                                 // 6326
     * @param {Array} array The array to search.                                                                       // 6327
     * @param {*} value The value to search for.                                                                       // 6328
     * @returns {number} Returns the index of the matched value, else `-1`.                                            // 6329
     * @example                                                                                                        // 6330
     *                                                                                                                 // 6331
     * _.sortedLastIndexOf([1, 1, 2, 2], 2);                                                                           // 6332
     * // => 3                                                                                                         // 6333
     */                                                                                                                // 6334
    function sortedLastIndexOf(array, value) {                                                                         // 6335
      var length = array ? array.length : 0;                                                                           // 6336
      if (length) {                                                                                                    // 6337
        var index = baseSortedIndex(array, value, true) - 1;                                                           // 6338
        if (eq(array[index], value)) {                                                                                 // 6339
          return index;                                                                                                // 6340
        }                                                                                                              // 6341
      }                                                                                                                // 6342
      return -1;                                                                                                       // 6343
    }                                                                                                                  // 6344
                                                                                                                       // 6345
    /**                                                                                                                // 6346
     * This method is like `_.uniq` except that it's designed and optimized                                            // 6347
     * for sorted arrays.                                                                                              // 6348
     *                                                                                                                 // 6349
     * @static                                                                                                         // 6350
     * @memberOf _                                                                                                     // 6351
     * @category Array                                                                                                 // 6352
     * @param {Array} array The array to inspect.                                                                      // 6353
     * @returns {Array} Returns the new duplicate free array.                                                          // 6354
     * @example                                                                                                        // 6355
     *                                                                                                                 // 6356
     * _.sortedUniq([1, 1, 2]);                                                                                        // 6357
     * // => [1, 2]                                                                                                    // 6358
     */                                                                                                                // 6359
    function sortedUniq(array) {                                                                                       // 6360
      return (array && array.length)                                                                                   // 6361
        ? baseSortedUniq(array)                                                                                        // 6362
        : [];                                                                                                          // 6363
    }                                                                                                                  // 6364
                                                                                                                       // 6365
    /**                                                                                                                // 6366
     * This method is like `_.uniqBy` except that it's designed and optimized                                          // 6367
     * for sorted arrays.                                                                                              // 6368
     *                                                                                                                 // 6369
     * @static                                                                                                         // 6370
     * @memberOf _                                                                                                     // 6371
     * @category Array                                                                                                 // 6372
     * @param {Array} array The array to inspect.                                                                      // 6373
     * @param {Function} [iteratee] The iteratee invoked per element.                                                  // 6374
     * @returns {Array} Returns the new duplicate free array.                                                          // 6375
     * @example                                                                                                        // 6376
     *                                                                                                                 // 6377
     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);                                                               // 6378
     * // => [1.1, 2.2]                                                                                                // 6379
     */                                                                                                                // 6380
    function sortedUniqBy(array, iteratee) {                                                                           // 6381
      return (array && array.length)                                                                                   // 6382
        ? baseSortedUniqBy(array, getIteratee(iteratee))                                                               // 6383
        : [];                                                                                                          // 6384
    }                                                                                                                  // 6385
                                                                                                                       // 6386
    /**                                                                                                                // 6387
     * Gets all but the first element of `array`.                                                                      // 6388
     *                                                                                                                 // 6389
     * @static                                                                                                         // 6390
     * @memberOf _                                                                                                     // 6391
     * @category Array                                                                                                 // 6392
     * @param {Array} array The array to query.                                                                        // 6393
     * @returns {Array} Returns the slice of `array`.                                                                  // 6394
     * @example                                                                                                        // 6395
     *                                                                                                                 // 6396
     * _.tail([1, 2, 3]);                                                                                              // 6397
     * // => [2, 3]                                                                                                    // 6398
     */                                                                                                                // 6399
    function tail(array) {                                                                                             // 6400
      return drop(array, 1);                                                                                           // 6401
    }                                                                                                                  // 6402
                                                                                                                       // 6403
    /**                                                                                                                // 6404
     * Creates a slice of `array` with `n` elements taken from the beginning.                                          // 6405
     *                                                                                                                 // 6406
     * @static                                                                                                         // 6407
     * @memberOf _                                                                                                     // 6408
     * @category Array                                                                                                 // 6409
     * @param {Array} array The array to query.                                                                        // 6410
     * @param {number} [n=1] The number of elements to take.                                                           // 6411
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.                                 // 6412
     * @returns {Array} Returns the slice of `array`.                                                                  // 6413
     * @example                                                                                                        // 6414
     *                                                                                                                 // 6415
     * _.take([1, 2, 3]);                                                                                              // 6416
     * // => [1]                                                                                                       // 6417
     *                                                                                                                 // 6418
     * _.take([1, 2, 3], 2);                                                                                           // 6419
     * // => [1, 2]                                                                                                    // 6420
     *                                                                                                                 // 6421
     * _.take([1, 2, 3], 5);                                                                                           // 6422
     * // => [1, 2, 3]                                                                                                 // 6423
     *                                                                                                                 // 6424
     * _.take([1, 2, 3], 0);                                                                                           // 6425
     * // => []                                                                                                        // 6426
     */                                                                                                                // 6427
    function take(array, n, guard) {                                                                                   // 6428
      if (!(array && array.length)) {                                                                                  // 6429
        return [];                                                                                                     // 6430
      }                                                                                                                // 6431
      n = (guard || n === undefined) ? 1 : toInteger(n);                                                               // 6432
      return baseSlice(array, 0, n < 0 ? 0 : n);                                                                       // 6433
    }                                                                                                                  // 6434
                                                                                                                       // 6435
    /**                                                                                                                // 6436
     * Creates a slice of `array` with `n` elements taken from the end.                                                // 6437
     *                                                                                                                 // 6438
     * @static                                                                                                         // 6439
     * @memberOf _                                                                                                     // 6440
     * @category Array                                                                                                 // 6441
     * @param {Array} array The array to query.                                                                        // 6442
     * @param {number} [n=1] The number of elements to take.                                                           // 6443
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.                                 // 6444
     * @returns {Array} Returns the slice of `array`.                                                                  // 6445
     * @example                                                                                                        // 6446
     *                                                                                                                 // 6447
     * _.takeRight([1, 2, 3]);                                                                                         // 6448
     * // => [3]                                                                                                       // 6449
     *                                                                                                                 // 6450
     * _.takeRight([1, 2, 3], 2);                                                                                      // 6451
     * // => [2, 3]                                                                                                    // 6452
     *                                                                                                                 // 6453
     * _.takeRight([1, 2, 3], 5);                                                                                      // 6454
     * // => [1, 2, 3]                                                                                                 // 6455
     *                                                                                                                 // 6456
     * _.takeRight([1, 2, 3], 0);                                                                                      // 6457
     * // => []                                                                                                        // 6458
     */                                                                                                                // 6459
    function takeRight(array, n, guard) {                                                                              // 6460
      var length = array ? array.length : 0;                                                                           // 6461
      if (!length) {                                                                                                   // 6462
        return [];                                                                                                     // 6463
      }                                                                                                                // 6464
      n = (guard || n === undefined) ? 1 : toInteger(n);                                                               // 6465
      n = length - n;                                                                                                  // 6466
      return baseSlice(array, n < 0 ? 0 : n, length);                                                                  // 6467
    }                                                                                                                  // 6468
                                                                                                                       // 6469
    /**                                                                                                                // 6470
     * Creates a slice of `array` with elements taken from the end. Elements are                                       // 6471
     * taken until `predicate` returns falsey. The predicate is invoked with three                                     // 6472
     * arguments: (value, index, array).                                                                               // 6473
     *                                                                                                                 // 6474
     * @static                                                                                                         // 6475
     * @memberOf _                                                                                                     // 6476
     * @category Array                                                                                                 // 6477
     * @param {Array} array The array to query.                                                                        // 6478
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.                      // 6479
     * @returns {Array} Returns the slice of `array`.                                                                  // 6480
     * @example                                                                                                        // 6481
     *                                                                                                                 // 6482
     * var users = [                                                                                                   // 6483
     *   { 'user': 'barney',  'active': true },                                                                        // 6484
     *   { 'user': 'fred',    'active': false },                                                                       // 6485
     *   { 'user': 'pebbles', 'active': false }                                                                        // 6486
     * ];                                                                                                              // 6487
     *                                                                                                                 // 6488
     * _.takeRightWhile(users, function(o) { return !o.active; });                                                     // 6489
     * // => objects for ['fred', 'pebbles']                                                                           // 6490
     *                                                                                                                 // 6491
     * // using the `_.matches` iteratee shorthand                                                                     // 6492
     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });                                                // 6493
     * // => objects for ['pebbles']                                                                                   // 6494
     *                                                                                                                 // 6495
     * // using the `_.matchesProperty` iteratee shorthand                                                             // 6496
     * _.takeRightWhile(users, ['active', false]);                                                                     // 6497
     * // => objects for ['fred', 'pebbles']                                                                           // 6498
     *                                                                                                                 // 6499
     * // using the `_.property` iteratee shorthand                                                                    // 6500
     * _.takeRightWhile(users, 'active');                                                                              // 6501
     * // => []                                                                                                        // 6502
     */                                                                                                                // 6503
    function takeRightWhile(array, predicate) {                                                                        // 6504
      return (array && array.length)                                                                                   // 6505
        ? baseWhile(array, getIteratee(predicate, 3), false, true)                                                     // 6506
        : [];                                                                                                          // 6507
    }                                                                                                                  // 6508
                                                                                                                       // 6509
    /**                                                                                                                // 6510
     * Creates a slice of `array` with elements taken from the beginning. Elements                                     // 6511
     * are taken until `predicate` returns falsey. The predicate is invoked with                                       // 6512
     * three arguments: (value, index, array).                                                                         // 6513
     *                                                                                                                 // 6514
     * @static                                                                                                         // 6515
     * @memberOf _                                                                                                     // 6516
     * @category Array                                                                                                 // 6517
     * @param {Array} array The array to query.                                                                        // 6518
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.                      // 6519
     * @returns {Array} Returns the slice of `array`.                                                                  // 6520
     * @example                                                                                                        // 6521
     *                                                                                                                 // 6522
     * var users = [                                                                                                   // 6523
     *   { 'user': 'barney',  'active': false },                                                                       // 6524
     *   { 'user': 'fred',    'active': false},                                                                        // 6525
     *   { 'user': 'pebbles', 'active': true }                                                                         // 6526
     * ];                                                                                                              // 6527
     *                                                                                                                 // 6528
     * _.takeWhile(users, function(o) { return !o.active; });                                                          // 6529
     * // => objects for ['barney', 'fred']                                                                            // 6530
     *                                                                                                                 // 6531
     * // using the `_.matches` iteratee shorthand                                                                     // 6532
     * _.takeWhile(users, { 'user': 'barney', 'active': false });                                                      // 6533
     * // => objects for ['barney']                                                                                    // 6534
     *                                                                                                                 // 6535
     * // using the `_.matchesProperty` iteratee shorthand                                                             // 6536
     * _.takeWhile(users, ['active', false]);                                                                          // 6537
     * // => objects for ['barney', 'fred']                                                                            // 6538
     *                                                                                                                 // 6539
     * // using the `_.property` iteratee shorthand                                                                    // 6540
     * _.takeWhile(users, 'active');                                                                                   // 6541
     * // => []                                                                                                        // 6542
     */                                                                                                                // 6543
    function takeWhile(array, predicate) {                                                                             // 6544
      return (array && array.length)                                                                                   // 6545
        ? baseWhile(array, getIteratee(predicate, 3))                                                                  // 6546
        : [];                                                                                                          // 6547
    }                                                                                                                  // 6548
                                                                                                                       // 6549
    /**                                                                                                                // 6550
     * Creates an array of unique values, in order, from all of the provided arrays                                    // 6551
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)                          // 6552
     * for equality comparisons.                                                                                       // 6553
     *                                                                                                                 // 6554
     * @static                                                                                                         // 6555
     * @memberOf _                                                                                                     // 6556
     * @category Array                                                                                                 // 6557
     * @param {...Array} [arrays] The arrays to inspect.                                                               // 6558
     * @returns {Array} Returns the new array of combined values.                                                      // 6559
     * @example                                                                                                        // 6560
     *                                                                                                                 // 6561
     * _.union([2, 1], [4, 2], [1, 2]);                                                                                // 6562
     * // => [2, 1, 4]                                                                                                 // 6563
     */                                                                                                                // 6564
    var union = rest(function(arrays) {                                                                                // 6565
      return baseUniq(baseFlatten(arrays, false, true));                                                               // 6566
    });                                                                                                                // 6567
                                                                                                                       // 6568
    /**                                                                                                                // 6569
     * This method is like `_.union` except that it accepts `iteratee` which is                                        // 6570
     * invoked for each element of each `arrays` to generate the criterion by which                                    // 6571
     * uniqueness is computed. The iteratee is invoked with one argument: (value).                                     // 6572
     *                                                                                                                 // 6573
     * @static                                                                                                         // 6574
     * @memberOf _                                                                                                     // 6575
     * @category Array                                                                                                 // 6576
     * @param {...Array} [arrays] The arrays to inspect.                                                               // 6577
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.                         // 6578
     * @returns {Array} Returns the new array of combined values.                                                      // 6579
     * @example                                                                                                        // 6580
     *                                                                                                                 // 6581
     * _.unionBy([2.1, 1.2], [4.3, 2.4], Math.floor);                                                                  // 6582
     * // => [2.1, 1.2, 4.3]                                                                                           // 6583
     *                                                                                                                 // 6584
     * // using the `_.property` iteratee shorthand                                                                    // 6585
     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');                                                         // 6586
     * // => [{ 'x': 1 }, { 'x': 2 }]                                                                                  // 6587
     */                                                                                                                // 6588
    var unionBy = rest(function(arrays) {                                                                              // 6589
      var iteratee = last(arrays);                                                                                     // 6590
      if (isArrayLikeObject(iteratee)) {                                                                               // 6591
        iteratee = undefined;                                                                                          // 6592
      }                                                                                                                // 6593
      return baseUniq(baseFlatten(arrays, false, true), getIteratee(iteratee));                                        // 6594
    });                                                                                                                // 6595
                                                                                                                       // 6596
    /**                                                                                                                // 6597
     * This method is like `_.union` except that it accepts `comparator` which                                         // 6598
     * is invoked to compare elements of `arrays`. The comparator is invoked                                           // 6599
     * with two arguments: (arrVal, othVal).                                                                           // 6600
     *                                                                                                                 // 6601
     * @static                                                                                                         // 6602
     * @memberOf _                                                                                                     // 6603
     * @category Array                                                                                                 // 6604
     * @param {...Array} [arrays] The arrays to inspect.                                                               // 6605
     * @param {Function} [comparator] The comparator invoked per element.                                              // 6606
     * @returns {Array} Returns the new array of combined values.                                                      // 6607
     * @example                                                                                                        // 6608
     *                                                                                                                 // 6609
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];                                                         // 6610
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];                                                          // 6611
     *                                                                                                                 // 6612
     * _.unionWith(objects, others, _.isEqual);                                                                        // 6613
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]                                              // 6614
     */                                                                                                                // 6615
    var unionWith = rest(function(arrays) {                                                                            // 6616
      var comparator = last(arrays);                                                                                   // 6617
      if (isArrayLikeObject(comparator)) {                                                                             // 6618
        comparator = undefined;                                                                                        // 6619
      }                                                                                                                // 6620
      return baseUniq(baseFlatten(arrays, false, true), undefined, comparator);                                        // 6621
    });                                                                                                                // 6622
                                                                                                                       // 6623
    /**                                                                                                                // 6624
     * Creates a duplicate-free version of an array, using                                                             // 6625
     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)                                // 6626
     * for equality comparisons, in which only the first occurrence of each element                                    // 6627
     * is kept.                                                                                                        // 6628
     *                                                                                                                 // 6629
     * @static                                                                                                         // 6630
     * @memberOf _                                                                                                     // 6631
     * @category Array                                                                                                 // 6632
     * @param {Array} array The array to inspect.                                                                      // 6633
     * @returns {Array} Returns the new duplicate free array.                                                          // 6634
     * @example                                                                                                        // 6635
     *                                                                                                                 // 6636
     * _.uniq([2, 1, 2]);                                                                                              // 6637
     * // => [2, 1]                                                                                                    // 6638
     */                                                                                                                // 6639
    function uniq(array) {                                                                                             // 6640
      return (array && array.length)                                                                                   // 6641
        ? baseUniq(array)                                                                                              // 6642
        : [];                                                                                                          // 6643
    }                                                                                                                  // 6644
                                                                                                                       // 6645
    /**                                                                                                                // 6646
     * This method is like `_.uniq` except that it accepts `iteratee` which is                                         // 6647
     * invoked for each element in `array` to generate the criterion by which                                          // 6648
     * uniqueness is computed. The iteratee is invoked with one argument: (value).                                     // 6649
     *                                                                                                                 // 6650
     * @static                                                                                                         // 6651
     * @memberOf _                                                                                                     // 6652
     * @category Array                                                                                                 // 6653
     * @param {Array} array The array to inspect.                                                                      // 6654
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.                         // 6655
     * @returns {Array} Returns the new duplicate free array.                                                          // 6656
     * @example                                                                                                        // 6657
     *                                                                                                                 // 6658
     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);                                                                          // 6659
     * // => [2.1, 1.2]                                                                                                // 6660
     *                                                                                                                 // 6661
     * // using the `_.property` iteratee shorthand                                                                    // 6662
     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');                                                            // 6663
     * // => [{ 'x': 1 }, { 'x': 2 }]                                                                                  // 6664
     */                                                                                                                // 6665
    function uniqBy(array, iteratee) {                                                                                 // 6666
      return (array && array.length)                                                                                   // 6667
        ? baseUniq(array, getIteratee(iteratee))                                                                       // 6668
        : [];                                                                                                          // 6669
    }                                                                                                                  // 6670
                                                                                                                       // 6671
    /**                                                                                                                // 6672
     * This method is like `_.uniq` except that it accepts `comparator` which                                          // 6673
     * is invoked to compare elements of `array`. The comparator is invoked with                                       // 6674
     * two arguments: (arrVal, othVal).                                                                                // 6675
     *                                                                                                                 // 6676
     * @static                                                                                                         // 6677
     * @memberOf _                                                                                                     // 6678
     * @category Array                                                                                                 // 6679
     * @param {Array} array The array to inspect.                                                                      // 6680
     * @param {Function} [comparator] The comparator invoked per element.                                              // 6681
     * @returns {Array} Returns the new duplicate free array.                                                          // 6682
     * @example                                                                                                        // 6683
     *                                                                                                                 // 6684
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 },  { 'x': 1, 'y': 2 }];                                    // 6685
     *                                                                                                                 // 6686
     * _.uniqWith(objects, _.isEqual);                                                                                 // 6687
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]                                                                  // 6688
     */                                                                                                                // 6689
    function uniqWith(array, comparator) {                                                                             // 6690
      return (array && array.length)                                                                                   // 6691
        ? baseUniq(array, undefined, comparator)                                                                       // 6692
        : [];                                                                                                          // 6693
    }                                                                                                                  // 6694
                                                                                                                       // 6695
    /**                                                                                                                // 6696
     * This method is like `_.zip` except that it accepts an array of grouped                                          // 6697
     * elements and creates an array regrouping the elements to their pre-zip                                          // 6698
     * configuration.                                                                                                  // 6699
     *                                                                                                                 // 6700
     * @static                                                                                                         // 6701
     * @memberOf _                                                                                                     // 6702
     * @category Array                                                                                                 // 6703
     * @param {Array} array The array of grouped elements to process.                                                  // 6704
     * @returns {Array} Returns the new array of regrouped elements.                                                   // 6705
     * @example                                                                                                        // 6706
     *                                                                                                                 // 6707
     * var zipped = _.zip(['fred', 'barney'], [30, 40], [true, false]);                                                // 6708
     * // => [['fred', 30, true], ['barney', 40, false]]                                                               // 6709
     *                                                                                                                 // 6710
     * _.unzip(zipped);                                                                                                // 6711
     * // => [['fred', 'barney'], [30, 40], [true, false]]                                                             // 6712
     */                                                                                                                // 6713
    function unzip(array) {                                                                                            // 6714
      if (!(array && array.length)) {                                                                                  // 6715
        return [];                                                                                                     // 6716
      }                                                                                                                // 6717
      var length = 0;                                                                                                  // 6718
      array = arrayFilter(array, function(group) {                                                                     // 6719
        if (isArrayLikeObject(group)) {                                                                                // 6720
          length = nativeMax(group.length, length);                                                                    // 6721
          return true;                                                                                                 // 6722
        }                                                                                                              // 6723
      });                                                                                                              // 6724
      return baseTimes(length, function(index) {                                                                       // 6725
        return arrayMap(array, baseProperty(index));                                                                   // 6726
      });                                                                                                              // 6727
    }                                                                                                                  // 6728
                                                                                                                       // 6729
    /**                                                                                                                // 6730
     * This method is like `_.unzip` except that it accepts `iteratee` to specify                                      // 6731
     * how regrouped values should be combined. The iteratee is invoked with the                                       // 6732
     * elements of each group: (...group).                                                                             // 6733
     *                                                                                                                 // 6734
     * @static                                                                                                         // 6735
     * @memberOf _                                                                                                     // 6736
     * @category Array                                                                                                 // 6737
     * @param {Array} array The array of grouped elements to process.                                                  // 6738
     * @param {Function} [iteratee=_.identity] The function to combine regrouped values.                               // 6739
     * @returns {Array} Returns the new array of regrouped elements.                                                   // 6740
     * @example                                                                                                        // 6741
     *                                                                                                                 // 6742
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);                                                               // 6743
     * // => [[1, 10, 100], [2, 20, 200]]                                                                              // 6744
     *                                                                                                                 // 6745
     * _.unzipWith(zipped, _.add);                                                                                     // 6746
     * // => [3, 30, 300]                                                                                              // 6747
     */                                                                                                                // 6748
    function unzipWith(array, iteratee) {                                                                              // 6749
      if (!(array && array.length)) {                                                                                  // 6750
        return [];                                                                                                     // 6751
      }                                                                                                                // 6752
      var result = unzip(array);                                                                                       // 6753
      if (iteratee == null) {                                                                                          // 6754
        return result;                                                                                                 // 6755
      }                                                                                                                // 6756
      return arrayMap(result, function(group) {                                                                        // 6757
        return apply(iteratee, undefined, group);                                                                      // 6758
      });                                                                                                              // 6759
    }                                                                                                                  // 6760
                                                                                                                       // 6761
    /**                                                                                                                // 6762
     * Creates an array excluding all provided values using                                                            // 6763
     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)                                // 6764
     * for equality comparisons.                                                                                       // 6765
     *                                                                                                                 // 6766
     * @static                                                                                                         // 6767
     * @memberOf _                                                                                                     // 6768
     * @category Array                                                                                                 // 6769
     * @param {Array} array The array to filter.                                                                       // 6770
     * @param {...*} [values] The values to exclude.                                                                   // 6771
     * @returns {Array} Returns the new array of filtered values.                                                      // 6772
     * @example                                                                                                        // 6773
     *                                                                                                                 // 6774
     * _.without([1, 2, 1, 3], 1, 2);                                                                                  // 6775
     * // => [3]                                                                                                       // 6776
     */                                                                                                                // 6777
    var without = rest(function(array, values) {                                                                       // 6778
      return isArrayLikeObject(array)                                                                                  // 6779
        ? baseDifference(array, values)                                                                                // 6780
        : [];                                                                                                          // 6781
    });                                                                                                                // 6782
                                                                                                                       // 6783
    /**                                                                                                                // 6784
     * Creates an array of unique values that is the [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the provided arrays.                                                                                         // 6786
     *                                                                                                                 // 6787
     * @static                                                                                                         // 6788
     * @memberOf _                                                                                                     // 6789
     * @category Array                                                                                                 // 6790
     * @param {...Array} [arrays] The arrays to inspect.                                                               // 6791
     * @returns {Array} Returns the new array of values.                                                               // 6792
     * @example                                                                                                        // 6793
     *                                                                                                                 // 6794
     * _.xor([2, 1], [4, 2]);                                                                                          // 6795
     * // => [1, 4]                                                                                                    // 6796
     */                                                                                                                // 6797
    var xor = rest(function(arrays) {                                                                                  // 6798
      return baseXor(arrayFilter(arrays, isArrayLikeObject));                                                          // 6799
    });                                                                                                                // 6800
                                                                                                                       // 6801
    /**                                                                                                                // 6802
     * This method is like `_.xor` except that it accepts `iteratee` which is                                          // 6803
     * invoked for each element of each `arrays` to generate the criterion by which                                    // 6804
     * uniqueness is computed. The iteratee is invoked with one argument: (value).                                     // 6805
     *                                                                                                                 // 6806
     * @static                                                                                                         // 6807
     * @memberOf _                                                                                                     // 6808
     * @category Array                                                                                                 // 6809
     * @param {...Array} [arrays] The arrays to inspect.                                                               // 6810
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.                         // 6811
     * @returns {Array} Returns the new array of values.                                                               // 6812
     * @example                                                                                                        // 6813
     *                                                                                                                 // 6814
     * _.xorBy([2.1, 1.2], [4.3, 2.4], Math.floor);                                                                    // 6815
     * // => [1.2, 4.3]                                                                                                // 6816
     *                                                                                                                 // 6817
     * // using the `_.property` iteratee shorthand                                                                    // 6818
     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');                                                           // 6819
     * // => [{ 'x': 2 }]                                                                                              // 6820
     */                                                                                                                // 6821
    var xorBy = rest(function(arrays) {                                                                                // 6822
      var iteratee = last(arrays);                                                                                     // 6823
      if (isArrayLikeObject(iteratee)) {                                                                               // 6824
        iteratee = undefined;                                                                                          // 6825
      }                                                                                                                // 6826
      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee));                                   // 6827
    });                                                                                                                // 6828
                                                                                                                       // 6829
    /**                                                                                                                // 6830
     * This method is like `_.xor` except that it accepts `comparator` which is                                        // 6831
     * invoked to compare elements of `arrays`. The comparator is invoked with                                         // 6832
     * two arguments: (arrVal, othVal).                                                                                // 6833
     *                                                                                                                 // 6834
     * @static                                                                                                         // 6835
     * @memberOf _                                                                                                     // 6836
     * @category Array                                                                                                 // 6837
     * @param {...Array} [arrays] The arrays to inspect.                                                               // 6838
     * @param {Function} [comparator] The comparator invoked per element.                                              // 6839
     * @returns {Array} Returns the new array of values.                                                               // 6840
     * @example                                                                                                        // 6841
     *                                                                                                                 // 6842
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];                                                         // 6843
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];                                                          // 6844
     *                                                                                                                 // 6845
     * _.xorWith(objects, others, _.isEqual);                                                                          // 6846
     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]                                                                  // 6847
     */                                                                                                                // 6848
    var xorWith = rest(function(arrays) {                                                                              // 6849
      var comparator = last(arrays);                                                                                   // 6850
      if (isArrayLikeObject(comparator)) {                                                                             // 6851
        comparator = undefined;                                                                                        // 6852
      }                                                                                                                // 6853
      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);                                   // 6854
    });                                                                                                                // 6855
                                                                                                                       // 6856
    /**                                                                                                                // 6857
     * Creates an array of grouped elements, the first of which contains the first                                     // 6858
     * elements of the given arrays, the second of which contains the second elements                                  // 6859
     * of the given arrays, and so on.                                                                                 // 6860
     *                                                                                                                 // 6861
     * @static                                                                                                         // 6862
     * @memberOf _                                                                                                     // 6863
     * @category Array                                                                                                 // 6864
     * @param {...Array} [arrays] The arrays to process.                                                               // 6865
     * @returns {Array} Returns the new array of grouped elements.                                                     // 6866
     * @example                                                                                                        // 6867
     *                                                                                                                 // 6868
     * _.zip(['fred', 'barney'], [30, 40], [true, false]);                                                             // 6869
     * // => [['fred', 30, true], ['barney', 40, false]]                                                               // 6870
     */                                                                                                                // 6871
    var zip = rest(unzip);                                                                                             // 6872
                                                                                                                       // 6873
    /**                                                                                                                // 6874
     * This method is like `_.fromPairs` except that it accepts two arrays,                                            // 6875
     * one of property names and one of corresponding values.                                                          // 6876
     *                                                                                                                 // 6877
     * @static                                                                                                         // 6878
     * @memberOf _                                                                                                     // 6879
     * @category Array                                                                                                 // 6880
     * @param {Array} [props=[]] The property names.                                                                   // 6881
     * @param {Array} [values=[]] The property values.                                                                 // 6882
     * @returns {Object} Returns the new object.                                                                       // 6883
     * @example                                                                                                        // 6884
     *                                                                                                                 // 6885
     * _.zipObject(['fred', 'barney'], [30, 40]);                                                                      // 6886
     * // => { 'fred': 30, 'barney': 40 }                                                                              // 6887
     */                                                                                                                // 6888
    function zipObject(props, values) {                                                                                // 6889
      var index = -1,                                                                                                  // 6890
          length = props ? props.length : 0,                                                                           // 6891
          valsLength = values ? values.length : 0,                                                                     // 6892
          result = {};                                                                                                 // 6893
                                                                                                                       // 6894
      while (++index < length) {                                                                                       // 6895
        baseSet(result, props[index], index < valsLength ? values[index] : undefined);                                 // 6896
      }                                                                                                                // 6897
      return result;                                                                                                   // 6898
    }                                                                                                                  // 6899
                                                                                                                       // 6900
    /**                                                                                                                // 6901
     * This method is like `_.zip` except that it accepts `iteratee` to specify                                        // 6902
     * how grouped values should be combined. The iteratee is invoked with the                                         // 6903
     * elements of each group: (...group).                                                                             // 6904
     *                                                                                                                 // 6905
     * @static                                                                                                         // 6906
     * @memberOf _                                                                                                     // 6907
     * @category Array                                                                                                 // 6908
     * @param {...Array} [arrays] The arrays to process.                                                               // 6909
     * @param {Function} [iteratee=_.identity] The function to combine grouped values.                                 // 6910
     * @returns {Array} Returns the new array of grouped elements.                                                     // 6911
     * @example                                                                                                        // 6912
     *                                                                                                                 // 6913
     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {                                                     // 6914
     *   return a + b + c;                                                                                             // 6915
     * });                                                                                                             // 6916
     * // => [111, 222]                                                                                                // 6917
     */                                                                                                                // 6918
    var zipWith = rest(function(arrays) {                                                                              // 6919
      var length = arrays.length,                                                                                      // 6920
          iteratee = length > 1 ? arrays[length - 1] : undefined;                                                      // 6921
                                                                                                                       // 6922
      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;                                 // 6923
      return unzipWith(arrays, iteratee);                                                                              // 6924
    });                                                                                                                // 6925
                                                                                                                       // 6926
    /*------------------------------------------------------------------------*/                                       // 6927
                                                                                                                       // 6928
    /**                                                                                                                // 6929
     * Creates a `lodash` object that wraps `value` with explicit method chaining enabled.                             // 6930
     * The result of such method chaining must be unwrapped with `_#value`.                                            // 6931
     *                                                                                                                 // 6932
     * @static                                                                                                         // 6933
     * @memberOf _                                                                                                     // 6934
     * @category Seq                                                                                                   // 6935
     * @param {*} value The value to wrap.                                                                             // 6936
     * @returns {Object} Returns the new `lodash` wrapper instance.                                                    // 6937
     * @example                                                                                                        // 6938
     *                                                                                                                 // 6939
     * var users = [                                                                                                   // 6940
     *   { 'user': 'barney',  'age': 36 },                                                                             // 6941
     *   { 'user': 'fred',    'age': 40 },                                                                             // 6942
     *   { 'user': 'pebbles', 'age': 1 }                                                                               // 6943
     * ];                                                                                                              // 6944
     *                                                                                                                 // 6945
     * var youngest = _                                                                                                // 6946
     *   .chain(users)                                                                                                 // 6947
     *   .sortBy('age')                                                                                                // 6948
     *   .map(function(o) {                                                                                            // 6949
     *     return o.user + ' is ' + o.age;                                                                             // 6950
     *   })                                                                                                            // 6951
     *   .head()                                                                                                       // 6952
     *   .value();                                                                                                     // 6953
     * // => 'pebbles is 1'                                                                                            // 6954
     */                                                                                                                // 6955
    function chain(value) {                                                                                            // 6956
      var result = lodash(value);                                                                                      // 6957
      result.__chain__ = true;                                                                                         // 6958
      return result;                                                                                                   // 6959
    }                                                                                                                  // 6960
                                                                                                                       // 6961
    /**                                                                                                                // 6962
     * This method invokes `interceptor` and returns `value`. The interceptor is                                       // 6963
     * invoked with one argument; (value). The purpose of this method is to "tap into"                                 // 6964
     * a method chain in order to perform operations on intermediate results within                                    // 6965
     * the chain.                                                                                                      // 6966
     *                                                                                                                 // 6967
     * @static                                                                                                         // 6968
     * @memberOf _                                                                                                     // 6969
     * @category Seq                                                                                                   // 6970
     * @param {*} value The value to provide to `interceptor`.                                                         // 6971
     * @param {Function} interceptor The function to invoke.                                                           // 6972
     * @returns {*} Returns `value`.                                                                                   // 6973
     * @example                                                                                                        // 6974
     *                                                                                                                 // 6975
     * _([1, 2, 3])                                                                                                    // 6976
     *  .tap(function(array) {                                                                                         // 6977
     *    array.pop();                                                                                                 // 6978
     *  })                                                                                                             // 6979
     *  .reverse()                                                                                                     // 6980
     *  .value();                                                                                                      // 6981
     * // => [2, 1]                                                                                                    // 6982
     */                                                                                                                // 6983
    function tap(value, interceptor) {                                                                                 // 6984
      interceptor(value);                                                                                              // 6985
      return value;                                                                                                    // 6986
    }                                                                                                                  // 6987
                                                                                                                       // 6988
    /**                                                                                                                // 6989
     * This method is like `_.tap` except that it returns the result of `interceptor`.                                 // 6990
     *                                                                                                                 // 6991
     * @static                                                                                                         // 6992
     * @memberOf _                                                                                                     // 6993
     * @category Seq                                                                                                   // 6994
     * @param {*} value The value to provide to `interceptor`.                                                         // 6995
     * @param {Function} interceptor The function to invoke.                                                           // 6996
     * @returns {*} Returns the result of `interceptor`.                                                               // 6997
     * @example                                                                                                        // 6998
     *                                                                                                                 // 6999
     * _('  abc  ')                                                                                                    // 7000
     *  .chain()                                                                                                       // 7001
     *  .trim()                                                                                                        // 7002
     *  .thru(function(value) {                                                                                        // 7003
     *    return [value];                                                                                              // 7004
     *  })                                                                                                             // 7005
     *  .value();                                                                                                      // 7006
     * // => ['abc']                                                                                                   // 7007
     */                                                                                                                // 7008
    function thru(value, interceptor) {                                                                                // 7009
      return interceptor(value);                                                                                       // 7010
    }                                                                                                                  // 7011
                                                                                                                       // 7012
    /**                                                                                                                // 7013
     * This method is the wrapper version of `_.at`.                                                                   // 7014
     *                                                                                                                 // 7015
     * @name at                                                                                                        // 7016
     * @memberOf _                                                                                                     // 7017
     * @category Seq                                                                                                   // 7018
     * @param {...(string|string[])} [paths] The property paths of elements to pick,                                   // 7019
     *  specified individually or in arrays.                                                                           // 7020
     * @returns {Object} Returns the new `lodash` wrapper instance.                                                    // 7021
     * @example                                                                                                        // 7022
     *                                                                                                                 // 7023
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };                                                                 // 7024
     *                                                                                                                 // 7025
     * _(object).at(['a[0].b.c', 'a[1]']).value();                                                                     // 7026
     * // => [3, 4]                                                                                                    // 7027
     *                                                                                                                 // 7028
     * _(['a', 'b', 'c']).at(0, 2).value();                                                                            // 7029
     * // => ['a', 'c']                                                                                                // 7030
     */                                                                                                                // 7031
    var wrapperAt = rest(function(paths) {                                                                             // 7032
      paths = baseFlatten(paths);                                                                                      // 7033
      var length = paths.length,                                                                                       // 7034
          start = length ? paths[0] : 0,                                                                               // 7035
          value = this.__wrapped__,                                                                                    // 7036
          interceptor = function(object) { return baseAt(object, paths); };                                            // 7037
                                                                                                                       // 7038
      if (length > 1 || this.__actions__.length || !(value instanceof LazyWrapper) || !isIndex(start)) {               // 7039
        return this.thru(interceptor);                                                                                 // 7040
      }                                                                                                                // 7041
      value = value.slice(start, +start + (length ? 1 : 0));                                                           // 7042
      value.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });                           // 7043
      return new LodashWrapper(value, this.__chain__).thru(function(array) {                                           // 7044
        if (length && !array.length) {                                                                                 // 7045
          array.push(undefined);                                                                                       // 7046
        }                                                                                                              // 7047
        return array;                                                                                                  // 7048
      });                                                                                                              // 7049
    });                                                                                                                // 7050
                                                                                                                       // 7051
    /**                                                                                                                // 7052
     * Enables explicit method chaining on the wrapper object.                                                         // 7053
     *                                                                                                                 // 7054
     * @name chain                                                                                                     // 7055
     * @memberOf _                                                                                                     // 7056
     * @category Seq                                                                                                   // 7057
     * @returns {Object} Returns the new `lodash` wrapper instance.                                                    // 7058
     * @example                                                                                                        // 7059
     *                                                                                                                 // 7060
     * var users = [                                                                                                   // 7061
     *   { 'user': 'barney', 'age': 36 },                                                                              // 7062
     *   { 'user': 'fred',   'age': 40 }                                                                               // 7063
     * ];                                                                                                              // 7064
     *                                                                                                                 // 7065
     * // without explicit chaining                                                                                    // 7066
     * _(users).head();                                                                                                // 7067
     * // => { 'user': 'barney', 'age': 36 }                                                                           // 7068
     *                                                                                                                 // 7069
     * // with explicit chaining                                                                                       // 7070
     * _(users)                                                                                                        // 7071
     *   .chain()                                                                                                      // 7072
     *   .head()                                                                                                       // 7073
     *   .pick('user')                                                                                                 // 7074
     *   .value();                                                                                                     // 7075
     * // => { 'user': 'barney' }                                                                                      // 7076
     */                                                                                                                // 7077
    function wrapperChain() {                                                                                          // 7078
      return chain(this);                                                                                              // 7079
    }                                                                                                                  // 7080
                                                                                                                       // 7081
    /**                                                                                                                // 7082
     * Executes the chained sequence and returns the wrapped result.                                                   // 7083
     *                                                                                                                 // 7084
     * @name commit                                                                                                    // 7085
     * @memberOf _                                                                                                     // 7086
     * @category Seq                                                                                                   // 7087
     * @returns {Object} Returns the new `lodash` wrapper instance.                                                    // 7088
     * @example                                                                                                        // 7089
     *                                                                                                                 // 7090
     * var array = [1, 2];                                                                                             // 7091
     * var wrapped = _(array).push(3);                                                                                 // 7092
     *                                                                                                                 // 7093
     * console.log(array);                                                                                             // 7094
     * // => [1, 2]                                                                                                    // 7095
     *                                                                                                                 // 7096
     * wrapped = wrapped.commit();                                                                                     // 7097
     * console.log(array);                                                                                             // 7098
     * // => [1, 2, 3]                                                                                                 // 7099
     *                                                                                                                 // 7100
     * wrapped.last();                                                                                                 // 7101
     * // => 3                                                                                                         // 7102
     *                                                                                                                 // 7103
     * console.log(array);                                                                                             // 7104
     * // => [1, 2, 3]                                                                                                 // 7105
     */                                                                                                                // 7106
    function wrapperCommit() {                                                                                         // 7107
      return new LodashWrapper(this.value(), this.__chain__);                                                          // 7108
    }                                                                                                                  // 7109
                                                                                                                       // 7110
    /**                                                                                                                // 7111
     * This method is the wrapper version of `_.flatMap`.                                                              // 7112
     *                                                                                                                 // 7113
     * @static                                                                                                         // 7114
     * @memberOf _                                                                                                     // 7115
     * @category Seq                                                                                                   // 7116
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked per iteration.                       // 7117
     * @returns {Object} Returns the new `lodash` wrapper instance.                                                    // 7118
     * @example                                                                                                        // 7119
     *                                                                                                                 // 7120
     * function duplicate(n) {                                                                                         // 7121
     *   return [n, n];                                                                                                // 7122
     * }                                                                                                               // 7123
     *                                                                                                                 // 7124
     * _([1, 2]).flatMap(duplicate).value();                                                                           // 7125
     * // => [1, 1, 2, 2]                                                                                              // 7126
     */                                                                                                                // 7127
    function wrapperFlatMap(iteratee) {                                                                                // 7128
      return this.map(iteratee).flatten();                                                                             // 7129
    }                                                                                                                  // 7130
                                                                                                                       // 7131
    /**                                                                                                                // 7132
     * Gets the next value on a wrapped object following the                                                           // 7133
     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).                                               // 7134
     *                                                                                                                 // 7135
     * @name next                                                                                                      // 7136
     * @memberOf _                                                                                                     // 7137
     * @category Seq                                                                                                   // 7138
     * @returns {Object} Returns the next iterator value.                                                              // 7139
     * @example                                                                                                        // 7140
     *                                                                                                                 // 7141
     * var wrapped = _([1, 2]);                                                                                        // 7142
     *                                                                                                                 // 7143
     * wrapped.next();                                                                                                 // 7144
     * // => { 'done': false, 'value': 1 }                                                                             // 7145
     *                                                                                                                 // 7146
     * wrapped.next();                                                                                                 // 7147
     * // => { 'done': false, 'value': 2 }                                                                             // 7148
     *                                                                                                                 // 7149
     * wrapped.next();                                                                                                 // 7150
     * // => { 'done': true, 'value': undefined }                                                                      // 7151
     */                                                                                                                // 7152
    function wrapperNext() {                                                                                           // 7153
      if (this.__values__ === undefined) {                                                                             // 7154
        this.__values__ = toArray(this.value());                                                                       // 7155
      }                                                                                                                // 7156
      var done = this.__index__ >= this.__values__.length,                                                             // 7157
          value = done ? undefined : this.__values__[this.__index__++];                                                // 7158
                                                                                                                       // 7159
      return { 'done': done, 'value': value };                                                                         // 7160
    }                                                                                                                  // 7161
                                                                                                                       // 7162
    /**                                                                                                                // 7163
     * Enables the wrapper to be iterable.                                                                             // 7164
     *                                                                                                                 // 7165
     * @name Symbol.iterator                                                                                           // 7166
     * @memberOf _                                                                                                     // 7167
     * @category Seq                                                                                                   // 7168
     * @returns {Object} Returns the wrapper object.                                                                   // 7169
     * @example                                                                                                        // 7170
     *                                                                                                                 // 7171
     * var wrapped = _([1, 2]);                                                                                        // 7172
     *                                                                                                                 // 7173
     * wrapped[Symbol.iterator]() === wrapped;                                                                         // 7174
     * // => true                                                                                                      // 7175
     *                                                                                                                 // 7176
     * Array.from(wrapped);                                                                                            // 7177
     * // => [1, 2]                                                                                                    // 7178
     */                                                                                                                // 7179
    function wrapperToIterator() {                                                                                     // 7180
      return this;                                                                                                     // 7181
    }                                                                                                                  // 7182
                                                                                                                       // 7183
    /**                                                                                                                // 7184
     * Creates a clone of the chained sequence planting `value` as the wrapped value.                                  // 7185
     *                                                                                                                 // 7186
     * @name plant                                                                                                     // 7187
     * @memberOf _                                                                                                     // 7188
     * @category Seq                                                                                                   // 7189
     * @param {*} value The value to plant.                                                                            // 7190
     * @returns {Object} Returns the new `lodash` wrapper instance.                                                    // 7191
     * @example                                                                                                        // 7192
     *                                                                                                                 // 7193
     * function square(n) {                                                                                            // 7194
     *   return n * n;                                                                                                 // 7195
     * }                                                                                                               // 7196
     *                                                                                                                 // 7197
     * var wrapped = _([1, 2]).map(square);                                                                            // 7198
     * var other = wrapped.plant([3, 4]);                                                                              // 7199
     *                                                                                                                 // 7200
     * other.value();                                                                                                  // 7201
     * // => [9, 16]                                                                                                   // 7202
     *                                                                                                                 // 7203
     * wrapped.value();                                                                                                // 7204
     * // => [1, 4]                                                                                                    // 7205
     */                                                                                                                // 7206
    function wrapperPlant(value) {                                                                                     // 7207
      var result,                                                                                                      // 7208
          parent = this;                                                                                               // 7209
                                                                                                                       // 7210
      while (parent instanceof baseLodash) {                                                                           // 7211
        var clone = wrapperClone(parent);                                                                              // 7212
        clone.__index__ = 0;                                                                                           // 7213
        clone.__values__ = undefined;                                                                                  // 7214
        if (result) {                                                                                                  // 7215
          previous.__wrapped__ = clone;                                                                                // 7216
        } else {                                                                                                       // 7217
          result = clone;                                                                                              // 7218
        }                                                                                                              // 7219
        var previous = clone;                                                                                          // 7220
        parent = parent.__wrapped__;                                                                                   // 7221
      }                                                                                                                // 7222
      previous.__wrapped__ = value;                                                                                    // 7223
      return result;                                                                                                   // 7224
    }                                                                                                                  // 7225
                                                                                                                       // 7226
    /**                                                                                                                // 7227
     * This method is the wrapper version of `_.reverse`.                                                              // 7228
     *                                                                                                                 // 7229
     * **Note:** This method mutates the wrapped array.                                                                // 7230
     *                                                                                                                 // 7231
     * @name reverse                                                                                                   // 7232
     * @memberOf _                                                                                                     // 7233
     * @category Seq                                                                                                   // 7234
     * @returns {Object} Returns the new `lodash` wrapper instance.                                                    // 7235
     * @example                                                                                                        // 7236
     *                                                                                                                 // 7237
     * var array = [1, 2, 3];                                                                                          // 7238
     *                                                                                                                 // 7239
     * _(array).reverse().value()                                                                                      // 7240
     * // => [3, 2, 1]                                                                                                 // 7241
     *                                                                                                                 // 7242
     * console.log(array);                                                                                             // 7243
     * // => [3, 2, 1]                                                                                                 // 7244
     */                                                                                                                // 7245
    function wrapperReverse() {                                                                                        // 7246
      var value = this.__wrapped__;                                                                                    // 7247
      if (value instanceof LazyWrapper) {                                                                              // 7248
        var wrapped = value;                                                                                           // 7249
        if (this.__actions__.length) {                                                                                 // 7250
          wrapped = new LazyWrapper(this);                                                                             // 7251
        }                                                                                                              // 7252
        wrapped = wrapped.reverse();                                                                                   // 7253
        wrapped.__actions__.push({ 'func': thru, 'args': [reverse], 'thisArg': undefined });                           // 7254
        return new LodashWrapper(wrapped, this.__chain__);                                                             // 7255
      }                                                                                                                // 7256
      return this.thru(reverse);                                                                                       // 7257
    }                                                                                                                  // 7258
                                                                                                                       // 7259
    /**                                                                                                                // 7260
     * Executes the chained sequence to extract the unwrapped value.                                                   // 7261
     *                                                                                                                 // 7262
     * @name value                                                                                                     // 7263
     * @memberOf _                                                                                                     // 7264
     * @alias run, toJSON, valueOf                                                                                     // 7265
     * @category Seq                                                                                                   // 7266
     * @returns {*} Returns the resolved unwrapped value.                                                              // 7267
     * @example                                                                                                        // 7268
     *                                                                                                                 // 7269
     * _([1, 2, 3]).value();                                                                                           // 7270
     * // => [1, 2, 3]                                                                                                 // 7271
     */                                                                                                                // 7272
    function wrapperValue() {                                                                                          // 7273
      return baseWrapperValue(this.__wrapped__, this.__actions__);                                                     // 7274
    }                                                                                                                  // 7275
                                                                                                                       // 7276
    /*------------------------------------------------------------------------*/                                       // 7277
                                                                                                                       // 7278
    /**                                                                                                                // 7279
     * Creates an object composed of keys generated from the results of running                                        // 7280
     * each element of `collection` through `iteratee`. The corresponding value                                        // 7281
     * of each key is the number of times the key was returned by `iteratee`.                                          // 7282
     * The iteratee is invoked with one argument: (value).                                                             // 7283
     *                                                                                                                 // 7284
     * @static                                                                                                         // 7285
     * @memberOf _                                                                                                     // 7286
     * @category Collection                                                                                            // 7287
     * @param {Array|Object} collection The collection to iterate over.                                                // 7288
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.                         // 7289
     * @returns {Object} Returns the composed aggregate object.                                                        // 7290
     * @example                                                                                                        // 7291
     *                                                                                                                 // 7292
     * _.countBy([6.1, 4.2, 6.3], Math.floor);                                                                         // 7293
     * // => { '4': 1, '6': 2 }                                                                                        // 7294
     *                                                                                                                 // 7295
     * _.countBy(['one', 'two', 'three'], 'length');                                                                   // 7296
     * // => { '3': 2, '5': 1 }                                                                                        // 7297
     */                                                                                                                // 7298
    var countBy = createAggregator(function(result, value, key) {                                                      // 7299
      hasOwnProperty.call(result, key) ? ++result[key] : (result[key] = 1);                                            // 7300
    });                                                                                                                // 7301
                                                                                                                       // 7302
    /**                                                                                                                // 7303
     * Checks if `predicate` returns truthy for **all** elements of `collection`.                                      // 7304
     * Iteration is stopped once `predicate` returns falsey. The predicate is                                          // 7305
     * invoked with three arguments: (value, index|key, collection).                                                   // 7306
     *                                                                                                                 // 7307
     * @static                                                                                                         // 7308
     * @memberOf _                                                                                                     // 7309
     * @category Collection                                                                                            // 7310
     * @param {Array|Object} collection The collection to iterate over.                                                // 7311
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.                      // 7312
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.                                 // 7313
     * @returns {boolean} Returns `true` if all elements pass the predicate check, else `false`.                       // 7314
     * @example                                                                                                        // 7315
     *                                                                                                                 // 7316
     * _.every([true, 1, null, 'yes'], Boolean);                                                                       // 7317
     * // => false                                                                                                     // 7318
     *                                                                                                                 // 7319
     * var users = [                                                                                                   // 7320
     *   { 'user': 'barney', 'active': false },                                                                        // 7321
     *   { 'user': 'fred',   'active': false }                                                                         // 7322
     * ];                                                                                                              // 7323
     *                                                                                                                 // 7324
     * // using the `_.matches` iteratee shorthand                                                                     // 7325
     * _.every(users, { 'user': 'barney', 'active': false });                                                          // 7326
     * // => false                                                                                                     // 7327
     *                                                                                                                 // 7328
     * // using the `_.matchesProperty` iteratee shorthand                                                             // 7329
     * _.every(users, ['active', false]);                                                                              // 7330
     * // => true                                                                                                      // 7331
     *                                                                                                                 // 7332
     * // using the `_.property` iteratee shorthand                                                                    // 7333
     * _.every(users, 'active');                                                                                       // 7334
     * // => false                                                                                                     // 7335
     */                                                                                                                // 7336
    function every(collection, predicate, guard) {                                                                     // 7337
      var func = isArray(collection) ? arrayEvery : baseEvery;                                                         // 7338
      if (guard && isIterateeCall(collection, predicate, guard)) {                                                     // 7339
        predicate = undefined;                                                                                         // 7340
      }                                                                                                                // 7341
      return func(collection, getIteratee(predicate, 3));                                                              // 7342
    }                                                                                                                  // 7343
                                                                                                                       // 7344
    /**                                                                                                                // 7345
     * Iterates over elements of `collection`, returning an array of all elements                                      // 7346
     * `predicate` returns truthy for. The predicate is invoked with three arguments:                                  // 7347
     * (value, index|key, collection).                                                                                 // 7348
     *                                                                                                                 // 7349
     * @static                                                                                                         // 7350
     * @memberOf _                                                                                                     // 7351
     * @category Collection                                                                                            // 7352
     * @param {Array|Object} collection The collection to iterate over.                                                // 7353
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.                      // 7354
     * @returns {Array} Returns the new filtered array.                                                                // 7355
     * @example                                                                                                        // 7356
     *                                                                                                                 // 7357
     * var users = [                                                                                                   // 7358
     *   { 'user': 'barney', 'age': 36, 'active': true },                                                              // 7359
     *   { 'user': 'fred',   'age': 40, 'active': false }                                                              // 7360
     * ];                                                                                                              // 7361
     *                                                                                                                 // 7362
     * _.filter(users, function(o) { return !o.active; });                                                             // 7363
     * // => objects for ['fred']                                                                                      // 7364
     *                                                                                                                 // 7365
     * // using the `_.matches` iteratee shorthand                                                                     // 7366
     * _.filter(users, { 'age': 36, 'active': true });                                                                 // 7367
     * // => objects for ['barney']                                                                                    // 7368
     *                                                                                                                 // 7369
     * // using the `_.matchesProperty` iteratee shorthand                                                             // 7370
     * _.filter(users, ['active', false]);                                                                             // 7371
     * // => objects for ['fred']                                                                                      // 7372
     *                                                                                                                 // 7373
     * // using the `_.property` iteratee shorthand                                                                    // 7374
     * _.filter(users, 'active');                                                                                      // 7375
     * // => objects for ['barney']                                                                                    // 7376
     */                                                                                                                // 7377
    function filter(collection, predicate) {                                                                           // 7378
      var func = isArray(collection) ? arrayFilter : baseFilter;                                                       // 7379
      return func(collection, getIteratee(predicate, 3));                                                              // 7380
    }                                                                                                                  // 7381
                                                                                                                       // 7382
    /**                                                                                                                // 7383
     * Iterates over elements of `collection`, returning the first element                                             // 7384
     * `predicate` returns truthy for. The predicate is invoked with three arguments:                                  // 7385
     * (value, index|key, collection).                                                                                 // 7386
     *                                                                                                                 // 7387
     * @static                                                                                                         // 7388
     * @memberOf _                                                                                                     // 7389
     * @category Collection                                                                                            // 7390
     * @param {Array|Object} collection The collection to search.                                                      // 7391
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.                      // 7392
     * @returns {*} Returns the matched element, else `undefined`.                                                     // 7393
     * @example                                                                                                        // 7394
     *                                                                                                                 // 7395
     * var users = [                                                                                                   // 7396
     *   { 'user': 'barney',  'age': 36, 'active': true },                                                             // 7397
     *   { 'user': 'fred',    'age': 40, 'active': false },                                                            // 7398
     *   { 'user': 'pebbles', 'age': 1,  'active': true }                                                              // 7399
     * ];                                                                                                              // 7400
     *                                                                                                                 // 7401
     * _.find(users, function(o) { return o.age < 40; });                                                              // 7402
     * // => object for 'barney'                                                                                       // 7403
     *                                                                                                                 // 7404
     * // using the `_.matches` iteratee shorthand                                                                     // 7405
     * _.find(users, { 'age': 1, 'active': true });                                                                    // 7406
     * // => object for 'pebbles'                                                                                      // 7407
     *                                                                                                                 // 7408
     * // using the `_.matchesProperty` iteratee shorthand                                                             // 7409
     * _.find(users, ['active', false]);                                                                               // 7410
     * // => object for 'fred'                                                                                         // 7411
     *                                                                                                                 // 7412
     * // using the `_.property` iteratee shorthand                                                                    // 7413
     * _.find(users, 'active');                                                                                        // 7414
     * // => object for 'barney'                                                                                       // 7415
     */                                                                                                                // 7416
    function find(collection, predicate) {                                                                             // 7417
      predicate = getIteratee(predicate, 3);                                                                           // 7418
      if (isArray(collection)) {                                                                                       // 7419
        var index = baseFindIndex(collection, predicate);                                                              // 7420
        return index > -1 ? collection[index] : undefined;                                                             // 7421
      }                                                                                                                // 7422
      return baseFind(collection, predicate, baseEach);                                                                // 7423
    }                                                                                                                  // 7424
                                                                                                                       // 7425
    /**                                                                                                                // 7426
     * This method is like `_.find` except that it iterates over elements of                                           // 7427
     * `collection` from right to left.                                                                                // 7428
     *                                                                                                                 // 7429
     * @static                                                                                                         // 7430
     * @memberOf _                                                                                                     // 7431
     * @category Collection                                                                                            // 7432
     * @param {Array|Object} collection The collection to search.                                                      // 7433
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.                      // 7434
     * @returns {*} Returns the matched element, else `undefined`.                                                     // 7435
     * @example                                                                                                        // 7436
     *                                                                                                                 // 7437
     * _.findLast([1, 2, 3, 4], function(n) {                                                                          // 7438
     *   return n % 2 == 1;                                                                                            // 7439
     * });                                                                                                             // 7440
     * // => 3                                                                                                         // 7441
     */                                                                                                                // 7442
    function findLast(collection, predicate) {                                                                         // 7443
      predicate = getIteratee(predicate, 3);                                                                           // 7444
      if (isArray(collection)) {                                                                                       // 7445
        var index = baseFindIndex(collection, predicate, true);                                                        // 7446
        return index > -1 ? collection[index] : undefined;                                                             // 7447
      }                                                                                                                // 7448
      return baseFind(collection, predicate, baseEachRight);                                                           // 7449
    }                                                                                                                  // 7450
                                                                                                                       // 7451
    /**                                                                                                                // 7452
     * Iterates over elements of `collection` invoking `iteratee` for each element.                                    // 7453
     * The iteratee is invoked with three arguments: (value, index|key, collection).                                   // 7454
     * Iteratee functions may exit iteration early by explicitly returning `false`.                                    // 7455
     *                                                                                                                 // 7456
     * **Note:** As with other "Collections" methods, objects with a "length" property                                 // 7457
     * are iterated like arrays. To avoid this behavior use `_.forIn` or `_.forOwn`                                    // 7458
     * for object iteration.                                                                                           // 7459
     *                                                                                                                 // 7460
     * @static                                                                                                         // 7461
     * @memberOf _                                                                                                     // 7462
     * @alias each                                                                                                     // 7463
     * @category Collection                                                                                            // 7464
     * @param {Array|Object} collection The collection to iterate over.                                                // 7465
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.                                     // 7466
     * @returns {Array|Object} Returns `collection`.                                                                   // 7467
     * @example                                                                                                        // 7468
     *                                                                                                                 // 7469
     * _([1, 2]).forEach(function(value) {                                                                             // 7470
     *   console.log(value);                                                                                           // 7471
     * });                                                                                                             // 7472
     * // => logs `1` then `2`                                                                                         // 7473
     *                                                                                                                 // 7474
     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {                                                            // 7475
     *   console.log(key);                                                                                             // 7476
     * });                                                                                                             // 7477
     * // => logs 'a' then 'b' (iteration order is not guaranteed)                                                     // 7478
     */                                                                                                                // 7479
    function forEach(collection, iteratee) {                                                                           // 7480
      return (typeof iteratee == 'function' && isArray(collection))                                                    // 7481
        ? arrayEach(collection, iteratee)                                                                              // 7482
        : baseEach(collection, toFunction(iteratee));                                                                  // 7483
    }                                                                                                                  // 7484
                                                                                                                       // 7485
    /**                                                                                                                // 7486
     * This method is like `_.forEach` except that it iterates over elements of                                        // 7487
     * `collection` from right to left.                                                                                // 7488
     *                                                                                                                 // 7489
     * @static                                                                                                         // 7490
     * @memberOf _                                                                                                     // 7491
     * @alias eachRight                                                                                                // 7492
     * @category Collection                                                                                            // 7493
     * @param {Array|Object} collection The collection to iterate over.                                                // 7494
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.                                     // 7495
     * @returns {Array|Object} Returns `collection`.                                                                   // 7496
     * @example                                                                                                        // 7497
     *                                                                                                                 // 7498
     * _.forEachRight([1, 2], function(value) {                                                                        // 7499
     *   console.log(value);                                                                                           // 7500
     * });                                                                                                             // 7501
     * // => logs `2` then `1`                                                                                         // 7502
     */                                                                                                                // 7503
    function forEachRight(collection, iteratee) {                                                                      // 7504
      return (typeof iteratee == 'function' && isArray(collection))                                                    // 7505
        ? arrayEachRight(collection, iteratee)                                                                         // 7506
        : baseEachRight(collection, toFunction(iteratee));                                                             // 7507
    }                                                                                                                  // 7508
                                                                                                                       // 7509
    /**                                                                                                                // 7510
     * Creates an object composed of keys generated from the results of running                                        // 7511
     * each element of `collection` through `iteratee`. The corresponding value                                        // 7512
     * of each key is an array of the elements responsible for generating the key.                                     // 7513
     * The iteratee is invoked with one argument: (value).                                                             // 7514
     *                                                                                                                 // 7515
     * @static                                                                                                         // 7516
     * @memberOf _                                                                                                     // 7517
     * @category Collection                                                                                            // 7518
     * @param {Array|Object} collection The collection to iterate over.                                                // 7519
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.                         // 7520
     * @returns {Object} Returns the composed aggregate object.                                                        // 7521
     * @example                                                                                                        // 7522
     *                                                                                                                 // 7523
     * _.groupBy([6.1, 4.2, 6.3], Math.floor);                                                                         // 7524
     * // => { '4': [4.2], '6': [6.1, 6.3] }                                                                           // 7525
     *                                                                                                                 // 7526
     * // using the `_.property` iteratee shorthand                                                                    // 7527
     * _.groupBy(['one', 'two', 'three'], 'length');                                                                   // 7528
     * // => { '3': ['one', 'two'], '5': ['three'] }                                                                   // 7529
     */                                                                                                                // 7530
    var groupBy = createAggregator(function(result, value, key) {                                                      // 7531
      if (hasOwnProperty.call(result, key)) {                                                                          // 7532
        result[key].push(value);                                                                                       // 7533
      } else {                                                                                                         // 7534
        result[key] = [value];                                                                                         // 7535
      }                                                                                                                // 7536
    });                                                                                                                // 7537
                                                                                                                       // 7538
    /**                                                                                                                // 7539
     * Checks if `value` is in `collection`. If `collection` is a string it's checked                                  // 7540
     * for a substring of `value`, otherwise [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * is used for equality comparisons. If `fromIndex` is negative, it's used as                                      // 7542
     * the offset from the end of `collection`.                                                                        // 7543
     *                                                                                                                 // 7544
     * @static                                                                                                         // 7545
     * @memberOf _                                                                                                     // 7546
     * @category Collection                                                                                            // 7547
     * @param {Array|Object|string} collection The collection to search.                                               // 7548
     * @param {*} value The value to search for.                                                                       // 7549
     * @param {number} [fromIndex=0] The index to search from.                                                         // 7550
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.reduce`.                              // 7551
     * @returns {boolean} Returns `true` if `value` is found, else `false`.                                            // 7552
     * @example                                                                                                        // 7553
     *                                                                                                                 // 7554
     * _.includes([1, 2, 3], 1);                                                                                       // 7555
     * // => true                                                                                                      // 7556
     *                                                                                                                 // 7557
     * _.includes([1, 2, 3], 1, 2);                                                                                    // 7558
     * // => false                                                                                                     // 7559
     *                                                                                                                 // 7560
     * _.includes({ 'user': 'fred', 'age': 40 }, 'fred');                                                              // 7561
     * // => true                                                                                                      // 7562
     *                                                                                                                 // 7563
     * _.includes('pebbles', 'eb');                                                                                    // 7564
     * // => true                                                                                                      // 7565
     */                                                                                                                // 7566
    function includes(collection, value, fromIndex, guard) {                                                           // 7567
      collection = isArrayLike(collection) ? collection : values(collection);                                          // 7568
      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;                                                    // 7569
                                                                                                                       // 7570
      var length = collection.length;                                                                                  // 7571
      if (fromIndex < 0) {                                                                                             // 7572
        fromIndex = nativeMax(length + fromIndex, 0);                                                                  // 7573
      }                                                                                                                // 7574
      return isString(collection)                                                                                      // 7575
        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)                                           // 7576
        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);                                                // 7577
    }                                                                                                                  // 7578
                                                                                                                       // 7579
    /**                                                                                                                // 7580
     * Invokes the method at `path` of each element in `collection`, returning                                         // 7581
     * an array of the results of each invoked method. Any additional arguments                                        // 7582
     * are provided to each invoked method. If `methodName` is a function it's                                         // 7583
     * invoked for, and `this` bound to, each element in `collection`.                                                 // 7584
     *                                                                                                                 // 7585
     * @static                                                                                                         // 7586
     * @memberOf _                                                                                                     // 7587
     * @category Collection                                                                                            // 7588
     * @param {Array|Object} collection The collection to iterate over.                                                // 7589
     * @param {Array|Function|string} path The path of the method to invoke or                                         // 7590
     *  the function invoked per iteration.                                                                            // 7591
     * @param {...*} [args] The arguments to invoke each method with.                                                  // 7592
     * @returns {Array} Returns the array of results.                                                                  // 7593
     * @example                                                                                                        // 7594
     *                                                                                                                 // 7595
     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');                                                                    // 7596
     * // => [[1, 5, 7], [1, 2, 3]]                                                                                    // 7597
     *                                                                                                                 // 7598
     * _.invokeMap([123, 456], String.prototype.split, '');                                                            // 7599
     * // => [['1', '2', '3'], ['4', '5', '6']]                                                                        // 7600
     */                                                                                                                // 7601
    var invokeMap = rest(function(collection, path, args) {                                                            // 7602
      var index = -1,                                                                                                  // 7603
          isFunc = typeof path == 'function',                                                                          // 7604
          isProp = isKey(path),                                                                                        // 7605
          result = isArrayLike(collection) ? Array(collection.length) : [];                                            // 7606
                                                                                                                       // 7607
      baseEach(collection, function(value) {                                                                           // 7608
        var func = isFunc ? path : ((isProp && value != null) ? value[path] : undefined);                              // 7609
        result[++index] = func ? apply(func, value, args) : baseInvoke(value, path, args);                             // 7610
      });                                                                                                              // 7611
      return result;                                                                                                   // 7612
    });                                                                                                                // 7613
                                                                                                                       // 7614
    /**                                                                                                                // 7615
     * Creates an object composed of keys generated from the results of running                                        // 7616
     * each element of `collection` through `iteratee`. The corresponding value                                        // 7617
     * of each key is the last element responsible for generating the key. The                                         // 7618
     * iteratee is invoked with one argument: (value).                                                                 // 7619
     *                                                                                                                 // 7620
     * @static                                                                                                         // 7621
     * @memberOf _                                                                                                     // 7622
     * @category Collection                                                                                            // 7623
     * @param {Array|Object} collection The collection to iterate over.                                                // 7624
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.                         // 7625
     * @returns {Object} Returns the composed aggregate object.                                                        // 7626
     * @example                                                                                                        // 7627
     *                                                                                                                 // 7628
     * var keyData = [                                                                                                 // 7629
     *   { 'dir': 'left', 'code': 97 },                                                                                // 7630
     *   { 'dir': 'right', 'code': 100 }                                                                               // 7631
     * ];                                                                                                              // 7632
     *                                                                                                                 // 7633
     * _.keyBy(keyData, 'dir');                                                                                        // 7634
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }                       // 7635
     *                                                                                                                 // 7636
     * _.keyBy(keyData, function(o) {                                                                                  // 7637
     *   return String.fromCharCode(o.code);                                                                           // 7638
     * });                                                                                                             // 7639
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }                              // 7640
     */                                                                                                                // 7641
    var keyBy = createAggregator(function(result, value, key) {                                                        // 7642
      result[key] = value;                                                                                             // 7643
    });                                                                                                                // 7644
                                                                                                                       // 7645
    /**                                                                                                                // 7646
     * Creates an array of values by running each element in `collection` through                                      // 7647
     * `iteratee`. The iteratee is invoked with three arguments:                                                       // 7648
     * (value, index|key, collection).                                                                                 // 7649
     *                                                                                                                 // 7650
     * Many lodash methods are guarded to work as iteratees for methods like                                           // 7651
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.                                        // 7652
     *                                                                                                                 // 7653
     * The guarded methods are:                                                                                        // 7654
     * `ary`, `curry`, `curryRight`, `drop`, `dropRight`, `every`, `fill`,                                             // 7655
     * `invert`, `parseInt`, `random`, `range`, `rangeRight`, `slice`, `some`,                                         // 7656
     * `sortBy`, `take`, `takeRight`, `template`, `trim`, `trimEnd`, `trimStart`,                                      // 7657
     * and `words`                                                                                                     // 7658
     *                                                                                                                 // 7659
     * @static                                                                                                         // 7660
     * @memberOf _                                                                                                     // 7661
     * @category Collection                                                                                            // 7662
     * @param {Array|Object} collection The collection to iterate over.                                                // 7663
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked per iteration.                       // 7664
     * @returns {Array} Returns the new mapped array.                                                                  // 7665
     * @example                                                                                                        // 7666
     *                                                                                                                 // 7667
     * function square(n) {                                                                                            // 7668
     *   return n * n;                                                                                                 // 7669
     * }                                                                                                               // 7670
     *                                                                                                                 // 7671
     * _.map([1, 2], square);                                                                                          // 7672
     * // => [3, 6]                                                                                                    // 7673
     *                                                                                                                 // 7674
     * _.map({ 'a': 1, 'b': 2 }, square);                                                                              // 7675
     * // => [3, 6] (iteration order is not guaranteed)                                                                // 7676
     *                                                                                                                 // 7677
     * var users = [                                                                                                   // 7678
     *   { 'user': 'barney' },                                                                                         // 7679
     *   { 'user': 'fred' }                                                                                            // 7680
     * ];                                                                                                              // 7681
     *                                                                                                                 // 7682
     * // using the `_.property` iteratee shorthand                                                                    // 7683
     * _.map(users, 'user');                                                                                           // 7684
     * // => ['barney', 'fred']                                                                                        // 7685
     */                                                                                                                // 7686
    function map(collection, iteratee) {                                                                               // 7687
      var func = isArray(collection) ? arrayMap : baseMap;                                                             // 7688
      return func(collection, getIteratee(iteratee, 3));                                                               // 7689
    }                                                                                                                  // 7690
                                                                                                                       // 7691
    /**                                                                                                                // 7692
     * This method is like `_.sortBy` except that it allows specifying the sort                                        // 7693
     * orders of the iteratees to sort by. If `orders` is unspecified, all values                                      // 7694
     * are sorted in ascending order. Otherwise, specify an order of "desc" for                                        // 7695
     * descending or "asc" for ascending sort order of corresponding values.                                           // 7696
     *                                                                                                                 // 7697
     * @static                                                                                                         // 7698
     * @memberOf _                                                                                                     // 7699
     * @category Collection                                                                                            // 7700
     * @param {Array|Object} collection The collection to iterate over.                                                // 7701
     * @param {Function[]|Object[]|string[]} [iteratees=[_.identity]] The iteratees to sort by.                        // 7702
     * @param {string[]} [orders] The sort orders of `iteratees`.                                                      // 7703
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.reduce`.                              // 7704
     * @returns {Array} Returns the new sorted array.                                                                  // 7705
     * @example                                                                                                        // 7706
     *                                                                                                                 // 7707
     * var users = [                                                                                                   // 7708
     *   { 'user': 'fred',   'age': 48 },                                                                              // 7709
     *   { 'user': 'barney', 'age': 34 },                                                                              // 7710
     *   { 'user': 'fred',   'age': 42 },                                                                              // 7711
     *   { 'user': 'barney', 'age': 36 }                                                                               // 7712
     * ];                                                                                                              // 7713
     *                                                                                                                 // 7714
     * // sort by `user` in ascending order and by `age` in descending order                                           // 7715
     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);                                                             // 7716
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]                                  // 7717
     */                                                                                                                // 7718
    function orderBy(collection, iteratees, orders, guard) {                                                           // 7719
      if (collection == null) {                                                                                        // 7720
        return [];                                                                                                     // 7721
      }                                                                                                                // 7722
      if (!isArray(iteratees)) {                                                                                       // 7723
        iteratees = iteratees == null ? [] : [iteratees];                                                              // 7724
      }                                                                                                                // 7725
      orders = guard ? undefined : orders;                                                                             // 7726
      if (!isArray(orders)) {                                                                                          // 7727
        orders = orders == null ? [] : [orders];                                                                       // 7728
      }                                                                                                                // 7729
      return baseOrderBy(collection, iteratees, orders);                                                               // 7730
    }                                                                                                                  // 7731
                                                                                                                       // 7732
    /**                                                                                                                // 7733
     * Creates an array of elements split into two groups, the first of which                                          // 7734
     * contains elements `predicate` returns truthy for, while the second of which                                     // 7735
     * contains elements `predicate` returns falsey for. The predicate is invoked                                      // 7736
     * with three arguments: (value, index|key, collection).                                                           // 7737
     *                                                                                                                 // 7738
     * @static                                                                                                         // 7739
     * @memberOf _                                                                                                     // 7740
     * @category Collection                                                                                            // 7741
     * @param {Array|Object} collection The collection to iterate over.                                                // 7742
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.                      // 7743
     * @returns {Array} Returns the array of grouped elements.                                                         // 7744
     * @example                                                                                                        // 7745
     *                                                                                                                 // 7746
     * var users = [                                                                                                   // 7747
     *   { 'user': 'barney',  'age': 36, 'active': false },                                                            // 7748
     *   { 'user': 'fred',    'age': 40, 'active': true },                                                             // 7749
     *   { 'user': 'pebbles', 'age': 1,  'active': false }                                                             // 7750
     * ];                                                                                                              // 7751
     *                                                                                                                 // 7752
     * _.partition(users, function(o) { return o.active; });                                                           // 7753
     * // => objects for [['fred'], ['barney', 'pebbles']]                                                             // 7754
     *                                                                                                                 // 7755
     * // using the `_.matches` iteratee shorthand                                                                     // 7756
     * _.partition(users, { 'age': 1, 'active': false });                                                              // 7757
     * // => objects for [['pebbles'], ['barney', 'fred']]                                                             // 7758
     *                                                                                                                 // 7759
     * // using the `_.matchesProperty` iteratee shorthand                                                             // 7760
     * _.partition(users, ['active', false]);                                                                          // 7761
     * // => objects for [['barney', 'pebbles'], ['fred']]                                                             // 7762
     *                                                                                                                 // 7763
     * // using the `_.property` iteratee shorthand                                                                    // 7764
     * _.partition(users, 'active');                                                                                   // 7765
     * // => objects for [['fred'], ['barney', 'pebbles']]                                                             // 7766
     */                                                                                                                // 7767
    var partition = createAggregator(function(result, value, key) {                                                    // 7768
      result[key ? 0 : 1].push(value);                                                                                 // 7769
    }, function() { return [[], []]; });                                                                               // 7770
                                                                                                                       // 7771
    /**                                                                                                                // 7772
     * Reduces `collection` to a value which is the accumulated result of running                                      // 7773
     * each element in `collection` through `iteratee`, where each successive                                          // 7774
     * invocation is supplied the return value of the previous. If `accumulator`                                       // 7775
     * is not provided the first element of `collection` is used as the initial                                        // 7776
     * value. The iteratee is invoked with four arguments:                                                             // 7777
     * (accumulator, value, index|key, collection).                                                                    // 7778
     *                                                                                                                 // 7779
     * Many lodash methods are guarded to work as iteratees for methods like                                           // 7780
     * `_.reduce`, `_.reduceRight`, and `_.transform`.                                                                 // 7781
     *                                                                                                                 // 7782
     * The guarded methods are:                                                                                        // 7783
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,                                           // 7784
     * and `sortBy`                                                                                                    // 7785
     *                                                                                                                 // 7786
     * @static                                                                                                         // 7787
     * @memberOf _                                                                                                     // 7788
     * @category Collection                                                                                            // 7789
     * @param {Array|Object} collection The collection to iterate over.                                                // 7790
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.                                     // 7791
     * @param {*} [accumulator] The initial value.                                                                     // 7792
     * @returns {*} Returns the accumulated value.                                                                     // 7793
     * @example                                                                                                        // 7794
     *                                                                                                                 // 7795
     * _.reduce([1, 2], function(sum, n) {                                                                             // 7796
     *   return sum + n;                                                                                               // 7797
     * });                                                                                                             // 7798
     * // => 3                                                                                                         // 7799
     *                                                                                                                 // 7800
     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {                                             // 7801
     *   (result[value] || (result[value] = [])).push(key);                                                            // 7802
     *   return result;                                                                                                // 7803
     * }, {});                                                                                                         // 7804
     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)                                       // 7805
     */                                                                                                                // 7806
    function reduce(collection, iteratee, accumulator) {                                                               // 7807
      var func = isArray(collection) ? arrayReduce : baseReduce,                                                       // 7808
          initFromCollection = arguments.length < 3;                                                                   // 7809
                                                                                                                       // 7810
      return func(collection, getIteratee(iteratee, 4), accumulator, initFromCollection, baseEach);                    // 7811
    }                                                                                                                  // 7812
                                                                                                                       // 7813
    /**                                                                                                                // 7814
     * This method is like `_.reduce` except that it iterates over elements of                                         // 7815
     * `collection` from right to left.                                                                                // 7816
     *                                                                                                                 // 7817
     * @static                                                                                                         // 7818
     * @memberOf _                                                                                                     // 7819
     * @category Collection                                                                                            // 7820
     * @param {Array|Object} collection The collection to iterate over.                                                // 7821
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.                                     // 7822
     * @param {*} [accumulator] The initial value.                                                                     // 7823
     * @returns {*} Returns the accumulated value.                                                                     // 7824
     * @example                                                                                                        // 7825
     *                                                                                                                 // 7826
     * var array = [[0, 1], [2, 3], [4, 5]];                                                                           // 7827
     *                                                                                                                 // 7828
     * _.reduceRight(array, function(flattened, other) {                                                               // 7829
     *   return flattened.concat(other);                                                                               // 7830
     * }, []);                                                                                                         // 7831
     * // => [4, 5, 2, 3, 0, 1]                                                                                        // 7832
     */                                                                                                                // 7833
    function reduceRight(collection, iteratee, accumulator) {                                                          // 7834
      var func = isArray(collection) ? arrayReduceRight : baseReduce,                                                  // 7835
          initFromCollection = arguments.length < 3;                                                                   // 7836
                                                                                                                       // 7837
      return func(collection, getIteratee(iteratee, 4), accumulator, initFromCollection, baseEachRight);               // 7838
    }                                                                                                                  // 7839
                                                                                                                       // 7840
    /**                                                                                                                // 7841
     * The opposite of `_.filter`; this method returns the elements of `collection`                                    // 7842
     * that `predicate` does **not** return truthy for.                                                                // 7843
     *                                                                                                                 // 7844
     * @static                                                                                                         // 7845
     * @memberOf _                                                                                                     // 7846
     * @category Collection                                                                                            // 7847
     * @param {Array|Object} collection The collection to iterate over.                                                // 7848
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.                      // 7849
     * @returns {Array} Returns the new filtered array.                                                                // 7850
     * @example                                                                                                        // 7851
     *                                                                                                                 // 7852
     * var users = [                                                                                                   // 7853
     *   { 'user': 'barney', 'age': 36, 'active': false },                                                             // 7854
     *   { 'user': 'fred',   'age': 40, 'active': true }                                                               // 7855
     * ];                                                                                                              // 7856
     *                                                                                                                 // 7857
     * _.reject(users, function(o) { return !o.active; });                                                             // 7858
     * // => objects for ['fred']                                                                                      // 7859
     *                                                                                                                 // 7860
     * // using the `_.matches` iteratee shorthand                                                                     // 7861
     * _.reject(users, { 'age': 40, 'active': true });                                                                 // 7862
     * // => objects for ['barney']                                                                                    // 7863
     *                                                                                                                 // 7864
     * // using the `_.matchesProperty` iteratee shorthand                                                             // 7865
     * _.reject(users, ['active', false]);                                                                             // 7866
     * // => objects for ['fred']                                                                                      // 7867
     *                                                                                                                 // 7868
     * // using the `_.property` iteratee shorthand                                                                    // 7869
     * _.reject(users, 'active');                                                                                      // 7870
     * // => objects for ['barney']                                                                                    // 7871
     */                                                                                                                // 7872
    function reject(collection, predicate) {                                                                           // 7873
      var func = isArray(collection) ? arrayFilter : baseFilter;                                                       // 7874
      predicate = getIteratee(predicate, 3);                                                                           // 7875
      return func(collection, function(value, index, collection) {                                                     // 7876
        return !predicate(value, index, collection);                                                                   // 7877
      });                                                                                                              // 7878
    }                                                                                                                  // 7879
                                                                                                                       // 7880
    /**                                                                                                                // 7881
     * Gets a random element from `collection`.                                                                        // 7882
     *                                                                                                                 // 7883
     * @static                                                                                                         // 7884
     * @memberOf _                                                                                                     // 7885
     * @category Collection                                                                                            // 7886
     * @param {Array|Object} collection The collection to sample.                                                      // 7887
     * @returns {*} Returns the random element.                                                                        // 7888
     * @example                                                                                                        // 7889
     *                                                                                                                 // 7890
     * _.sample([1, 2, 3, 4]);                                                                                         // 7891
     * // => 2                                                                                                         // 7892
     */                                                                                                                // 7893
    function sample(collection) {                                                                                      // 7894
      var array = isArrayLike(collection) ? collection : values(collection),                                           // 7895
          length = array.length;                                                                                       // 7896
                                                                                                                       // 7897
      return length > 0 ? array[baseRandom(0, length - 1)] : undefined;                                                // 7898
    }                                                                                                                  // 7899
                                                                                                                       // 7900
    /**                                                                                                                // 7901
     * Gets `n` random elements from `collection`.                                                                     // 7902
     *                                                                                                                 // 7903
     * @static                                                                                                         // 7904
     * @memberOf _                                                                                                     // 7905
     * @category Collection                                                                                            // 7906
     * @param {Array|Object} collection The collection to sample.                                                      // 7907
     * @param {number} [n=0] The number of elements to sample.                                                         // 7908
     * @returns {Array} Returns the random elements.                                                                   // 7909
     * @example                                                                                                        // 7910
     *                                                                                                                 // 7911
     * _.sampleSize([1, 2, 3, 4], 2);                                                                                  // 7912
     * // => [3, 1]                                                                                                    // 7913
     */                                                                                                                // 7914
    function sampleSize(collection, n) {                                                                               // 7915
      var index = -1,                                                                                                  // 7916
          result = toArray(collection),                                                                                // 7917
          length = result.length,                                                                                      // 7918
          lastIndex = length - 1;                                                                                      // 7919
                                                                                                                       // 7920
      n = baseClamp(toInteger(n), 0, length);                                                                          // 7921
      while (++index < n) {                                                                                            // 7922
        var rand = baseRandom(index, lastIndex),                                                                       // 7923
            value = result[rand];                                                                                      // 7924
                                                                                                                       // 7925
        result[rand] = result[index];                                                                                  // 7926
        result[index] = value;                                                                                         // 7927
      }                                                                                                                // 7928
      result.length = n;                                                                                               // 7929
      return result;                                                                                                   // 7930
    }                                                                                                                  // 7931
                                                                                                                       // 7932
    /**                                                                                                                // 7933
     * Creates an array of shuffled values, using a version of the                                                     // 7934
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).                                     // 7935
     *                                                                                                                 // 7936
     * @static                                                                                                         // 7937
     * @memberOf _                                                                                                     // 7938
     * @category Collection                                                                                            // 7939
     * @param {Array|Object} collection The collection to shuffle.                                                     // 7940
     * @returns {Array} Returns the new shuffled array.                                                                // 7941
     * @example                                                                                                        // 7942
     *                                                                                                                 // 7943
     * _.shuffle([1, 2, 3, 4]);                                                                                        // 7944
     * // => [4, 1, 3, 2]                                                                                              // 7945
     */                                                                                                                // 7946
    function shuffle(collection) {                                                                                     // 7947
      return sampleSize(collection, MAX_ARRAY_LENGTH);                                                                 // 7948
    }                                                                                                                  // 7949
                                                                                                                       // 7950
    /**                                                                                                                // 7951
     * Gets the size of `collection` by returning its length for array-like                                            // 7952
     * values or the number of own enumerable properties for objects.                                                  // 7953
     *                                                                                                                 // 7954
     * @static                                                                                                         // 7955
     * @memberOf _                                                                                                     // 7956
     * @category Collection                                                                                            // 7957
     * @param {Array|Object} collection The collection to inspect.                                                     // 7958
     * @returns {number} Returns the collection size.                                                                  // 7959
     * @example                                                                                                        // 7960
     *                                                                                                                 // 7961
     * _.size([1, 2, 3]);                                                                                              // 7962
     * // => 3                                                                                                         // 7963
     *                                                                                                                 // 7964
     * _.size({ 'a': 1, 'b': 2 });                                                                                     // 7965
     * // => 2                                                                                                         // 7966
     *                                                                                                                 // 7967
     * _.size('pebbles');                                                                                              // 7968
     * // => 7                                                                                                         // 7969
     */                                                                                                                // 7970
    function size(collection) {                                                                                        // 7971
      if (collection == null) {                                                                                        // 7972
        return 0;                                                                                                      // 7973
      }                                                                                                                // 7974
      if (isArrayLike(collection)) {                                                                                   // 7975
        var result = collection.length;                                                                                // 7976
        return (result && isString(collection)) ? stringSize(collection) : result;                                     // 7977
      }                                                                                                                // 7978
      return keys(collection).length;                                                                                  // 7979
    }                                                                                                                  // 7980
                                                                                                                       // 7981
    /**                                                                                                                // 7982
     * Checks if `predicate` returns truthy for **any** element of `collection`.                                       // 7983
     * Iteration is stopped once `predicate` returns truthy. The predicate is                                          // 7984
     * invoked with three arguments: (value, index|key, collection).                                                   // 7985
     *                                                                                                                 // 7986
     * @static                                                                                                         // 7987
     * @memberOf _                                                                                                     // 7988
     * @category Collection                                                                                            // 7989
     * @param {Array|Object} collection The collection to iterate over.                                                // 7990
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.                      // 7991
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.                                 // 7992
     * @returns {boolean} Returns `true` if any element passes the predicate check, else `false`.                      // 7993
     * @example                                                                                                        // 7994
     *                                                                                                                 // 7995
     * _.some([null, 0, 'yes', false], Boolean);                                                                       // 7996
     * // => true                                                                                                      // 7997
     *                                                                                                                 // 7998
     * var users = [                                                                                                   // 7999
     *   { 'user': 'barney', 'active': true },                                                                         // 8000
     *   { 'user': 'fred',   'active': false }                                                                         // 8001
     * ];                                                                                                              // 8002
     *                                                                                                                 // 8003
     * // using the `_.matches` iteratee shorthand                                                                     // 8004
     * _.some(users, { 'user': 'barney', 'active': false });                                                           // 8005
     * // => false                                                                                                     // 8006
     *                                                                                                                 // 8007
     * // using the `_.matchesProperty` iteratee shorthand                                                             // 8008
     * _.some(users, ['active', false]);                                                                               // 8009
     * // => true                                                                                                      // 8010
     *                                                                                                                 // 8011
     * // using the `_.property` iteratee shorthand                                                                    // 8012
     * _.some(users, 'active');                                                                                        // 8013
     * // => true                                                                                                      // 8014
     */                                                                                                                // 8015
    function some(collection, predicate, guard) {                                                                      // 8016
      var func = isArray(collection) ? arraySome : baseSome;                                                           // 8017
      if (guard && isIterateeCall(collection, predicate, guard)) {                                                     // 8018
        predicate = undefined;                                                                                         // 8019
      }                                                                                                                // 8020
      return func(collection, getIteratee(predicate, 3));                                                              // 8021
    }                                                                                                                  // 8022
                                                                                                                       // 8023
    /**                                                                                                                // 8024
     * Creates an array of elements, sorted in ascending order by the results of                                       // 8025
     * running each element in a collection through each iteratee. This method                                         // 8026
     * performs a stable sort, that is, it preserves the original sort order of                                        // 8027
     * equal elements. The iteratees are invoked with one argument: (value).                                           // 8028
     *                                                                                                                 // 8029
     * @static                                                                                                         // 8030
     * @memberOf _                                                                                                     // 8031
     * @category Collection                                                                                            // 8032
     * @param {Array|Object} collection The collection to iterate over.                                                // 8033
     * @param {...(Function|Function[]|Object|Object[]|string|string[])} [iteratees=[_.identity]]                      // 8034
     *  The iteratees to sort by, specified individually or in arrays.                                                 // 8035
     * @returns {Array} Returns the new sorted array.                                                                  // 8036
     * @example                                                                                                        // 8037
     *                                                                                                                 // 8038
     * var users = [                                                                                                   // 8039
     *   { 'user': 'fred',   'age': 48 },                                                                              // 8040
     *   { 'user': 'barney', 'age': 36 },                                                                              // 8041
     *   { 'user': 'fred',   'age': 42 },                                                                              // 8042
     *   { 'user': 'barney', 'age': 34 }                                                                               // 8043
     * ];                                                                                                              // 8044
     *                                                                                                                 // 8045
     * _.sortBy(users, function(o) { return o.user; });                                                                // 8046
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]                                  // 8047
     *                                                                                                                 // 8048
     * _.sortBy(users, ['user', 'age']);                                                                               // 8049
     * // => objects for [['barney', 34], ['barney', 36], ['fred', 42], ['fred', 48]]                                  // 8050
     *                                                                                                                 // 8051
     * _.sortBy(users, 'user', function(o) {                                                                           // 8052
     *   return Math.floor(o.age / 10);                                                                                // 8053
     * });                                                                                                             // 8054
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]                                  // 8055
     */                                                                                                                // 8056
    var sortBy = rest(function(collection, iteratees) {                                                                // 8057
      if (collection == null) {                                                                                        // 8058
        return [];                                                                                                     // 8059
      }                                                                                                                // 8060
      var length = iteratees.length;                                                                                   // 8061
      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {                                      // 8062
        iteratees = [];                                                                                                // 8063
      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {                             // 8064
        iteratees.length = 1;                                                                                          // 8065
      }                                                                                                                // 8066
      return baseOrderBy(collection, baseFlatten(iteratees), []);                                                      // 8067
    });                                                                                                                // 8068
                                                                                                                       // 8069
    /*------------------------------------------------------------------------*/                                       // 8070
                                                                                                                       // 8071
    /**                                                                                                                // 8072
     * Gets the timestamp of the number of milliseconds that have elapsed since                                        // 8073
     * the Unix epoch (1 January 1970 00:00:00 UTC).                                                                   // 8074
     *                                                                                                                 // 8075
     * @static                                                                                                         // 8076
     * @memberOf _                                                                                                     // 8077
     * @type Function                                                                                                  // 8078
     * @category Date                                                                                                  // 8079
     * @returns {number} Returns the timestamp.                                                                        // 8080
     * @example                                                                                                        // 8081
     *                                                                                                                 // 8082
     * _.defer(function(stamp) {                                                                                       // 8083
     *   console.log(_.now() - stamp);                                                                                 // 8084
     * }, _.now());                                                                                                    // 8085
     * // => logs the number of milliseconds it took for the deferred function to be invoked                           // 8086
     */                                                                                                                // 8087
    var now = Date.now;                                                                                                // 8088
                                                                                                                       // 8089
    /*------------------------------------------------------------------------*/                                       // 8090
                                                                                                                       // 8091
    /**                                                                                                                // 8092
     * The opposite of `_.before`; this method creates a function that invokes                                         // 8093
     * `func` once it's called `n` or more times.                                                                      // 8094
     *                                                                                                                 // 8095
     * @static                                                                                                         // 8096
     * @memberOf _                                                                                                     // 8097
     * @category Function                                                                                              // 8098
     * @param {number} n The number of calls before `func` is invoked.                                                 // 8099
     * @param {Function} func The function to restrict.                                                                // 8100
     * @returns {Function} Returns the new restricted function.                                                        // 8101
     * @example                                                                                                        // 8102
     *                                                                                                                 // 8103
     * var saves = ['profile', 'settings'];                                                                            // 8104
     *                                                                                                                 // 8105
     * var done = _.after(saves.length, function() {                                                                   // 8106
     *   console.log('done saving!');                                                                                  // 8107
     * });                                                                                                             // 8108
     *                                                                                                                 // 8109
     * _.forEach(saves, function(type) {                                                                               // 8110
     *   asyncSave({ 'type': type, 'complete': done });                                                                // 8111
     * });                                                                                                             // 8112
     * // => logs 'done saving!' after the two async saves have completed                                              // 8113
     */                                                                                                                // 8114
    function after(n, func) {                                                                                          // 8115
      if (typeof func != 'function') {                                                                                 // 8116
        throw new TypeError(FUNC_ERROR_TEXT);                                                                          // 8117
      }                                                                                                                // 8118
      n = toInteger(n);                                                                                                // 8119
      return function() {                                                                                              // 8120
        if (--n < 1) {                                                                                                 // 8121
          return func.apply(this, arguments);                                                                          // 8122
        }                                                                                                              // 8123
      };                                                                                                               // 8124
    }                                                                                                                  // 8125
                                                                                                                       // 8126
    /**                                                                                                                // 8127
     * Creates a function that accepts up to `n` arguments, ignoring any                                               // 8128
     * additional arguments.                                                                                           // 8129
     *                                                                                                                 // 8130
     * @static                                                                                                         // 8131
     * @memberOf _                                                                                                     // 8132
     * @category Function                                                                                              // 8133
     * @param {Function} func The function to cap arguments for.                                                       // 8134
     * @param {number} [n=func.length] The arity cap.                                                                  // 8135
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.                                 // 8136
     * @returns {Function} Returns the new function.                                                                   // 8137
     * @example                                                                                                        // 8138
     *                                                                                                                 // 8139
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));                                                                    // 8140
     * // => [6, 8, 10]                                                                                                // 8141
     */                                                                                                                // 8142
    function ary(func, n, guard) {                                                                                     // 8143
      n = guard ? undefined : n;                                                                                       // 8144
      n = (func && n == null) ? func.length : n;                                                                       // 8145
      return createWrapper(func, ARY_FLAG, undefined, undefined, undefined, undefined, n);                             // 8146
    }                                                                                                                  // 8147
                                                                                                                       // 8148
    /**                                                                                                                // 8149
     * Creates a function that invokes `func`, with the `this` binding and arguments                                   // 8150
     * of the created function, while it's called less than `n` times. Subsequent                                      // 8151
     * calls to the created function return the result of the last `func` invocation.                                  // 8152
     *                                                                                                                 // 8153
     * @static                                                                                                         // 8154
     * @memberOf _                                                                                                     // 8155
     * @category Function                                                                                              // 8156
     * @param {number} n The number of calls at which `func` is no longer invoked.                                     // 8157
     * @param {Function} func The function to restrict.                                                                // 8158
     * @returns {Function} Returns the new restricted function.                                                        // 8159
     * @example                                                                                                        // 8160
     *                                                                                                                 // 8161
     * jQuery(element).on('click', _.before(5, addContactToList));                                                     // 8162
     * // => allows adding up to 4 contacts to the list                                                                // 8163
     */                                                                                                                // 8164
    function before(n, func) {                                                                                         // 8165
      var result;                                                                                                      // 8166
      if (typeof func != 'function') {                                                                                 // 8167
        throw new TypeError(FUNC_ERROR_TEXT);                                                                          // 8168
      }                                                                                                                // 8169
      n = toInteger(n);                                                                                                // 8170
      return function() {                                                                                              // 8171
        if (--n > 0) {                                                                                                 // 8172
          result = func.apply(this, arguments);                                                                        // 8173
        }                                                                                                              // 8174
        if (n <= 1) {                                                                                                  // 8175
          func = undefined;                                                                                            // 8176
        }                                                                                                              // 8177
        return result;                                                                                                 // 8178
      };                                                                                                               // 8179
    }                                                                                                                  // 8180
                                                                                                                       // 8181
    /**                                                                                                                // 8182
     * Creates a function that invokes `func` with the `this` binding of `thisArg`                                     // 8183
     * and prepends any additional `_.bind` arguments to those provided to the                                         // 8184
     * bound function.                                                                                                 // 8185
     *                                                                                                                 // 8186
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,                                     // 8187
     * may be used as a placeholder for partially applied arguments.                                                   // 8188
     *                                                                                                                 // 8189
     * **Note:** Unlike native `Function#bind` this method doesn't set the "length"                                    // 8190
     * property of bound functions.                                                                                    // 8191
     *                                                                                                                 // 8192
     * @static                                                                                                         // 8193
     * @memberOf _                                                                                                     // 8194
     * @category Function                                                                                              // 8195
     * @param {Function} func The function to bind.                                                                    // 8196
     * @param {*} thisArg The `this` binding of `func`.                                                                // 8197
     * @param {...*} [partials] The arguments to be partially applied.                                                 // 8198
     * @returns {Function} Returns the new bound function.                                                             // 8199
     * @example                                                                                                        // 8200
     *                                                                                                                 // 8201
     * var greet = function(greeting, punctuation) {                                                                   // 8202
     *   return greeting + ' ' + this.user + punctuation;                                                              // 8203
     * };                                                                                                              // 8204
     *                                                                                                                 // 8205
     * var object = { 'user': 'fred' };                                                                                // 8206
     *                                                                                                                 // 8207
     * var bound = _.bind(greet, object, 'hi');                                                                        // 8208
     * bound('!');                                                                                                     // 8209
     * // => 'hi fred!'                                                                                                // 8210
     *                                                                                                                 // 8211
     * // using placeholders                                                                                           // 8212
     * var bound = _.bind(greet, object, _, '!');                                                                      // 8213
     * bound('hi');                                                                                                    // 8214
     * // => 'hi fred!'                                                                                                // 8215
     */                                                                                                                // 8216
    var bind = rest(function(func, thisArg, partials) {                                                                // 8217
      var bitmask = BIND_FLAG;                                                                                         // 8218
      if (partials.length) {                                                                                           // 8219
        var holders = replaceHolders(partials, bind.placeholder);                                                      // 8220
        bitmask |= PARTIAL_FLAG;                                                                                       // 8221
      }                                                                                                                // 8222
      return createWrapper(func, bitmask, thisArg, partials, holders);                                                 // 8223
    });                                                                                                                // 8224
                                                                                                                       // 8225
    /**                                                                                                                // 8226
     * Creates a function that invokes the method at `object[key]` and prepends                                        // 8227
     * any additional `_.bindKey` arguments to those provided to the bound function.                                   // 8228
     *                                                                                                                 // 8229
     * This method differs from `_.bind` by allowing bound functions to reference                                      // 8230
     * methods that may be redefined or don't yet exist.                                                               // 8231
     * See [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)                // 8232
     * for more details.                                                                                               // 8233
     *                                                                                                                 // 8234
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic                                          // 8235
     * builds, may be used as a placeholder for partially applied arguments.                                           // 8236
     *                                                                                                                 // 8237
     * @static                                                                                                         // 8238
     * @memberOf _                                                                                                     // 8239
     * @category Function                                                                                              // 8240
     * @param {Object} object The object to invoke the method on.                                                      // 8241
     * @param {string} key The key of the method.                                                                      // 8242
     * @param {...*} [partials] The arguments to be partially applied.                                                 // 8243
     * @returns {Function} Returns the new bound function.                                                             // 8244
     * @example                                                                                                        // 8245
     *                                                                                                                 // 8246
     * var object = {                                                                                                  // 8247
     *   'user': 'fred',                                                                                               // 8248
     *   'greet': function(greeting, punctuation) {                                                                    // 8249
     *     return greeting + ' ' + this.user + punctuation;                                                            // 8250
     *   }                                                                                                             // 8251
     * };                                                                                                              // 8252
     *                                                                                                                 // 8253
     * var bound = _.bindKey(object, 'greet', 'hi');                                                                   // 8254
     * bound('!');                                                                                                     // 8255
     * // => 'hi fred!'                                                                                                // 8256
     *                                                                                                                 // 8257
     * object.greet = function(greeting, punctuation) {                                                                // 8258
     *   return greeting + 'ya ' + this.user + punctuation;                                                            // 8259
     * };                                                                                                              // 8260
     *                                                                                                                 // 8261
     * bound('!');                                                                                                     // 8262
     * // => 'hiya fred!'                                                                                              // 8263
     *                                                                                                                 // 8264
     * // using placeholders                                                                                           // 8265
     * var bound = _.bindKey(object, 'greet', _, '!');                                                                 // 8266
     * bound('hi');                                                                                                    // 8267
     * // => 'hiya fred!'                                                                                              // 8268
     */                                                                                                                // 8269
    var bindKey = rest(function(object, key, partials) {                                                               // 8270
      var bitmask = BIND_FLAG | BIND_KEY_FLAG;                                                                         // 8271
      if (partials.length) {                                                                                           // 8272
        var holders = replaceHolders(partials, bindKey.placeholder);                                                   // 8273
        bitmask |= PARTIAL_FLAG;                                                                                       // 8274
      }                                                                                                                // 8275
      return createWrapper(key, bitmask, object, partials, holders);                                                   // 8276
    });                                                                                                                // 8277
                                                                                                                       // 8278
    /**                                                                                                                // 8279
     * Creates a function that accepts arguments of `func` and either invokes                                          // 8280
     * `func` returning its result, if at least `arity` number of arguments have                                       // 8281
     * been provided, or returns a function that accepts the remaining `func`                                          // 8282
     * arguments, and so on. The arity of `func` may be specified if `func.length`                                     // 8283
     * is not sufficient.                                                                                              // 8284
     *                                                                                                                 // 8285
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,                                    // 8286
     * may be used as a placeholder for provided arguments.                                                            // 8287
     *                                                                                                                 // 8288
     * **Note:** This method doesn't set the "length" property of curried functions.                                   // 8289
     *                                                                                                                 // 8290
     * @static                                                                                                         // 8291
     * @memberOf _                                                                                                     // 8292
     * @category Function                                                                                              // 8293
     * @param {Function} func The function to curry.                                                                   // 8294
     * @param {number} [arity=func.length] The arity of `func`.                                                        // 8295
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.                                 // 8296
     * @returns {Function} Returns the new curried function.                                                           // 8297
     * @example                                                                                                        // 8298
     *                                                                                                                 // 8299
     * var abc = function(a, b, c) {                                                                                   // 8300
     *   return [a, b, c];                                                                                             // 8301
     * };                                                                                                              // 8302
     *                                                                                                                 // 8303
     * var curried = _.curry(abc);                                                                                     // 8304
     *                                                                                                                 // 8305
     * curried(1)(2)(3);                                                                                               // 8306
     * // => [1, 2, 3]                                                                                                 // 8307
     *                                                                                                                 // 8308
     * curried(1, 2)(3);                                                                                               // 8309
     * // => [1, 2, 3]                                                                                                 // 8310
     *                                                                                                                 // 8311
     * curried(1, 2, 3);                                                                                               // 8312
     * // => [1, 2, 3]                                                                                                 // 8313
     *                                                                                                                 // 8314
     * // using placeholders                                                                                           // 8315
     * curried(1)(_, 3)(2);                                                                                            // 8316
     * // => [1, 2, 3]                                                                                                 // 8317
     */                                                                                                                // 8318
    function curry(func, arity, guard) {                                                                               // 8319
      arity = guard ? undefined : arity;                                                                               // 8320
      var result = createWrapper(func, CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);      // 8321
      result.placeholder = curry.placeholder;                                                                          // 8322
      return result;                                                                                                   // 8323
    }                                                                                                                  // 8324
                                                                                                                       // 8325
    /**                                                                                                                // 8326
     * This method is like `_.curry` except that arguments are applied to `func`                                       // 8327
     * in the manner of `_.partialRight` instead of `_.partial`.                                                       // 8328
     *                                                                                                                 // 8329
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic                                       // 8330
     * builds, may be used as a placeholder for provided arguments.                                                    // 8331
     *                                                                                                                 // 8332
     * **Note:** This method doesn't set the "length" property of curried functions.                                   // 8333
     *                                                                                                                 // 8334
     * @static                                                                                                         // 8335
     * @memberOf _                                                                                                     // 8336
     * @category Function                                                                                              // 8337
     * @param {Function} func The function to curry.                                                                   // 8338
     * @param {number} [arity=func.length] The arity of `func`.                                                        // 8339
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.                                 // 8340
     * @returns {Function} Returns the new curried function.                                                           // 8341
     * @example                                                                                                        // 8342
     *                                                                                                                 // 8343
     * var abc = function(a, b, c) {                                                                                   // 8344
     *   return [a, b, c];                                                                                             // 8345
     * };                                                                                                              // 8346
     *                                                                                                                 // 8347
     * var curried = _.curryRight(abc);                                                                                // 8348
     *                                                                                                                 // 8349
     * curried(3)(2)(1);                                                                                               // 8350
     * // => [1, 2, 3]                                                                                                 // 8351
     *                                                                                                                 // 8352
     * curried(2, 3)(1);                                                                                               // 8353
     * // => [1, 2, 3]                                                                                                 // 8354
     *                                                                                                                 // 8355
     * curried(1, 2, 3);                                                                                               // 8356
     * // => [1, 2, 3]                                                                                                 // 8357
     *                                                                                                                 // 8358
     * // using placeholders                                                                                           // 8359
     * curried(3)(1, _)(2);                                                                                            // 8360
     * // => [1, 2, 3]                                                                                                 // 8361
     */                                                                                                                // 8362
    function curryRight(func, arity, guard) {                                                                          // 8363
      arity = guard ? undefined : arity;                                                                               // 8364
      var result = createWrapper(func, CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curryRight.placeholder;                                                                     // 8366
      return result;                                                                                                   // 8367
    }                                                                                                                  // 8368
                                                                                                                       // 8369
    /**                                                                                                                // 8370
     * Creates a debounced function that delays invoking `func` until after `wait`                                     // 8371
     * milliseconds have elapsed since the last time the debounced function was                                        // 8372
     * invoked. The debounced function comes with a `cancel` method to cancel                                          // 8373
     * delayed `func` invocations and a `flush` method to immediately invoke them.                                     // 8374
     * Provide an options object to indicate whether `func` should be invoked on                                       // 8375
     * the leading and/or trailing edge of the `wait` timeout. The `func` is invoked                                   // 8376
     * with the last arguments provided to the debounced function. Subsequent calls                                    // 8377
     * to the debounced function return the result of the last `func` invocation.                                      // 8378
     *                                                                                                                 // 8379
     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked                                     // 8380
     * on the trailing edge of the timeout only if the the debounced function is                                       // 8381
     * invoked more than once during the `wait` timeout.                                                               // 8382
     *                                                                                                                 // 8383
     * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)        // 8384
     * for details over the differences between `_.debounce` and `_.throttle`.                                         // 8385
     *                                                                                                                 // 8386
     * @static                                                                                                         // 8387
     * @memberOf _                                                                                                     // 8388
     * @category Function                                                                                              // 8389
     * @param {Function} func The function to debounce.                                                                // 8390
     * @param {number} [wait=0] The number of milliseconds to delay.                                                   // 8391
     * @param {Object} [options] The options object.                                                                   // 8392
     * @param {boolean} [options.leading=false] Specify invoking on the leading                                        // 8393
     *  edge of the timeout.                                                                                           // 8394
     * @param {number} [options.maxWait] The maximum time `func` is allowed to be                                      // 8395
     *  delayed before it's invoked.                                                                                   // 8396
     * @param {boolean} [options.trailing=true] Specify invoking on the trailing                                       // 8397
     *  edge of the timeout.                                                                                           // 8398
     * @returns {Function} Returns the new debounced function.                                                         // 8399
     * @example                                                                                                        // 8400
     *                                                                                                                 // 8401
     * // avoid costly calculations while the window size is in flux                                                   // 8402
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));                                                  // 8403
     *                                                                                                                 // 8404
     * // invoke `sendMail` when clicked, debouncing subsequent calls                                                  // 8405
     * jQuery(element).on('click', _.debounce(sendMail, 300, {                                                         // 8406
     *   'leading': true,                                                                                              // 8407
     *   'trailing': false                                                                                             // 8408
     * }));                                                                                                            // 8409
     *                                                                                                                 // 8410
     * // ensure `batchLog` is invoked once after 1 second of debounced calls                                          // 8411
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });                                                 // 8412
     * var source = new EventSource('/stream');                                                                        // 8413
     * jQuery(source).on('message', debounced);                                                                        // 8414
     *                                                                                                                 // 8415
     * // cancel a trailing debounced invocation                                                                       // 8416
     * jQuery(window).on('popstate', debounced.cancel);                                                                // 8417
     */                                                                                                                // 8418
    function debounce(func, wait, options) {                                                                           // 8419
      var args,                                                                                                        // 8420
          maxTimeoutId,                                                                                                // 8421
          result,                                                                                                      // 8422
          stamp,                                                                                                       // 8423
          thisArg,                                                                                                     // 8424
          timeoutId,                                                                                                   // 8425
          trailingCall,                                                                                                // 8426
          lastCalled = 0,                                                                                              // 8427
          leading = false,                                                                                             // 8428
          maxWait = false,                                                                                             // 8429
          trailing = true;                                                                                             // 8430
                                                                                                                       // 8431
      if (typeof func != 'function') {                                                                                 // 8432
        throw new TypeError(FUNC_ERROR_TEXT);                                                                          // 8433
      }                                                                                                                // 8434
      wait = toNumber(wait) || 0;                                                                                      // 8435
      if (isObject(options)) {                                                                                         // 8436
        leading = !!options.leading;                                                                                   // 8437
        maxWait = 'maxWait' in options && nativeMax(toNumber(options.maxWait) || 0, wait);                             // 8438
        trailing = 'trailing' in options ? !!options.trailing : trailing;                                              // 8439
      }                                                                                                                // 8440
                                                                                                                       // 8441
      function cancel() {                                                                                              // 8442
        if (timeoutId) {                                                                                               // 8443
          clearTimeout(timeoutId);                                                                                     // 8444
        }                                                                                                              // 8445
        if (maxTimeoutId) {                                                                                            // 8446
          clearTimeout(maxTimeoutId);                                                                                  // 8447
        }                                                                                                              // 8448
        lastCalled = 0;                                                                                                // 8449
        args = maxTimeoutId = thisArg = timeoutId = trailingCall = undefined;                                          // 8450
      }                                                                                                                // 8451
                                                                                                                       // 8452
      function complete(isCalled, id) {                                                                                // 8453
        if (id) {                                                                                                      // 8454
          clearTimeout(id);                                                                                            // 8455
        }                                                                                                              // 8456
        maxTimeoutId = timeoutId = trailingCall = undefined;                                                           // 8457
        if (isCalled) {                                                                                                // 8458
          lastCalled = now();                                                                                          // 8459
          result = func.apply(thisArg, args);                                                                          // 8460
          if (!timeoutId && !maxTimeoutId) {                                                                           // 8461
            args = thisArg = undefined;                                                                                // 8462
          }                                                                                                            // 8463
        }                                                                                                              // 8464
      }                                                                                                                // 8465
                                                                                                                       // 8466
      function delayed() {                                                                                             // 8467
        var remaining = wait - (now() - stamp);                                                                        // 8468
        if (remaining <= 0 || remaining > wait) {                                                                      // 8469
          complete(trailingCall, maxTimeoutId);                                                                        // 8470
        } else {                                                                                                       // 8471
          timeoutId = setTimeout(delayed, remaining);                                                                  // 8472
        }                                                                                                              // 8473
      }                                                                                                                // 8474
                                                                                                                       // 8475
      function flush() {                                                                                               // 8476
        if ((timeoutId && trailingCall) || (maxTimeoutId && trailing)) {                                               // 8477
          result = func.apply(thisArg, args);                                                                          // 8478
        }                                                                                                              // 8479
        cancel();                                                                                                      // 8480
        return result;                                                                                                 // 8481
      }                                                                                                                // 8482
                                                                                                                       // 8483
      function maxDelayed() {                                                                                          // 8484
        complete(trailing, timeoutId);                                                                                 // 8485
      }                                                                                                                // 8486
                                                                                                                       // 8487
      function debounced() {                                                                                           // 8488
        args = arguments;                                                                                              // 8489
        stamp = now();                                                                                                 // 8490
        thisArg = this;                                                                                                // 8491
        trailingCall = trailing && (timeoutId || !leading);                                                            // 8492
                                                                                                                       // 8493
        if (maxWait === false) {                                                                                       // 8494
          var leadingCall = leading && !timeoutId;                                                                     // 8495
        } else {                                                                                                       // 8496
          if (!maxTimeoutId && !leading) {                                                                             // 8497
            lastCalled = stamp;                                                                                        // 8498
          }                                                                                                            // 8499
          var remaining = maxWait - (stamp - lastCalled),                                                              // 8500
              isCalled = remaining <= 0 || remaining > maxWait;                                                        // 8501
                                                                                                                       // 8502
          if (isCalled) {                                                                                              // 8503
            if (maxTimeoutId) {                                                                                        // 8504
              maxTimeoutId = clearTimeout(maxTimeoutId);                                                               // 8505
            }                                                                                                          // 8506
            lastCalled = stamp;                                                                                        // 8507
            result = func.apply(thisArg, args);                                                                        // 8508
          }                                                                                                            // 8509
          else if (!maxTimeoutId) {                                                                                    // 8510
            maxTimeoutId = setTimeout(maxDelayed, remaining);                                                          // 8511
          }                                                                                                            // 8512
        }                                                                                                              // 8513
        if (isCalled && timeoutId) {                                                                                   // 8514
          timeoutId = clearTimeout(timeoutId);                                                                         // 8515
        }                                                                                                              // 8516
        else if (!timeoutId && wait !== maxWait) {                                                                     // 8517
          timeoutId = setTimeout(delayed, wait);                                                                       // 8518
        }                                                                                                              // 8519
        if (leadingCall) {                                                                                             // 8520
          isCalled = true;                                                                                             // 8521
          result = func.apply(thisArg, args);                                                                          // 8522
        }                                                                                                              // 8523
        if (isCalled && !timeoutId && !maxTimeoutId) {                                                                 // 8524
          args = thisArg = undefined;                                                                                  // 8525
        }                                                                                                              // 8526
        return result;                                                                                                 // 8527
      }                                                                                                                // 8528
      debounced.cancel = cancel;                                                                                       // 8529
      debounced.flush = flush;                                                                                         // 8530
      return debounced;                                                                                                // 8531
    }                                                                                                                  // 8532
                                                                                                                       // 8533
    /**                                                                                                                // 8534
     * Defers invoking the `func` until the current call stack has cleared. Any                                        // 8535
     * additional arguments are provided to `func` when it's invoked.                                                  // 8536
     *                                                                                                                 // 8537
     * @static                                                                                                         // 8538
     * @memberOf _                                                                                                     // 8539
     * @category Function                                                                                              // 8540
     * @param {Function} func The function to defer.                                                                   // 8541
     * @param {...*} [args] The arguments to invoke `func` with.                                                       // 8542
     * @returns {number} Returns the timer id.                                                                         // 8543
     * @example                                                                                                        // 8544
     *                                                                                                                 // 8545
     * _.defer(function(text) {                                                                                        // 8546
     *   console.log(text);                                                                                            // 8547
     * }, 'deferred');                                                                                                 // 8548
     * // logs 'deferred' after one or more milliseconds                                                               // 8549
     */                                                                                                                // 8550
    var defer = rest(function(func, args) {                                                                            // 8551
      return baseDelay(func, 1, args);                                                                                 // 8552
    });                                                                                                                // 8553
                                                                                                                       // 8554
    /**                                                                                                                // 8555
     * Invokes `func` after `wait` milliseconds. Any additional arguments are                                          // 8556
     * provided to `func` when it's invoked.                                                                           // 8557
     *                                                                                                                 // 8558
     * @static                                                                                                         // 8559
     * @memberOf _                                                                                                     // 8560
     * @category Function                                                                                              // 8561
     * @param {Function} func The function to delay.                                                                   // 8562
     * @param {number} wait The number of milliseconds to delay invocation.                                            // 8563
     * @param {...*} [args] The arguments to invoke `func` with.                                                       // 8564
     * @returns {number} Returns the timer id.                                                                         // 8565
     * @example                                                                                                        // 8566
     *                                                                                                                 // 8567
     * _.delay(function(text) {                                                                                        // 8568
     *   console.log(text);                                                                                            // 8569
     * }, 1000, 'later');                                                                                              // 8570
     * // => logs 'later' after one second                                                                             // 8571
     */                                                                                                                // 8572
    var delay = rest(function(func, wait, args) {                                                                      // 8573
      return baseDelay(func, toNumber(wait) || 0, args);                                                               // 8574
    });                                                                                                                // 8575
                                                                                                                       // 8576
    /**                                                                                                                // 8577
     * Creates a function that invokes `func` with arguments reversed.                                                 // 8578
     *                                                                                                                 // 8579
     * @static                                                                                                         // 8580
     * @memberOf _                                                                                                     // 8581
     * @category Function                                                                                              // 8582
     * @param {Function} func The function to flip arguments for.                                                      // 8583
     * @returns {Function} Returns the new function.                                                                   // 8584
     * @example                                                                                                        // 8585
     *                                                                                                                 // 8586
     * var flipped = _.flip(function() {                                                                               // 8587
     *   return _.toArray(arguments);                                                                                  // 8588
     * });                                                                                                             // 8589
     *                                                                                                                 // 8590
     * flipped('a', 'b', 'c', 'd');                                                                                    // 8591
     * // => ['d', 'c', 'b', 'a']                                                                                      // 8592
     */                                                                                                                // 8593
    function flip(func) {                                                                                              // 8594
      return createWrapper(func, FLIP_FLAG);                                                                           // 8595
    }                                                                                                                  // 8596
                                                                                                                       // 8597
    /**                                                                                                                // 8598
     * Creates a function that memoizes the result of `func`. If `resolver` is                                         // 8599
     * provided it determines the cache key for storing the result based on the                                        // 8600
     * arguments provided to the memoized function. By default, the first argument                                     // 8601
     * provided to the memoized function is used as the map cache key. The `func`                                      // 8602
     * is invoked with the `this` binding of the memoized function.                                                    // 8603
     *                                                                                                                 // 8604
     * **Note:** The cache is exposed as the `cache` property on the memoized                                          // 8605
     * function. Its creation may be customized by replacing the `_.memoize.Cache`                                     // 8606
     * constructor with one whose instances implement the [`Map`](http://ecma-international.org/ecma-262/6.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `delete`, `get`, `has`, and `set`.                                                          // 8608
     *                                                                                                                 // 8609
     * @static                                                                                                         // 8610
     * @memberOf _                                                                                                     // 8611
     * @category Function                                                                                              // 8612
     * @param {Function} func The function to have its output memoized.                                                // 8613
     * @param {Function} [resolver] The function to resolve the cache key.                                             // 8614
     * @returns {Function} Returns the new memoizing function.                                                         // 8615
     * @example                                                                                                        // 8616
     *                                                                                                                 // 8617
     * var object = { 'a': 1, 'b': 2 };                                                                                // 8618
     * var other = { 'c': 3, 'd': 4 };                                                                                 // 8619
     *                                                                                                                 // 8620
     * var values = _.memoize(_.values);                                                                               // 8621
     * values(object);                                                                                                 // 8622
     * // => [1, 2]                                                                                                    // 8623
     *                                                                                                                 // 8624
     * values(other);                                                                                                  // 8625
     * // => [3, 4]                                                                                                    // 8626
     *                                                                                                                 // 8627
     * object.a = 2;                                                                                                   // 8628
     * values(object);                                                                                                 // 8629
     * // => [1, 2]                                                                                                    // 8630
     *                                                                                                                 // 8631
     * // modifying the result cache                                                                                   // 8632
     * values.cache.set(object, ['a', 'b']);                                                                           // 8633
     * values(object);                                                                                                 // 8634
     * // => ['a', 'b']                                                                                                // 8635
     *                                                                                                                 // 8636
     * // replacing `_.memoize.Cache`                                                                                  // 8637
     * _.memoize.Cache = WeakMap;                                                                                      // 8638
     */                                                                                                                // 8639
    function memoize(func, resolver) {                                                                                 // 8640
      if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {                                  // 8641
        throw new TypeError(FUNC_ERROR_TEXT);                                                                          // 8642
      }                                                                                                                // 8643
      var memoized = function() {                                                                                      // 8644
        var args = arguments,                                                                                          // 8645
            key = resolver ? resolver.apply(this, args) : args[0],                                                     // 8646
            cache = memoized.cache;                                                                                    // 8647
                                                                                                                       // 8648
        if (cache.has(key)) {                                                                                          // 8649
          return cache.get(key);                                                                                       // 8650
        }                                                                                                              // 8651
        var result = func.apply(this, args);                                                                           // 8652
        memoized.cache = cache.set(key, result);                                                                       // 8653
        return result;                                                                                                 // 8654
      };                                                                                                               // 8655
      memoized.cache = new memoize.Cache;                                                                              // 8656
      return memoized;                                                                                                 // 8657
    }                                                                                                                  // 8658
                                                                                                                       // 8659
    /**                                                                                                                // 8660
     * Creates a function that negates the result of the predicate `func`. The                                         // 8661
     * `func` predicate is invoked with the `this` binding and arguments of the                                        // 8662
     * created function.                                                                                               // 8663
     *                                                                                                                 // 8664
     * @static                                                                                                         // 8665
     * @memberOf _                                                                                                     // 8666
     * @category Function                                                                                              // 8667
     * @param {Function} predicate The predicate to negate.                                                            // 8668
     * @returns {Function} Returns the new function.                                                                   // 8669
     * @example                                                                                                        // 8670
     *                                                                                                                 // 8671
     * function isEven(n) {                                                                                            // 8672
     *   return n % 2 == 0;                                                                                            // 8673
     * }                                                                                                               // 8674
     *                                                                                                                 // 8675
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));                                                                 // 8676
     * // => [1, 3, 5]                                                                                                 // 8677
     */                                                                                                                // 8678
    function negate(predicate) {                                                                                       // 8679
      if (typeof predicate != 'function') {                                                                            // 8680
        throw new TypeError(FUNC_ERROR_TEXT);                                                                          // 8681
      }                                                                                                                // 8682
      return function() {                                                                                              // 8683
        return !predicate.apply(this, arguments);                                                                      // 8684
      };                                                                                                               // 8685
    }                                                                                                                  // 8686
                                                                                                                       // 8687
    /**                                                                                                                // 8688
     * Creates a function that is restricted to invoking `func` once. Repeat calls                                     // 8689
     * to the function return the value of the first invocation. The `func` is                                         // 8690
     * invoked with the `this` binding and arguments of the created function.                                          // 8691
     *                                                                                                                 // 8692
     * @static                                                                                                         // 8693
     * @memberOf _                                                                                                     // 8694
     * @category Function                                                                                              // 8695
     * @param {Function} func The function to restrict.                                                                // 8696
     * @returns {Function} Returns the new restricted function.                                                        // 8697
     * @example                                                                                                        // 8698
     *                                                                                                                 // 8699
     * var initialize = _.once(createApplication);                                                                     // 8700
     * initialize();                                                                                                   // 8701
     * initialize();                                                                                                   // 8702
     * // `initialize` invokes `createApplication` once                                                                // 8703
     */                                                                                                                // 8704
    function once(func) {                                                                                              // 8705
      return before(2, func);                                                                                          // 8706
    }                                                                                                                  // 8707
                                                                                                                       // 8708
    /**                                                                                                                // 8709
     * Creates a function that invokes `func` with arguments transformed by                                            // 8710
     * corresponding `transforms`.                                                                                     // 8711
     *                                                                                                                 // 8712
     * @static                                                                                                         // 8713
     * @memberOf _                                                                                                     // 8714
     * @category Function                                                                                              // 8715
     * @param {Function} func The function to wrap.                                                                    // 8716
     * @param {...(Function|Function[])} [transforms] The functions to transform                                       // 8717
     * arguments, specified individually or in arrays.                                                                 // 8718
     * @returns {Function} Returns the new function.                                                                   // 8719
     * @example                                                                                                        // 8720
     *                                                                                                                 // 8721
     * function doubled(n) {                                                                                           // 8722
     *   return n * 2;                                                                                                 // 8723
     * }                                                                                                               // 8724
     *                                                                                                                 // 8725
     * function square(n) {                                                                                            // 8726
     *   return n * n;                                                                                                 // 8727
     * }                                                                                                               // 8728
     *                                                                                                                 // 8729
     * var func = _.overArgs(function(x, y) {                                                                          // 8730
     *   return [x, y];                                                                                                // 8731
     * }, square, doubled);                                                                                            // 8732
     *                                                                                                                 // 8733
     * func(9, 3);                                                                                                     // 8734
     * // => [81, 6]                                                                                                   // 8735
     *                                                                                                                 // 8736
     * func(10, 5);                                                                                                    // 8737
     * // => [100, 10]                                                                                                 // 8738
     */                                                                                                                // 8739
    var overArgs = rest(function(func, transforms) {                                                                   // 8740
      transforms = arrayMap(baseFlatten(transforms), getIteratee());                                                   // 8741
                                                                                                                       // 8742
      var funcsLength = transforms.length;                                                                             // 8743
      return rest(function(args) {                                                                                     // 8744
        var index = -1,                                                                                                // 8745
            length = nativeMin(args.length, funcsLength);                                                              // 8746
                                                                                                                       // 8747
        while (++index < length) {                                                                                     // 8748
          args[index] = transforms[index].call(this, args[index]);                                                     // 8749
        }                                                                                                              // 8750
        return apply(func, this, args);                                                                                // 8751
      });                                                                                                              // 8752
    });                                                                                                                // 8753
                                                                                                                       // 8754
    /**                                                                                                                // 8755
     * Creates a function that invokes `func` with `partial` arguments prepended                                       // 8756
     * to those provided to the new function. This method is like `_.bind` except                                      // 8757
     * it does **not** alter the `this` binding.                                                                       // 8758
     *                                                                                                                 // 8759
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic                                          // 8760
     * builds, may be used as a placeholder for partially applied arguments.                                           // 8761
     *                                                                                                                 // 8762
     * **Note:** This method doesn't set the "length" property of partially                                            // 8763
     * applied functions.                                                                                              // 8764
     *                                                                                                                 // 8765
     * @static                                                                                                         // 8766
     * @memberOf _                                                                                                     // 8767
     * @category Function                                                                                              // 8768
     * @param {Function} func The function to partially apply arguments to.                                            // 8769
     * @param {...*} [partials] The arguments to be partially applied.                                                 // 8770
     * @returns {Function} Returns the new partially applied function.                                                 // 8771
     * @example                                                                                                        // 8772
     *                                                                                                                 // 8773
     * var greet = function(greeting, name) {                                                                          // 8774
     *   return greeting + ' ' + name;                                                                                 // 8775
     * };                                                                                                              // 8776
     *                                                                                                                 // 8777
     * var sayHelloTo = _.partial(greet, 'hello');                                                                     // 8778
     * sayHelloTo('fred');                                                                                             // 8779
     * // => 'hello fred'                                                                                              // 8780
     *                                                                                                                 // 8781
     * // using placeholders                                                                                           // 8782
     * var greetFred = _.partial(greet, _, 'fred');                                                                    // 8783
     * greetFred('hi');                                                                                                // 8784
     * // => 'hi fred'                                                                                                 // 8785
     */                                                                                                                // 8786
    var partial = rest(function(func, partials) {                                                                      // 8787
      var holders = replaceHolders(partials, partial.placeholder);                                                     // 8788
      return createWrapper(func, PARTIAL_FLAG, undefined, partials, holders);                                          // 8789
    });                                                                                                                // 8790
                                                                                                                       // 8791
    /**                                                                                                                // 8792
     * This method is like `_.partial` except that partially applied arguments                                         // 8793
     * are appended to those provided to the new function.                                                             // 8794
     *                                                                                                                 // 8795
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic                                     // 8796
     * builds, may be used as a placeholder for partially applied arguments.                                           // 8797
     *                                                                                                                 // 8798
     * **Note:** This method doesn't set the "length" property of partially                                            // 8799
     * applied functions.                                                                                              // 8800
     *                                                                                                                 // 8801
     * @static                                                                                                         // 8802
     * @memberOf _                                                                                                     // 8803
     * @category Function                                                                                              // 8804
     * @param {Function} func The function to partially apply arguments to.                                            // 8805
     * @param {...*} [partials] The arguments to be partially applied.                                                 // 8806
     * @returns {Function} Returns the new partially applied function.                                                 // 8807
     * @example                                                                                                        // 8808
     *                                                                                                                 // 8809
     * var greet = function(greeting, name) {                                                                          // 8810
     *   return greeting + ' ' + name;                                                                                 // 8811
     * };                                                                                                              // 8812
     *                                                                                                                 // 8813
     * var greetFred = _.partialRight(greet, 'fred');                                                                  // 8814
     * greetFred('hi');                                                                                                // 8815
     * // => 'hi fred'                                                                                                 // 8816
     *                                                                                                                 // 8817
     * // using placeholders                                                                                           // 8818
     * var sayHelloTo = _.partialRight(greet, 'hello', _);                                                             // 8819
     * sayHelloTo('fred');                                                                                             // 8820
     * // => 'hello fred'                                                                                              // 8821
     */                                                                                                                // 8822
    var partialRight = rest(function(func, partials) {                                                                 // 8823
      var holders = replaceHolders(partials, partialRight.placeholder);                                                // 8824
      return createWrapper(func, PARTIAL_RIGHT_FLAG, undefined, partials, holders);                                    // 8825
    });                                                                                                                // 8826
                                                                                                                       // 8827
    /**                                                                                                                // 8828
     * Creates a function that invokes `func` with arguments arranged according                                        // 8829
     * to the specified indexes where the argument value at the first index is                                         // 8830
     * provided as the first argument, the argument value at the second index is                                       // 8831
     * provided as the second argument, and so on.                                                                     // 8832
     *                                                                                                                 // 8833
     * @static                                                                                                         // 8834
     * @memberOf _                                                                                                     // 8835
     * @category Function                                                                                              // 8836
     * @param {Function} func The function to rearrange arguments for.                                                 // 8837
     * @param {...(number|number[])} indexes The arranged argument indexes,                                            // 8838
     *  specified individually or in arrays.                                                                           // 8839
     * @returns {Function} Returns the new function.                                                                   // 8840
     * @example                                                                                                        // 8841
     *                                                                                                                 // 8842
     * var rearged = _.rearg(function(a, b, c) {                                                                       // 8843
     *   return [a, b, c];                                                                                             // 8844
     * }, 2, 0, 1);                                                                                                    // 8845
     *                                                                                                                 // 8846
     * rearged('b', 'c', 'a')                                                                                          // 8847
     * // => ['a', 'b', 'c']                                                                                           // 8848
     */                                                                                                                // 8849
    var rearg = rest(function(func, indexes) {                                                                         // 8850
      return createWrapper(func, REARG_FLAG, undefined, undefined, undefined, baseFlatten(indexes));                   // 8851
    });                                                                                                                // 8852
                                                                                                                       // 8853
    /**                                                                                                                // 8854
     * Creates a function that invokes `func` with the `this` binding of the                                           // 8855
     * created function and arguments from `start` and beyond provided as an array.                                    // 8856
     *                                                                                                                 // 8857
     * **Note:** This method is based on the [rest parameter](https://mdn.io/rest_parameters).                         // 8858
     *                                                                                                                 // 8859
     * @static                                                                                                         // 8860
     * @memberOf _                                                                                                     // 8861
     * @category Function                                                                                              // 8862
     * @param {Function} func The function to apply a rest parameter to.                                               // 8863
     * @param {number} [start=func.length-1] The start position of the rest parameter.                                 // 8864
     * @returns {Function} Returns the new function.                                                                   // 8865
     * @example                                                                                                        // 8866
     *                                                                                                                 // 8867
     * var say = _.rest(function(what, names) {                                                                        // 8868
     *   return what + ' ' + _.initial(names).join(', ') +                                                             // 8869
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);                                                          // 8870
     * });                                                                                                             // 8871
     *                                                                                                                 // 8872
     * say('hello', 'fred', 'barney', 'pebbles');                                                                      // 8873
     * // => 'hello fred, barney, & pebbles'                                                                           // 8874
     */                                                                                                                // 8875
    function rest(func, start) {                                                                                       // 8876
      if (typeof func != 'function') {                                                                                 // 8877
        throw new TypeError(FUNC_ERROR_TEXT);                                                                          // 8878
      }                                                                                                                // 8879
      start = nativeMax(start === undefined ? (func.length - 1) : toInteger(start), 0);                                // 8880
      return function() {                                                                                              // 8881
        var args = arguments,                                                                                          // 8882
            index = -1,                                                                                                // 8883
            length = nativeMax(args.length - start, 0),                                                                // 8884
            array = Array(length);                                                                                     // 8885
                                                                                                                       // 8886
        while (++index < length) {                                                                                     // 8887
          array[index] = args[start + index];                                                                          // 8888
        }                                                                                                              // 8889
        switch (start) {                                                                                               // 8890
          case 0: return func.call(this, array);                                                                       // 8891
          case 1: return func.call(this, args[0], array);                                                              // 8892
          case 2: return func.call(this, args[0], args[1], array);                                                     // 8893
        }                                                                                                              // 8894
        var otherArgs = Array(start + 1);                                                                              // 8895
        index = -1;                                                                                                    // 8896
        while (++index < start) {                                                                                      // 8897
          otherArgs[index] = args[index];                                                                              // 8898
        }                                                                                                              // 8899
        otherArgs[start] = array;                                                                                      // 8900
        return apply(func, this, otherArgs);                                                                           // 8901
      };                                                                                                               // 8902
    }                                                                                                                  // 8903
                                                                                                                       // 8904
    /**                                                                                                                // 8905
     * Creates a function that invokes `func` with the `this` binding of the created                                   // 8906
     * function and an array of arguments much like [`Function#apply`](https://es5.github.io/#x15.3.4.3).              // 8907
     *                                                                                                                 // 8908
     * **Note:** This method is based on the [spread operator](https://mdn.io/spread_operator).                        // 8909
     *                                                                                                                 // 8910
     * @static                                                                                                         // 8911
     * @memberOf _                                                                                                     // 8912
     * @category Function                                                                                              // 8913
     * @param {Function} func The function to spread arguments over.                                                   // 8914
     * @returns {Function} Returns the new function.                                                                   // 8915
     * @example                                                                                                        // 8916
     *                                                                                                                 // 8917
     * var say = _.spread(function(who, what) {                                                                        // 8918
     *   return who + ' says ' + what;                                                                                 // 8919
     * });                                                                                                             // 8920
     *                                                                                                                 // 8921
     * say(['fred', 'hello']);                                                                                         // 8922
     * // => 'fred says hello'                                                                                         // 8923
     *                                                                                                                 // 8924
     * // with a Promise                                                                                               // 8925
     * var numbers = Promise.all([                                                                                     // 8926
     *   Promise.resolve(40),                                                                                          // 8927
     *   Promise.resolve(36)                                                                                           // 8928
     * ]);                                                                                                             // 8929
     *                                                                                                                 // 8930
     * numbers.then(_.spread(function(x, y) {                                                                          // 8931
     *   return x + y;                                                                                                 // 8932
     * }));                                                                                                            // 8933
     * // => a Promise of 76                                                                                           // 8934
     */                                                                                                                // 8935
    function spread(func) {                                                                                            // 8936
      if (typeof func != 'function') {                                                                                 // 8937
        throw new TypeError(FUNC_ERROR_TEXT);                                                                          // 8938
      }                                                                                                                // 8939
      return function(array) {                                                                                         // 8940
        return apply(func, this, array);                                                                               // 8941
      };                                                                                                               // 8942
    }                                                                                                                  // 8943
                                                                                                                       // 8944
    /**                                                                                                                // 8945
     * Creates a throttled function that only invokes `func` at most once per                                          // 8946
     * every `wait` milliseconds. The throttled function comes with a `cancel`                                         // 8947
     * method to cancel delayed `func` invocations and a `flush` method to                                             // 8948
     * immediately invoke them. Provide an options object to indicate whether                                          // 8949
     * `func` should be invoked on the leading and/or trailing edge of the `wait`                                      // 8950
     * timeout. The `func` is invoked with the last arguments provided to the                                          // 8951
     * throttled function. Subsequent calls to the throttled function return the                                       // 8952
     * result of the last `func` invocation.                                                                           // 8953
     *                                                                                                                 // 8954
     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked                                     // 8955
     * on the trailing edge of the timeout only if the the throttled function is                                       // 8956
     * invoked more than once during the `wait` timeout.                                                               // 8957
     *                                                                                                                 // 8958
     * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)        // 8959
     * for details over the differences between `_.throttle` and `_.debounce`.                                         // 8960
     *                                                                                                                 // 8961
     * @static                                                                                                         // 8962
     * @memberOf _                                                                                                     // 8963
     * @category Function                                                                                              // 8964
     * @param {Function} func The function to throttle.                                                                // 8965
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.                                 // 8966
     * @param {Object} [options] The options object.                                                                   // 8967
     * @param {boolean} [options.leading=true] Specify invoking on the leading                                         // 8968
     *  edge of the timeout.                                                                                           // 8969
     * @param {boolean} [options.trailing=true] Specify invoking on the trailing                                       // 8970
     *  edge of the timeout.                                                                                           // 8971
     * @returns {Function} Returns the new throttled function.                                                         // 8972
     * @example                                                                                                        // 8973
     *                                                                                                                 // 8974
     * // avoid excessively updating the position while scrolling                                                      // 8975
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));                                                   // 8976
     *                                                                                                                 // 8977
     * // invoke `renewToken` when the click event is fired, but not more than once every 5 minutes                    // 8978
     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });                                          // 8979
     * jQuery(element).on('click', throttled);                                                                         // 8980
     *                                                                                                                 // 8981
     * // cancel a trailing throttled invocation                                                                       // 8982
     * jQuery(window).on('popstate', throttled.cancel);                                                                // 8983
     */                                                                                                                // 8984
    function throttle(func, wait, options) {                                                                           // 8985
      var leading = true,                                                                                              // 8986
          trailing = true;                                                                                             // 8987
                                                                                                                       // 8988
      if (typeof func != 'function') {                                                                                 // 8989
        throw new TypeError(FUNC_ERROR_TEXT);                                                                          // 8990
      }                                                                                                                // 8991
      if (isObject(options)) {                                                                                         // 8992
        leading = 'leading' in options ? !!options.leading : leading;                                                  // 8993
        trailing = 'trailing' in options ? !!options.trailing : trailing;                                              // 8994
      }                                                                                                                // 8995
      return debounce(func, wait, { 'leading': leading, 'maxWait': wait, 'trailing': trailing });                      // 8996
    }                                                                                                                  // 8997
                                                                                                                       // 8998
    /**                                                                                                                // 8999
     * Creates a function that accepts up to one argument, ignoring any                                                // 9000
     * additional arguments.                                                                                           // 9001
     *                                                                                                                 // 9002
     * @static                                                                                                         // 9003
     * @memberOf _                                                                                                     // 9004
     * @category Function                                                                                              // 9005
     * @param {Function} func The function to cap arguments for.                                                       // 9006
     * @returns {Function} Returns the new function.                                                                   // 9007
     * @example                                                                                                        // 9008
     *                                                                                                                 // 9009
     * _.map(['6', '8', '10'], _.unary(parseInt));                                                                     // 9010
     * // => [6, 8, 10]                                                                                                // 9011
     */                                                                                                                // 9012
    function unary(func) {                                                                                             // 9013
      return ary(func, 1);                                                                                             // 9014
    }                                                                                                                  // 9015
                                                                                                                       // 9016
    /**                                                                                                                // 9017
     * Creates a function that provides `value` to the wrapper function as its                                         // 9018
     * first argument. Any additional arguments provided to the function are                                           // 9019
     * appended to those provided to the wrapper function. The wrapper is invoked                                      // 9020
     * with the `this` binding of the created function.                                                                // 9021
     *                                                                                                                 // 9022
     * @static                                                                                                         // 9023
     * @memberOf _                                                                                                     // 9024
     * @category Function                                                                                              // 9025
     * @param {*} value The value to wrap.                                                                             // 9026
     * @param {Function} wrapper The wrapper function.                                                                 // 9027
     * @returns {Function} Returns the new function.                                                                   // 9028
     * @example                                                                                                        // 9029
     *                                                                                                                 // 9030
     * var p = _.wrap(_.escape, function(func, text) {                                                                 // 9031
     *   return '<p>' + func(text) + '</p>';                                                                           // 9032
     * });                                                                                                             // 9033
     *                                                                                                                 // 9034
     * p('fred, barney, & pebbles');                                                                                   // 9035
     * // => '<p>fred, barney, &amp; pebbles</p>'                                                                      // 9036
     */                                                                                                                // 9037
    function wrap(value, wrapper) {                                                                                    // 9038
      wrapper = wrapper == null ? identity : wrapper;                                                                  // 9039
      return partial(wrapper, value);                                                                                  // 9040
    }                                                                                                                  // 9041
                                                                                                                       // 9042
    /*------------------------------------------------------------------------*/                                       // 9043
                                                                                                                       // 9044
    /**                                                                                                                // 9045
     * Creates a shallow clone of `value`.                                                                             // 9046
     *                                                                                                                 // 9047
     * **Note:** This method is loosely based on the                                                                   // 9048
     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)                                         // 9049
     * and supports cloning arrays, array buffers, booleans, date objects, maps,                                       // 9050
     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed                                           // 9051
     * arrays. The own enumerable properties of `arguments` objects are cloned                                         // 9052
     * as plain objects. An empty object is returned for uncloneable values such                                       // 9053
     * as error objects, functions, DOM nodes, and WeakMaps.                                                           // 9054
     *                                                                                                                 // 9055
     * @static                                                                                                         // 9056
     * @memberOf _                                                                                                     // 9057
     * @category Lang                                                                                                  // 9058
     * @param {*} value The value to clone.                                                                            // 9059
     * @returns {*} Returns the cloned value.                                                                          // 9060
     * @example                                                                                                        // 9061
     *                                                                                                                 // 9062
     * var objects = [{ 'a': 1 }, { 'b': 2 }];                                                                         // 9063
     *                                                                                                                 // 9064
     * var shallow = _.clone(objects);                                                                                 // 9065
     * console.log(shallow[0] === objects[0]);                                                                         // 9066
     * // => true                                                                                                      // 9067
     */                                                                                                                // 9068
    function clone(value) {                                                                                            // 9069
      return baseClone(value);                                                                                         // 9070
    }                                                                                                                  // 9071
                                                                                                                       // 9072
    /**                                                                                                                // 9073
     * This method is like `_.clone` except that it accepts `customizer` which                                         // 9074
     * is invoked to produce the cloned value. If `customizer` returns `undefined`                                     // 9075
     * cloning is handled by the method instead. The `customizer` is invoked with                                      // 9076
     * up to five arguments; (value [, index|key, object, stack]).                                                     // 9077
     *                                                                                                                 // 9078
     * @static                                                                                                         // 9079
     * @memberOf _                                                                                                     // 9080
     * @category Lang                                                                                                  // 9081
     * @param {*} value The value to clone.                                                                            // 9082
     * @param {Function} [customizer] The function to customize cloning.                                               // 9083
     * @returns {*} Returns the cloned value.                                                                          // 9084
     * @example                                                                                                        // 9085
     *                                                                                                                 // 9086
     * function customizer(value) {                                                                                    // 9087
     *   if (_.isElement(value)) {                                                                                     // 9088
     *     return value.cloneNode(false);                                                                              // 9089
     *   }                                                                                                             // 9090
     * }                                                                                                               // 9091
     *                                                                                                                 // 9092
     * var el = _.clone(document.body, customizer);                                                                    // 9093
     *                                                                                                                 // 9094
     * console.log(el === document.body);                                                                              // 9095
     * // => false                                                                                                     // 9096
     * console.log(el.nodeName);                                                                                       // 9097
     * // => 'BODY'                                                                                                    // 9098
     * console.log(el.childNodes.length);                                                                              // 9099
     * // => 0                                                                                                         // 9100
     */                                                                                                                // 9101
    function cloneWith(value, customizer) {                                                                            // 9102
      return baseClone(value, false, customizer);                                                                      // 9103
    }                                                                                                                  // 9104
                                                                                                                       // 9105
    /**                                                                                                                // 9106
     * This method is like `_.clone` except that it recursively clones `value`.                                        // 9107
     *                                                                                                                 // 9108
     * @static                                                                                                         // 9109
     * @memberOf _                                                                                                     // 9110
     * @category Lang                                                                                                  // 9111
     * @param {*} value The value to recursively clone.                                                                // 9112
     * @returns {*} Returns the deep cloned value.                                                                     // 9113
     * @example                                                                                                        // 9114
     *                                                                                                                 // 9115
     * var objects = [{ 'a': 1 }, { 'b': 2 }];                                                                         // 9116
     *                                                                                                                 // 9117
     * var deep = _.cloneDeep(objects);                                                                                // 9118
     * console.log(deep[0] === objects[0]);                                                                            // 9119
     * // => false                                                                                                     // 9120
     */                                                                                                                // 9121
    function cloneDeep(value) {                                                                                        // 9122
      return baseClone(value, true);                                                                                   // 9123
    }                                                                                                                  // 9124
                                                                                                                       // 9125
    /**                                                                                                                // 9126
     * This method is like `_.cloneWith` except that it recursively clones `value`.                                    // 9127
     *                                                                                                                 // 9128
     * @static                                                                                                         // 9129
     * @memberOf _                                                                                                     // 9130
     * @category Lang                                                                                                  // 9131
     * @param {*} value The value to recursively clone.                                                                // 9132
     * @param {Function} [customizer] The function to customize cloning.                                               // 9133
     * @returns {*} Returns the deep cloned value.                                                                     // 9134
     * @example                                                                                                        // 9135
     *                                                                                                                 // 9136
     * function customizer(value) {                                                                                    // 9137
     *   if (_.isElement(value)) {                                                                                     // 9138
     *     return value.cloneNode(true);                                                                               // 9139
     *   }                                                                                                             // 9140
     * }                                                                                                               // 9141
     *                                                                                                                 // 9142
     * var el = _.cloneDeep(document.body, customizer);                                                                // 9143
     *                                                                                                                 // 9144
     * console.log(el === document.body);                                                                              // 9145
     * // => false                                                                                                     // 9146
     * console.log(el.nodeName);                                                                                       // 9147
     * // => 'BODY'                                                                                                    // 9148
     * console.log(el.childNodes.length);                                                                              // 9149
     * // => 20                                                                                                        // 9150
     */                                                                                                                // 9151
    function cloneDeepWith(value, customizer) {                                                                        // 9152
      return baseClone(value, true, customizer);                                                                       // 9153
    }                                                                                                                  // 9154
                                                                                                                       // 9155
    /**                                                                                                                // 9156
     * Performs a [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)                     // 9157
     * comparison between two values to determine if they are equivalent.                                              // 9158
     *                                                                                                                 // 9159
     * @static                                                                                                         // 9160
     * @memberOf _                                                                                                     // 9161
     * @category Lang                                                                                                  // 9162
     * @param {*} value The value to compare.                                                                          // 9163
     * @param {*} other The other value to compare.                                                                    // 9164
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.                                   // 9165
     * @example                                                                                                        // 9166
     *                                                                                                                 // 9167
     * var object = { 'user': 'fred' };                                                                                // 9168
     * var other = { 'user': 'fred' };                                                                                 // 9169
     *                                                                                                                 // 9170
     * _.eq(object, object);                                                                                           // 9171
     * // => true                                                                                                      // 9172
     *                                                                                                                 // 9173
     * _.eq(object, other);                                                                                            // 9174
     * // => false                                                                                                     // 9175
     *                                                                                                                 // 9176
     * _.eq('a', 'a');                                                                                                 // 9177
     * // => true                                                                                                      // 9178
     *                                                                                                                 // 9179
     * _.eq('a', Object('a'));                                                                                         // 9180
     * // => false                                                                                                     // 9181
     *                                                                                                                 // 9182
     * _.eq(NaN, NaN);                                                                                                 // 9183
     * // => true                                                                                                      // 9184
     */                                                                                                                // 9185
    function eq(value, other) {                                                                                        // 9186
      return value === other || (value !== value && other !== other);                                                  // 9187
    }                                                                                                                  // 9188
                                                                                                                       // 9189
    /**                                                                                                                // 9190
     * Checks if `value` is greater than `other`.                                                                      // 9191
     *                                                                                                                 // 9192
     * @static                                                                                                         // 9193
     * @memberOf _                                                                                                     // 9194
     * @category Lang                                                                                                  // 9195
     * @param {*} value The value to compare.                                                                          // 9196
     * @param {*} other The other value to compare.                                                                    // 9197
     * @returns {boolean} Returns `true` if `value` is greater than `other`, else `false`.                             // 9198
     * @example                                                                                                        // 9199
     *                                                                                                                 // 9200
     * _.gt(3, 1);                                                                                                     // 9201
     * // => true                                                                                                      // 9202
     *                                                                                                                 // 9203
     * _.gt(3, 3);                                                                                                     // 9204
     * // => false                                                                                                     // 9205
     *                                                                                                                 // 9206
     * _.gt(1, 3);                                                                                                     // 9207
     * // => false                                                                                                     // 9208
     */                                                                                                                // 9209
    function gt(value, other) {                                                                                        // 9210
      return value > other;                                                                                            // 9211
    }                                                                                                                  // 9212
                                                                                                                       // 9213
    /**                                                                                                                // 9214
     * Checks if `value` is greater than or equal to `other`.                                                          // 9215
     *                                                                                                                 // 9216
     * @static                                                                                                         // 9217
     * @memberOf _                                                                                                     // 9218
     * @category Lang                                                                                                  // 9219
     * @param {*} value The value to compare.                                                                          // 9220
     * @param {*} other The other value to compare.                                                                    // 9221
     * @returns {boolean} Returns `true` if `value` is greater than or equal to `other`, else `false`.                 // 9222
     * @example                                                                                                        // 9223
     *                                                                                                                 // 9224
     * _.gte(3, 1);                                                                                                    // 9225
     * // => true                                                                                                      // 9226
     *                                                                                                                 // 9227
     * _.gte(3, 3);                                                                                                    // 9228
     * // => true                                                                                                      // 9229
     *                                                                                                                 // 9230
     * _.gte(1, 3);                                                                                                    // 9231
     * // => false                                                                                                     // 9232
     */                                                                                                                // 9233
    function gte(value, other) {                                                                                       // 9234
      return value >= other;                                                                                           // 9235
    }                                                                                                                  // 9236
                                                                                                                       // 9237
    /**                                                                                                                // 9238
     * Checks if `value` is likely an `arguments` object.                                                              // 9239
     *                                                                                                                 // 9240
     * @static                                                                                                         // 9241
     * @memberOf _                                                                                                     // 9242
     * @category Lang                                                                                                  // 9243
     * @param {*} value The value to check.                                                                            // 9244
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.                             // 9245
     * @example                                                                                                        // 9246
     *                                                                                                                 // 9247
     * _.isArguments(function() { return arguments; }());                                                              // 9248
     * // => true                                                                                                      // 9249
     *                                                                                                                 // 9250
     * _.isArguments([1, 2, 3]);                                                                                       // 9251
     * // => false                                                                                                     // 9252
     */                                                                                                                // 9253
    function isArguments(value) {                                                                                      // 9254
      // Safari 8.1 incorrectly makes `arguments.callee` enumerable in strict mode.                                    // 9255
      return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&                                       // 9256
        (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);                        // 9257
    }                                                                                                                  // 9258
                                                                                                                       // 9259
    /**                                                                                                                // 9260
     * Checks if `value` is classified as an `Array` object.                                                           // 9261
     *                                                                                                                 // 9262
     * @static                                                                                                         // 9263
     * @memberOf _                                                                                                     // 9264
     * @type Function                                                                                                  // 9265
     * @category Lang                                                                                                  // 9266
     * @param {*} value The value to check.                                                                            // 9267
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.                             // 9268
     * @example                                                                                                        // 9269
     *                                                                                                                 // 9270
     * _.isArray([1, 2, 3]);                                                                                           // 9271
     * // => true                                                                                                      // 9272
     *                                                                                                                 // 9273
     * _.isArray(document.body.children);                                                                              // 9274
     * // => false                                                                                                     // 9275
     *                                                                                                                 // 9276
     * _.isArray('abc');                                                                                               // 9277
     * // => false                                                                                                     // 9278
     *                                                                                                                 // 9279
     * _.isArray(_.noop);                                                                                              // 9280
     * // => false                                                                                                     // 9281
     */                                                                                                                // 9282
    var isArray = Array.isArray;                                                                                       // 9283
                                                                                                                       // 9284
    /**                                                                                                                // 9285
     * Checks if `value` is array-like. A value is considered array-like if it's                                       // 9286
     * not a function and has a `value.length` that's an integer greater than or                                       // 9287
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.                                               // 9288
     *                                                                                                                 // 9289
     * @static                                                                                                         // 9290
     * @memberOf _                                                                                                     // 9291
     * @type Function                                                                                                  // 9292
     * @category Lang                                                                                                  // 9293
     * @param {*} value The value to check.                                                                            // 9294
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.                                       // 9295
     * @example                                                                                                        // 9296
     *                                                                                                                 // 9297
     * _.isArrayLike([1, 2, 3]);                                                                                       // 9298
     * // => true                                                                                                      // 9299
     *                                                                                                                 // 9300
     * _.isArrayLike(document.body.children);                                                                          // 9301
     * // => true                                                                                                      // 9302
     *                                                                                                                 // 9303
     * _.isArrayLike('abc');                                                                                           // 9304
     * // => true                                                                                                      // 9305
     *                                                                                                                 // 9306
     * _.isArrayLike(_.noop);                                                                                          // 9307
     * // => false                                                                                                     // 9308
     */                                                                                                                // 9309
    function isArrayLike(value) {                                                                                      // 9310
      return value != null &&                                                                                          // 9311
        !(typeof value == 'function' && isFunction(value)) && isLength(getLength(value));                              // 9312
    }                                                                                                                  // 9313
                                                                                                                       // 9314
    /**                                                                                                                // 9315
     * This method is like `_.isArrayLike` except that it also checks if `value`                                       // 9316
     * is an object.                                                                                                   // 9317
     *                                                                                                                 // 9318
     * @static                                                                                                         // 9319
     * @memberOf _                                                                                                     // 9320
     * @type Function                                                                                                  // 9321
     * @category Lang                                                                                                  // 9322
     * @param {*} value The value to check.                                                                            // 9323
     * @returns {boolean} Returns `true` if `value` is an array-like object, else `false`.                             // 9324
     * @example                                                                                                        // 9325
     *                                                                                                                 // 9326
     * _.isArrayLikeObject([1, 2, 3]);                                                                                 // 9327
     * // => true                                                                                                      // 9328
     *                                                                                                                 // 9329
     * _.isArrayLikeObject(document.body.children);                                                                    // 9330
     * // => true                                                                                                      // 9331
     *                                                                                                                 // 9332
     * _.isArrayLikeObject('abc');                                                                                     // 9333
     * // => false                                                                                                     // 9334
     *                                                                                                                 // 9335
     * _.isArrayLikeObject(_.noop);                                                                                    // 9336
     * // => false                                                                                                     // 9337
     */                                                                                                                // 9338
    function isArrayLikeObject(value) {                                                                                // 9339
      return isObjectLike(value) && isArrayLike(value);                                                                // 9340
    }                                                                                                                  // 9341
                                                                                                                       // 9342
    /**                                                                                                                // 9343
     * Checks if `value` is classified as a boolean primitive or object.                                               // 9344
     *                                                                                                                 // 9345
     * @static                                                                                                         // 9346
     * @memberOf _                                                                                                     // 9347
     * @category Lang                                                                                                  // 9348
     * @param {*} value The value to check.                                                                            // 9349
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.                             // 9350
     * @example                                                                                                        // 9351
     *                                                                                                                 // 9352
     * _.isBoolean(false);                                                                                             // 9353
     * // => true                                                                                                      // 9354
     *                                                                                                                 // 9355
     * _.isBoolean(null);                                                                                              // 9356
     * // => false                                                                                                     // 9357
     */                                                                                                                // 9358
    function isBoolean(value) {                                                                                        // 9359
      return value === true || value === false ||                                                                      // 9360
        (isObjectLike(value) && objectToString.call(value) == boolTag);                                                // 9361
    }                                                                                                                  // 9362
                                                                                                                       // 9363
    /**                                                                                                                // 9364
     * Checks if `value` is classified as a `Date` object.                                                             // 9365
     *                                                                                                                 // 9366
     * @static                                                                                                         // 9367
     * @memberOf _                                                                                                     // 9368
     * @category Lang                                                                                                  // 9369
     * @param {*} value The value to check.                                                                            // 9370
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.                             // 9371
     * @example                                                                                                        // 9372
     *                                                                                                                 // 9373
     * _.isDate(new Date);                                                                                             // 9374
     * // => true                                                                                                      // 9375
     *                                                                                                                 // 9376
     * _.isDate('Mon April 23 2012');                                                                                  // 9377
     * // => false                                                                                                     // 9378
     */                                                                                                                // 9379
    function isDate(value) {                                                                                           // 9380
      return isObjectLike(value) && objectToString.call(value) == dateTag;                                             // 9381
    }                                                                                                                  // 9382
                                                                                                                       // 9383
    /**                                                                                                                // 9384
     * Checks if `value` is likely a DOM element.                                                                      // 9385
     *                                                                                                                 // 9386
     * @static                                                                                                         // 9387
     * @memberOf _                                                                                                     // 9388
     * @category Lang                                                                                                  // 9389
     * @param {*} value The value to check.                                                                            // 9390
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.                                    // 9391
     * @example                                                                                                        // 9392
     *                                                                                                                 // 9393
     * _.isElement(document.body);                                                                                     // 9394
     * // => true                                                                                                      // 9395
     *                                                                                                                 // 9396
     * _.isElement('<body>');                                                                                          // 9397
     * // => false                                                                                                     // 9398
     */                                                                                                                // 9399
    function isElement(value) {                                                                                        // 9400
      return !!value && value.nodeType === 1 && isObjectLike(value) && !isPlainObject(value);                          // 9401
    }                                                                                                                  // 9402
                                                                                                                       // 9403
    /**                                                                                                                // 9404
     * Checks if `value` is empty. A value is considered empty unless it's an                                          // 9405
     * `arguments` object, array, string, or jQuery-like collection with a length                                      // 9406
     * greater than `0` or an object with own enumerable properties.                                                   // 9407
     *                                                                                                                 // 9408
     * @static                                                                                                         // 9409
     * @memberOf _                                                                                                     // 9410
     * @category Lang                                                                                                  // 9411
     * @param {Array|Object|string} value The value to inspect.                                                        // 9412
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.                                            // 9413
     * @example                                                                                                        // 9414
     *                                                                                                                 // 9415
     * _.isEmpty(null);                                                                                                // 9416
     * // => true                                                                                                      // 9417
     *                                                                                                                 // 9418
     * _.isEmpty(true);                                                                                                // 9419
     * // => true                                                                                                      // 9420
     *                                                                                                                 // 9421
     * _.isEmpty(1);                                                                                                   // 9422
     * // => true                                                                                                      // 9423
     *                                                                                                                 // 9424
     * _.isEmpty([1, 2, 3]);                                                                                           // 9425
     * // => false                                                                                                     // 9426
     *                                                                                                                 // 9427
     * _.isEmpty({ 'a': 1 });                                                                                          // 9428
     * // => false                                                                                                     // 9429
     */                                                                                                                // 9430
    function isEmpty(value) {                                                                                          // 9431
      return (!isObjectLike(value) || isFunction(value.splice))                                                        // 9432
        ? !size(value)                                                                                                 // 9433
        : !keys(value).length;                                                                                         // 9434
    }                                                                                                                  // 9435
                                                                                                                       // 9436
    /**                                                                                                                // 9437
     * Performs a deep comparison between two values to determine if they are                                          // 9438
     * equivalent.                                                                                                     // 9439
     *                                                                                                                 // 9440
     * **Note:** This method supports comparing arrays, array buffers, booleans,                                       // 9441
     * date objects, error objects, maps, numbers, `Object` objects, regexes,                                          // 9442
     * sets, strings, symbols, and typed arrays. `Object` objects are compared                                         // 9443
     * by their own, not inherited, enumerable properties. Functions and DOM                                           // 9444
     * nodes are **not** supported.                                                                                    // 9445
     *                                                                                                                 // 9446
     * @static                                                                                                         // 9447
     * @memberOf _                                                                                                     // 9448
     * @category Lang                                                                                                  // 9449
     * @param {*} value The value to compare.                                                                          // 9450
     * @param {*} other The other value to compare.                                                                    // 9451
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.                                   // 9452
     * @example                                                                                                        // 9453
     *                                                                                                                 // 9454
     * var object = { 'user': 'fred' };                                                                                // 9455
     * var other = { 'user': 'fred' };                                                                                 // 9456
     *                                                                                                                 // 9457
     * _.isEqual(object, other);                                                                                       // 9458
     * // => true                                                                                                      // 9459
     *                                                                                                                 // 9460
     * object === other;                                                                                               // 9461
     * // => false                                                                                                     // 9462
     */                                                                                                                // 9463
    function isEqual(value, other) {                                                                                   // 9464
      return baseIsEqual(value, other);                                                                                // 9465
    }                                                                                                                  // 9466
                                                                                                                       // 9467
    /**                                                                                                                // 9468
     * This method is like `_.isEqual` except that it accepts `customizer` which is                                    // 9469
     * invoked to compare values. If `customizer` returns `undefined` comparisons are                                  // 9470
     * handled by the method instead. The `customizer` is invoked with up to seven arguments:                          // 9471
     * (objValue, othValue [, index|key, object, other, stack]).                                                       // 9472
     *                                                                                                                 // 9473
     * @static                                                                                                         // 9474
     * @memberOf _                                                                                                     // 9475
     * @category Lang                                                                                                  // 9476
     * @param {*} value The value to compare.                                                                          // 9477
     * @param {*} other The other value to compare.                                                                    // 9478
     * @param {Function} [customizer] The function to customize comparisons.                                           // 9479
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.                                   // 9480
     * @example                                                                                                        // 9481
     *                                                                                                                 // 9482
     * function isGreeting(value) {                                                                                    // 9483
     *   return /^h(?:i|ello)$/.test(value);                                                                           // 9484
     * }                                                                                                               // 9485
     *                                                                                                                 // 9486
     * function customizer(objValue, othValue) {                                                                       // 9487
     *   if (isGreeting(objValue) && isGreeting(othValue)) {                                                           // 9488
     *     return true;                                                                                                // 9489
     *   }                                                                                                             // 9490
     * }                                                                                                               // 9491
     *                                                                                                                 // 9492
     * var array = ['hello', 'goodbye'];                                                                               // 9493
     * var other = ['hi', 'goodbye'];                                                                                  // 9494
     *                                                                                                                 // 9495
     * _.isEqualWith(array, other, customizer);                                                                        // 9496
     * // => true                                                                                                      // 9497
     */                                                                                                                // 9498
    function isEqualWith(value, other, customizer) {                                                                   // 9499
      customizer = typeof customizer == 'function' ? customizer : undefined;                                           // 9500
      var result = customizer ? customizer(value, other) : undefined;                                                  // 9501
      return result === undefined ? baseIsEqual(value, other, customizer) : !!result;                                  // 9502
    }                                                                                                                  // 9503
                                                                                                                       // 9504
    /**                                                                                                                // 9505
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,                                   // 9506
     * `SyntaxError`, `TypeError`, or `URIError` object.                                                               // 9507
     *                                                                                                                 // 9508
     * @static                                                                                                         // 9509
     * @memberOf _                                                                                                     // 9510
     * @category Lang                                                                                                  // 9511
     * @param {*} value The value to check.                                                                            // 9512
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.                                  // 9513
     * @example                                                                                                        // 9514
     *                                                                                                                 // 9515
     * _.isError(new Error);                                                                                           // 9516
     * // => true                                                                                                      // 9517
     *                                                                                                                 // 9518
     * _.isError(Error);                                                                                               // 9519
     * // => false                                                                                                     // 9520
     */                                                                                                                // 9521
    function isError(value) {                                                                                          // 9522
      return isObjectLike(value) &&                                                                                    // 9523
        typeof value.message == 'string' && objectToString.call(value) == errorTag;                                    // 9524
    }                                                                                                                  // 9525
                                                                                                                       // 9526
    /**                                                                                                                // 9527
     * Checks if `value` is a finite primitive number.                                                                 // 9528
     *                                                                                                                 // 9529
     * **Note:** This method is based on [`Number.isFinite`](https://mdn.io/Number/isFinite).                          // 9530
     *                                                                                                                 // 9531
     * @static                                                                                                         // 9532
     * @memberOf _                                                                                                     // 9533
     * @category Lang                                                                                                  // 9534
     * @param {*} value The value to check.                                                                            // 9535
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.                                  // 9536
     * @example                                                                                                        // 9537
     *                                                                                                                 // 9538
     * _.isFinite(3);                                                                                                  // 9539
     * // => true                                                                                                      // 9540
     *                                                                                                                 // 9541
     * _.isFinite(Number.MAX_VALUE);                                                                                   // 9542
     * // => true                                                                                                      // 9543
     *                                                                                                                 // 9544
     * _.isFinite(3.14);                                                                                               // 9545
     * // => true                                                                                                      // 9546
     *                                                                                                                 // 9547
     * _.isFinite(Infinity);                                                                                           // 9548
     * // => false                                                                                                     // 9549
     */                                                                                                                // 9550
    function isFinite(value) {                                                                                         // 9551
      return typeof value == 'number' && nativeIsFinite(value);                                                        // 9552
    }                                                                                                                  // 9553
                                                                                                                       // 9554
    /**                                                                                                                // 9555
     * Checks if `value` is classified as a `Function` object.                                                         // 9556
     *                                                                                                                 // 9557
     * @static                                                                                                         // 9558
     * @memberOf _                                                                                                     // 9559
     * @category Lang                                                                                                  // 9560
     * @param {*} value The value to check.                                                                            // 9561
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.                             // 9562
     * @example                                                                                                        // 9563
     *                                                                                                                 // 9564
     * _.isFunction(_);                                                                                                // 9565
     * // => true                                                                                                      // 9566
     *                                                                                                                 // 9567
     * _.isFunction(/abc/);                                                                                            // 9568
     * // => false                                                                                                     // 9569
     */                                                                                                                // 9570
    function isFunction(value) {                                                                                       // 9571
      // The use of `Object#toString` avoids issues with the `typeof` operator                                         // 9572
      // in Safari 8 which returns 'object' for typed array constructors, and                                          // 9573
      // PhantomJS 1.9 which returns 'function' for `NodeList` instances.                                              // 9574
      var tag = isObject(value) ? objectToString.call(value) : '';                                                     // 9575
      return tag == funcTag || tag == genTag;                                                                          // 9576
    }                                                                                                                  // 9577
                                                                                                                       // 9578
    /**                                                                                                                // 9579
     * Checks if `value` is an integer.                                                                                // 9580
     *                                                                                                                 // 9581
     * **Note:** This method is based on [`Number.isInteger`](https://mdn.io/Number/isInteger).                        // 9582
     *                                                                                                                 // 9583
     * @static                                                                                                         // 9584
     * @memberOf _                                                                                                     // 9585
     * @category Lang                                                                                                  // 9586
     * @param {*} value The value to check.                                                                            // 9587
     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.                                       // 9588
     * @example                                                                                                        // 9589
     *                                                                                                                 // 9590
     * _.isInteger(3);                                                                                                 // 9591
     * // => true                                                                                                      // 9592
     *                                                                                                                 // 9593
     * _.isInteger(Number.MIN_VALUE);                                                                                  // 9594
     * // => false                                                                                                     // 9595
     *                                                                                                                 // 9596
     * _.isInteger(Infinity);                                                                                          // 9597
     * // => false                                                                                                     // 9598
     *                                                                                                                 // 9599
     * _.isInteger('3');                                                                                               // 9600
     * // => false                                                                                                     // 9601
     */                                                                                                                // 9602
    function isInteger(value) {                                                                                        // 9603
      return typeof value == 'number' && value == toInteger(value);                                                    // 9604
    }                                                                                                                  // 9605
                                                                                                                       // 9606
    /**                                                                                                                // 9607
     * Checks if `value` is a valid array-like length.                                                                 // 9608
     *                                                                                                                 // 9609
     * **Note:** This function is loosely based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
     *                                                                                                                 // 9611
     * @static                                                                                                         // 9612
     * @memberOf _                                                                                                     // 9613
     * @category Lang                                                                                                  // 9614
     * @param {*} value The value to check.                                                                            // 9615
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.                                   // 9616
     * @example                                                                                                        // 9617
     *                                                                                                                 // 9618
     * _.isLength(3);                                                                                                  // 9619
     * // => true                                                                                                      // 9620
     *                                                                                                                 // 9621
     * _.isLength(Number.MIN_VALUE);                                                                                   // 9622
     * // => false                                                                                                     // 9623
     *                                                                                                                 // 9624
     * _.isLength(Infinity);                                                                                           // 9625
     * // => false                                                                                                     // 9626
     *                                                                                                                 // 9627
     * _.isLength('3');                                                                                                // 9628
     * // => false                                                                                                     // 9629
     */                                                                                                                // 9630
    function isLength(value) {                                                                                         // 9631
      return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;                    // 9632
    }                                                                                                                  // 9633
                                                                                                                       // 9634
    /**                                                                                                                // 9635
     * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.                                // 9636
     * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)                               // 9637
     *                                                                                                                 // 9638
     * @static                                                                                                         // 9639
     * @memberOf _                                                                                                     // 9640
     * @category Lang                                                                                                  // 9641
     * @param {*} value The value to check.                                                                            // 9642
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.                                        // 9643
     * @example                                                                                                        // 9644
     *                                                                                                                 // 9645
     * _.isObject({});                                                                                                 // 9646
     * // => true                                                                                                      // 9647
     *                                                                                                                 // 9648
     * _.isObject([1, 2, 3]);                                                                                          // 9649
     * // => true                                                                                                      // 9650
     *                                                                                                                 // 9651
     * _.isObject(_.noop);                                                                                             // 9652
     * // => true                                                                                                      // 9653
     *                                                                                                                 // 9654
     * _.isObject(null);                                                                                               // 9655
     * // => false                                                                                                     // 9656
     */                                                                                                                // 9657
    function isObject(value) {                                                                                         // 9658
      // Avoid a V8 JIT bug in Chrome 19-20.                                                                           // 9659
      // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.                                      // 9660
      var type = typeof value;                                                                                         // 9661
      return !!value && (type == 'object' || type == 'function');                                                      // 9662
    }                                                                                                                  // 9663
                                                                                                                       // 9664
    /**                                                                                                                // 9665
     * Checks if `value` is object-like. A value is object-like if it's not `null`                                     // 9666
     * and has a `typeof` result of "object".                                                                          // 9667
     *                                                                                                                 // 9668
     * @static                                                                                                         // 9669
     * @memberOf _                                                                                                     // 9670
     * @category Lang                                                                                                  // 9671
     * @param {*} value The value to check.                                                                            // 9672
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.                                      // 9673
     * @example                                                                                                        // 9674
     *                                                                                                                 // 9675
     * _.isObjectLike({});                                                                                             // 9676
     * // => true                                                                                                      // 9677
     *                                                                                                                 // 9678
     * _.isObjectLike([1, 2, 3]);                                                                                      // 9679
     * // => true                                                                                                      // 9680
     *                                                                                                                 // 9681
     * _.isObjectLike(_.noop);                                                                                         // 9682
     * // => false                                                                                                     // 9683
     *                                                                                                                 // 9684
     * _.isObjectLike(null);                                                                                           // 9685
     * // => false                                                                                                     // 9686
     */                                                                                                                // 9687
    function isObjectLike(value) {                                                                                     // 9688
      return !!value && typeof value == 'object';                                                                      // 9689
    }                                                                                                                  // 9690
                                                                                                                       // 9691
    /**                                                                                                                // 9692
     * Performs a deep comparison between `object` and `source` to determine if                                        // 9693
     * `object` contains equivalent property values.                                                                   // 9694
     *                                                                                                                 // 9695
     * **Note:** This method supports comparing the same values as `_.isEqual`.                                        // 9696
     *                                                                                                                 // 9697
     * @static                                                                                                         // 9698
     * @memberOf _                                                                                                     // 9699
     * @category Lang                                                                                                  // 9700
     * @param {Object} object The object to inspect.                                                                   // 9701
     * @param {Object} source The object of property values to match.                                                  // 9702
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.                                         // 9703
     * @example                                                                                                        // 9704
     *                                                                                                                 // 9705
     * var object = { 'user': 'fred', 'age': 40 };                                                                     // 9706
     *                                                                                                                 // 9707
     * _.isMatch(object, { 'age': 40 });                                                                               // 9708
     * // => true                                                                                                      // 9709
     *                                                                                                                 // 9710
     * _.isMatch(object, { 'age': 36 });                                                                               // 9711
     * // => false                                                                                                     // 9712
     */                                                                                                                // 9713
    function isMatch(object, source) {                                                                                 // 9714
      return object === source || baseIsMatch(object, source, getMatchData(source));                                   // 9715
    }                                                                                                                  // 9716
                                                                                                                       // 9717
    /**                                                                                                                // 9718
     * This method is like `_.isMatch` except that it accepts `customizer` which                                       // 9719
     * is invoked to compare values. If `customizer` returns `undefined` comparisons                                   // 9720
     * are handled by the method instead. The `customizer` is invoked with three                                       // 9721
     * arguments: (objValue, srcValue, index|key, object, source).                                                     // 9722
     *                                                                                                                 // 9723
     * @static                                                                                                         // 9724
     * @memberOf _                                                                                                     // 9725
     * @category Lang                                                                                                  // 9726
     * @param {Object} object The object to inspect.                                                                   // 9727
     * @param {Object} source The object of property values to match.                                                  // 9728
     * @param {Function} [customizer] The function to customize comparisons.                                           // 9729
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.                                         // 9730
     * @example                                                                                                        // 9731
     *                                                                                                                 // 9732
     * function isGreeting(value) {                                                                                    // 9733
     *   return /^h(?:i|ello)$/.test(value);                                                                           // 9734
     * }                                                                                                               // 9735
     *                                                                                                                 // 9736
     * function customizer(objValue, srcValue) {                                                                       // 9737
     *   if (isGreeting(objValue) && isGreeting(srcValue)) {                                                           // 9738
     *     return true;                                                                                                // 9739
     *   }                                                                                                             // 9740
     * }                                                                                                               // 9741
     *                                                                                                                 // 9742
     * var object = { 'greeting': 'hello' };                                                                           // 9743
     * var source = { 'greeting': 'hi' };                                                                              // 9744
     *                                                                                                                 // 9745
     * _.isMatchWith(object, source, customizer);                                                                      // 9746
     * // => true                                                                                                      // 9747
     */                                                                                                                // 9748
    function isMatchWith(object, source, customizer) {                                                                 // 9749
      customizer = typeof customizer == 'function' ? customizer : undefined;                                           // 9750
      return baseIsMatch(object, source, getMatchData(source), customizer);                                            // 9751
    }                                                                                                                  // 9752
                                                                                                                       // 9753
    /**                                                                                                                // 9754
     * Checks if `value` is `NaN`.                                                                                     // 9755
     *                                                                                                                 // 9756
     * **Note:** This method is not the same as [`isNaN`](https://es5.github.io/#x15.1.2.4)                            // 9757
     * which returns `true` for `undefined` and other non-numeric values.                                              // 9758
     *                                                                                                                 // 9759
     * @static                                                                                                         // 9760
     * @memberOf _                                                                                                     // 9761
     * @category Lang                                                                                                  // 9762
     * @param {*} value The value to check.                                                                            // 9763
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.                                            // 9764
     * @example                                                                                                        // 9765
     *                                                                                                                 // 9766
     * _.isNaN(NaN);                                                                                                   // 9767
     * // => true                                                                                                      // 9768
     *                                                                                                                 // 9769
     * _.isNaN(new Number(NaN));                                                                                       // 9770
     * // => true                                                                                                      // 9771
     *                                                                                                                 // 9772
     * isNaN(undefined);                                                                                               // 9773
     * // => true                                                                                                      // 9774
     *                                                                                                                 // 9775
     * _.isNaN(undefined);                                                                                             // 9776
     * // => false                                                                                                     // 9777
     */                                                                                                                // 9778
    function isNaN(value) {                                                                                            // 9779
      // An `NaN` primitive is the only value that is not equal to itself.                                             // 9780
      // Perform the `toStringTag` check first to avoid errors with some ActiveX objects in IE.                        // 9781
      return isNumber(value) && value != +value;                                                                       // 9782
    }                                                                                                                  // 9783
                                                                                                                       // 9784
    /**                                                                                                                // 9785
     * Checks if `value` is a native function.                                                                         // 9786
     *                                                                                                                 // 9787
     * @static                                                                                                         // 9788
     * @memberOf _                                                                                                     // 9789
     * @category Lang                                                                                                  // 9790
     * @param {*} value The value to check.                                                                            // 9791
     * @returns {boolean} Returns `true` if `value` is a native function, else `false`.                                // 9792
     * @example                                                                                                        // 9793
     *                                                                                                                 // 9794
     * _.isNative(Array.prototype.push);                                                                               // 9795
     * // => true                                                                                                      // 9796
     *                                                                                                                 // 9797
     * _.isNative(_);                                                                                                  // 9798
     * // => false                                                                                                     // 9799
     */                                                                                                                // 9800
    function isNative(value) {                                                                                         // 9801
      if (value == null) {                                                                                             // 9802
        return false;                                                                                                  // 9803
      }                                                                                                                // 9804
      if (isFunction(value)) {                                                                                         // 9805
        return reIsNative.test(funcToString.call(value));                                                              // 9806
      }                                                                                                                // 9807
      return isObjectLike(value) &&                                                                                    // 9808
        (isHostObject(value) ? reIsNative : reIsHostCtor).test(value);                                                 // 9809
    }                                                                                                                  // 9810
                                                                                                                       // 9811
    /**                                                                                                                // 9812
     * Checks if `value` is `null`.                                                                                    // 9813
     *                                                                                                                 // 9814
     * @static                                                                                                         // 9815
     * @memberOf _                                                                                                     // 9816
     * @category Lang                                                                                                  // 9817
     * @param {*} value The value to check.                                                                            // 9818
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.                                           // 9819
     * @example                                                                                                        // 9820
     *                                                                                                                 // 9821
     * _.isNull(null);                                                                                                 // 9822
     * // => true                                                                                                      // 9823
     *                                                                                                                 // 9824
     * _.isNull(void 0);                                                                                               // 9825
     * // => false                                                                                                     // 9826
     */                                                                                                                // 9827
    function isNull(value) {                                                                                           // 9828
      return value === null;                                                                                           // 9829
    }                                                                                                                  // 9830
                                                                                                                       // 9831
    /**                                                                                                                // 9832
     * Checks if `value` is `null` or `undefined`.                                                                     // 9833
     *                                                                                                                 // 9834
     * @static                                                                                                         // 9835
     * @memberOf _                                                                                                     // 9836
     * @category Lang                                                                                                  // 9837
     * @param {*} value The value to check.                                                                            // 9838
     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.                                          // 9839
     * @example                                                                                                        // 9840
     *                                                                                                                 // 9841
     * _.isNil(null);                                                                                                  // 9842
     * // => true                                                                                                      // 9843
     *                                                                                                                 // 9844
     * _.isNil(void 0);                                                                                                // 9845
     * // => true                                                                                                      // 9846
     *                                                                                                                 // 9847
     * _.isNil(NaN);                                                                                                   // 9848
     * // => false                                                                                                     // 9849
     */                                                                                                                // 9850
    function isNil(value) {                                                                                            // 9851
      return value == null;                                                                                            // 9852
    }                                                                                                                  // 9853
                                                                                                                       // 9854
    /**                                                                                                                // 9855
     * Checks if `value` is classified as a `Number` primitive or object.                                              // 9856
     *                                                                                                                 // 9857
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are classified                                   // 9858
     * as numbers, use the `_.isFinite` method.                                                                        // 9859
     *                                                                                                                 // 9860
     * @static                                                                                                         // 9861
     * @memberOf _                                                                                                     // 9862
     * @category Lang                                                                                                  // 9863
     * @param {*} value The value to check.                                                                            // 9864
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.                             // 9865
     * @example                                                                                                        // 9866
     *                                                                                                                 // 9867
     * _.isNumber(3);                                                                                                  // 9868
     * // => true                                                                                                      // 9869
     *                                                                                                                 // 9870
     * _.isNumber(Number.MIN_VALUE);                                                                                   // 9871
     * // => true                                                                                                      // 9872
     *                                                                                                                 // 9873
     * _.isNumber(Infinity);                                                                                           // 9874
     * // => true                                                                                                      // 9875
     *                                                                                                                 // 9876
     * _.isNumber('3');                                                                                                // 9877
     * // => false                                                                                                     // 9878
     */                                                                                                                // 9879
    function isNumber(value) {                                                                                         // 9880
      return typeof value == 'number' ||                                                                               // 9881
        (isObjectLike(value) && objectToString.call(value) == numberTag);                                              // 9882
    }                                                                                                                  // 9883
                                                                                                                       // 9884
    /**                                                                                                                // 9885
     * Checks if `value` is a plain object, that is, an object created by the                                          // 9886
     * `Object` constructor or one with a `[[Prototype]]` of `null`.                                                   // 9887
     *                                                                                                                 // 9888
     * @static                                                                                                         // 9889
     * @memberOf _                                                                                                     // 9890
     * @category Lang                                                                                                  // 9891
     * @param {*} value The value to check.                                                                            // 9892
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.                                   // 9893
     * @example                                                                                                        // 9894
     *                                                                                                                 // 9895
     * function Foo() {                                                                                                // 9896
     *   this.a = 1;                                                                                                   // 9897
     * }                                                                                                               // 9898
     *                                                                                                                 // 9899
     * _.isPlainObject(new Foo);                                                                                       // 9900
     * // => false                                                                                                     // 9901
     *                                                                                                                 // 9902
     * _.isPlainObject([1, 2, 3]);                                                                                     // 9903
     * // => false                                                                                                     // 9904
     *                                                                                                                 // 9905
     * _.isPlainObject({ 'x': 0, 'y': 0 });                                                                            // 9906
     * // => true                                                                                                      // 9907
     *                                                                                                                 // 9908
     * _.isPlainObject(Object.create(null));                                                                           // 9909
     * // => true                                                                                                      // 9910
     */                                                                                                                // 9911
    function isPlainObject(value) {                                                                                    // 9912
      if (!isObjectLike(value) || objectToString.call(value) != objectTag || isHostObject(value)) {                    // 9913
        return false;                                                                                                  // 9914
      }                                                                                                                // 9915
      var proto = objectProto;                                                                                         // 9916
      if (typeof value.constructor == 'function') {                                                                    // 9917
        proto = getPrototypeOf(value);                                                                                 // 9918
      }                                                                                                                // 9919
      if (proto === null) {                                                                                            // 9920
        return true;                                                                                                   // 9921
      }                                                                                                                // 9922
      var Ctor = proto.constructor;                                                                                    // 9923
      return (typeof Ctor == 'function' &&                                                                             // 9924
        Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString);                                          // 9925
    }                                                                                                                  // 9926
                                                                                                                       // 9927
    /**                                                                                                                // 9928
     * Checks if `value` is classified as a `RegExp` object.                                                           // 9929
     *                                                                                                                 // 9930
     * @static                                                                                                         // 9931
     * @memberOf _                                                                                                     // 9932
     * @category Lang                                                                                                  // 9933
     * @param {*} value The value to check.                                                                            // 9934
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.                             // 9935
     * @example                                                                                                        // 9936
     *                                                                                                                 // 9937
     * _.isRegExp(/abc/);                                                                                              // 9938
     * // => true                                                                                                      // 9939
     *                                                                                                                 // 9940
     * _.isRegExp('/abc/');                                                                                            // 9941
     * // => false                                                                                                     // 9942
     */                                                                                                                // 9943
    function isRegExp(value) {                                                                                         // 9944
      return isObject(value) && objectToString.call(value) == regexpTag;                                               // 9945
    }                                                                                                                  // 9946
                                                                                                                       // 9947
    /**                                                                                                                // 9948
     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754                                     // 9949
     * double precision number which isn't the result of a rounded unsafe integer.                                     // 9950
     *                                                                                                                 // 9951
     * **Note:** This method is based on [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).                // 9952
     *                                                                                                                 // 9953
     * @static                                                                                                         // 9954
     * @memberOf _                                                                                                     // 9955
     * @category Lang                                                                                                  // 9956
     * @param {*} value The value to check.                                                                            // 9957
     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.                                   // 9958
     * @example                                                                                                        // 9959
     *                                                                                                                 // 9960
     * _.isSafeInteger(3);                                                                                             // 9961
     * // => true                                                                                                      // 9962
     *                                                                                                                 // 9963
     * _.isSafeInteger(Number.MIN_VALUE);                                                                              // 9964
     * // => false                                                                                                     // 9965
     *                                                                                                                 // 9966
     * _.isSafeInteger(Infinity);                                                                                      // 9967
     * // => false                                                                                                     // 9968
     *                                                                                                                 // 9969
     * _.isSafeInteger('3');                                                                                           // 9970
     * // => false                                                                                                     // 9971
     */                                                                                                                // 9972
    function isSafeInteger(value) {                                                                                    // 9973
      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;                              // 9974
    }                                                                                                                  // 9975
                                                                                                                       // 9976
    /**                                                                                                                // 9977
     * Checks if `value` is classified as a `String` primitive or object.                                              // 9978
     *                                                                                                                 // 9979
     * @static                                                                                                         // 9980
     * @memberOf _                                                                                                     // 9981
     * @category Lang                                                                                                  // 9982
     * @param {*} value The value to check.                                                                            // 9983
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.                             // 9984
     * @example                                                                                                        // 9985
     *                                                                                                                 // 9986
     * _.isString('abc');                                                                                              // 9987
     * // => true                                                                                                      // 9988
     *                                                                                                                 // 9989
     * _.isString(1);                                                                                                  // 9990
     * // => false                                                                                                     // 9991
     */                                                                                                                // 9992
    function isString(value) {                                                                                         // 9993
      return typeof value == 'string' ||                                                                               // 9994
        (!isArray(value) && isObjectLike(value) && objectToString.call(value) == stringTag);                           // 9995
    }                                                                                                                  // 9996
                                                                                                                       // 9997
    /**                                                                                                                // 9998
     * Checks if `value` is classified as a `Symbol` primitive or object.                                              // 9999
     *                                                                                                                 // 10000
     * @static                                                                                                         // 10001
     * @memberOf _                                                                                                     // 10002
     * @category Lang                                                                                                  // 10003
     * @param {*} value The value to check.                                                                            // 10004
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.                             // 10005
     * @example                                                                                                        // 10006
     *                                                                                                                 // 10007
     * _.isSymbol(Symbol.iterator);                                                                                    // 10008
     * // => true                                                                                                      // 10009
     *                                                                                                                 // 10010
     * _.isSymbol('abc');                                                                                              // 10011
     * // => false                                                                                                     // 10012
     */                                                                                                                // 10013
    function isSymbol(value) {                                                                                         // 10014
      return typeof value == 'symbol' ||                                                                               // 10015
        (isObjectLike(value) && objectToString.call(value) == symbolTag);                                              // 10016
    }                                                                                                                  // 10017
                                                                                                                       // 10018
    /**                                                                                                                // 10019
     * Checks if `value` is classified as a typed array.                                                               // 10020
     *                                                                                                                 // 10021
     * @static                                                                                                         // 10022
     * @memberOf _                                                                                                     // 10023
     * @category Lang                                                                                                  // 10024
     * @param {*} value The value to check.                                                                            // 10025
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.                             // 10026
     * @example                                                                                                        // 10027
     *                                                                                                                 // 10028
     * _.isTypedArray(new Uint8Array);                                                                                 // 10029
     * // => true                                                                                                      // 10030
     *                                                                                                                 // 10031
     * _.isTypedArray([]);                                                                                             // 10032
     * // => false                                                                                                     // 10033
     */                                                                                                                // 10034
    function isTypedArray(value) {                                                                                     // 10035
      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objectToString.call(value)];            // 10036
    }                                                                                                                  // 10037
                                                                                                                       // 10038
    /**                                                                                                                // 10039
     * Checks if `value` is `undefined`.                                                                               // 10040
     *                                                                                                                 // 10041
     * @static                                                                                                         // 10042
     * @memberOf _                                                                                                     // 10043
     * @category Lang                                                                                                  // 10044
     * @param {*} value The value to check.                                                                            // 10045
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.                                      // 10046
     * @example                                                                                                        // 10047
     *                                                                                                                 // 10048
     * _.isUndefined(void 0);                                                                                          // 10049
     * // => true                                                                                                      // 10050
     *                                                                                                                 // 10051
     * _.isUndefined(null);                                                                                            // 10052
     * // => false                                                                                                     // 10053
     */                                                                                                                // 10054
    function isUndefined(value) {                                                                                      // 10055
      return value === undefined;                                                                                      // 10056
    }                                                                                                                  // 10057
                                                                                                                       // 10058
    /**                                                                                                                // 10059
     * Checks if `value` is less than `other`.                                                                         // 10060
     *                                                                                                                 // 10061
     * @static                                                                                                         // 10062
     * @memberOf _                                                                                                     // 10063
     * @category Lang                                                                                                  // 10064
     * @param {*} value The value to compare.                                                                          // 10065
     * @param {*} other The other value to compare.                                                                    // 10066
     * @returns {boolean} Returns `true` if `value` is less than `other`, else `false`.                                // 10067
     * @example                                                                                                        // 10068
     *                                                                                                                 // 10069
     * _.lt(1, 3);                                                                                                     // 10070
     * // => true                                                                                                      // 10071
     *                                                                                                                 // 10072
     * _.lt(3, 3);                                                                                                     // 10073
     * // => false                                                                                                     // 10074
     *                                                                                                                 // 10075
     * _.lt(3, 1);                                                                                                     // 10076
     * // => false                                                                                                     // 10077
     */                                                                                                                // 10078
    function lt(value, other) {                                                                                        // 10079
      return value < other;                                                                                            // 10080
    }                                                                                                                  // 10081
                                                                                                                       // 10082
    /**                                                                                                                // 10083
     * Checks if `value` is less than or equal to `other`.                                                             // 10084
     *                                                                                                                 // 10085
     * @static                                                                                                         // 10086
     * @memberOf _                                                                                                     // 10087
     * @category Lang                                                                                                  // 10088
     * @param {*} value The value to compare.                                                                          // 10089
     * @param {*} other The other value to compare.                                                                    // 10090
     * @returns {boolean} Returns `true` if `value` is less than or equal to `other`, else `false`.                    // 10091
     * @example                                                                                                        // 10092
     *                                                                                                                 // 10093
     * _.lte(1, 3);                                                                                                    // 10094
     * // => true                                                                                                      // 10095
     *                                                                                                                 // 10096
     * _.lte(3, 3);                                                                                                    // 10097
     * // => true                                                                                                      // 10098
     *                                                                                                                 // 10099
     * _.lte(3, 1);                                                                                                    // 10100
     * // => false                                                                                                     // 10101
     */                                                                                                                // 10102
    function lte(value, other) {                                                                                       // 10103
      return value <= other;                                                                                           // 10104
    }                                                                                                                  // 10105
                                                                                                                       // 10106
    /**                                                                                                                // 10107
     * Converts `value` to an array.                                                                                   // 10108
     *                                                                                                                 // 10109
     * @static                                                                                                         // 10110
     * @memberOf _                                                                                                     // 10111
     * @category Lang                                                                                                  // 10112
     * @param {*} value The value to convert.                                                                          // 10113
     * @returns {Array} Returns the converted array.                                                                   // 10114
     * @example                                                                                                        // 10115
     *                                                                                                                 // 10116
     * _.toArray({ 'a': 1, 'b': 2 });                                                                                  // 10117
     * // => [1, 2]                                                                                                    // 10118
     *                                                                                                                 // 10119
     * _.toArray('abc');                                                                                               // 10120
     * // => ['a', 'b', 'c']                                                                                           // 10121
     *                                                                                                                 // 10122
     * _.toArray(1);                                                                                                   // 10123
     * // => []                                                                                                        // 10124
     *                                                                                                                 // 10125
     * _.toArray(null);                                                                                                // 10126
     * // => []                                                                                                        // 10127
     */                                                                                                                // 10128
    function toArray(value) {                                                                                          // 10129
      if (!value) {                                                                                                    // 10130
        return [];                                                                                                     // 10131
      }                                                                                                                // 10132
      if (isArrayLike(value)) {                                                                                        // 10133
        return isString(value) ? stringToArray(value) : copyArray(value);                                              // 10134
      }                                                                                                                // 10135
      if (iteratorSymbol && value[iteratorSymbol]) {                                                                   // 10136
        return iteratorToArray(value[iteratorSymbol]());                                                               // 10137
      }                                                                                                                // 10138
      var tag = getTag(value),                                                                                         // 10139
          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);                                   // 10140
                                                                                                                       // 10141
      return func(value);                                                                                              // 10142
    }                                                                                                                  // 10143
                                                                                                                       // 10144
    /**                                                                                                                // 10145
     * Converts `value` to an integer.                                                                                 // 10146
     *                                                                                                                 // 10147
     * **Note:** This function is loosely based on [`ToInteger`](http://www.ecma-international.org/ecma-262/6.0/#sec-tointeger).
     *                                                                                                                 // 10149
     * @static                                                                                                         // 10150
     * @memberOf _                                                                                                     // 10151
     * @category Lang                                                                                                  // 10152
     * @param {*} value The value to convert.                                                                          // 10153
     * @returns {number} Returns the converted integer.                                                                // 10154
     * @example                                                                                                        // 10155
     *                                                                                                                 // 10156
     * _.toInteger(3);                                                                                                 // 10157
     * // => 3                                                                                                         // 10158
     *                                                                                                                 // 10159
     * _.toInteger(Number.MIN_VALUE);                                                                                  // 10160
     * // => 0                                                                                                         // 10161
     *                                                                                                                 // 10162
     * _.toInteger(Infinity);                                                                                          // 10163
     * // => 1.7976931348623157e+308                                                                                   // 10164
     *                                                                                                                 // 10165
     * _.toInteger('3');                                                                                               // 10166
     * // => 3                                                                                                         // 10167
     */                                                                                                                // 10168
    function toInteger(value) {                                                                                        // 10169
      if (!value) {                                                                                                    // 10170
        return value === 0 ? value : 0;                                                                                // 10171
      }                                                                                                                // 10172
      value = toNumber(value);                                                                                         // 10173
      if (value === INFINITY || value === -INFINITY) {                                                                 // 10174
        var sign = (value < 0 ? -1 : 1);                                                                               // 10175
        return sign * MAX_INTEGER;                                                                                     // 10176
      }                                                                                                                // 10177
      var remainder = value % 1;                                                                                       // 10178
      return value === value ? (remainder ? value - remainder : value) : 0;                                            // 10179
    }                                                                                                                  // 10180
                                                                                                                       // 10181
    /**                                                                                                                // 10182
     * Converts `value` to an integer suitable for use as the length of an                                             // 10183
     * array-like object.                                                                                              // 10184
     *                                                                                                                 // 10185
     * **Note:** This method is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).       // 10186
     *                                                                                                                 // 10187
     * @static                                                                                                         // 10188
     * @memberOf _                                                                                                     // 10189
     * @category Lang                                                                                                  // 10190
     * @param {*} value The value to convert.                                                                          // 10191
     * @return {number} Returns the converted integer.                                                                 // 10192
     * @example                                                                                                        // 10193
     *                                                                                                                 // 10194
     * _.toLength(3);                                                                                                  // 10195
     * // => 3                                                                                                         // 10196
     *                                                                                                                 // 10197
     * _.toLength(Number.MIN_VALUE);                                                                                   // 10198
     * // => 0                                                                                                         // 10199
     *                                                                                                                 // 10200
     * _.toLength(Infinity);                                                                                           // 10201
     * // => 4294967295                                                                                                // 10202
     *                                                                                                                 // 10203
     * _.toLength('3');                                                                                                // 10204
     * // => 3                                                                                                         // 10205
     */                                                                                                                // 10206
    function toLength(value) {                                                                                         // 10207
      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;                                             // 10208
    }                                                                                                                  // 10209
                                                                                                                       // 10210
    /**                                                                                                                // 10211
     * Converts `value` to a number.                                                                                   // 10212
     *                                                                                                                 // 10213
     * @static                                                                                                         // 10214
     * @memberOf _                                                                                                     // 10215
     * @category Lang                                                                                                  // 10216
     * @param {*} value The value to process.                                                                          // 10217
     * @returns {number} Returns the number.                                                                           // 10218
     * @example                                                                                                        // 10219
     *                                                                                                                 // 10220
     * _.toNumber(3);                                                                                                  // 10221
     * // => 3                                                                                                         // 10222
     *                                                                                                                 // 10223
     * _.toNumber(Number.MIN_VALUE);                                                                                   // 10224
     * // => 5e-324                                                                                                    // 10225
     *                                                                                                                 // 10226
     * _.toNumber(Infinity);                                                                                           // 10227
     * // => Infinity                                                                                                  // 10228
     *                                                                                                                 // 10229
     * _.toNumber('3');                                                                                                // 10230
     * // => 3                                                                                                         // 10231
     */                                                                                                                // 10232
    function toNumber(value) {                                                                                         // 10233
      if (isObject(value)) {                                                                                           // 10234
        var other = isFunction(value.valueOf) ? value.valueOf() : value;                                               // 10235
        value = isObject(other) ? (other + '') : other;                                                                // 10236
      }                                                                                                                // 10237
      if (typeof value != 'string') {                                                                                  // 10238
        return value === 0 ? value : +value;                                                                           // 10239
      }                                                                                                                // 10240
      value = value.replace(reTrim, '');                                                                               // 10241
      var isBinary = reIsBinary.test(value);                                                                           // 10242
      return (isBinary || reIsOctal.test(value))                                                                       // 10243
        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)                                                               // 10244
        : (reIsBadHex.test(value) ? NAN : +value);                                                                     // 10245
    }                                                                                                                  // 10246
                                                                                                                       // 10247
    /**                                                                                                                // 10248
     * Converts `value` to a plain object flattening inherited enumerable                                              // 10249
     * properties of `value` to own properties of the plain object.                                                    // 10250
     *                                                                                                                 // 10251
     * @static                                                                                                         // 10252
     * @memberOf _                                                                                                     // 10253
     * @category Lang                                                                                                  // 10254
     * @param {*} value The value to convert.                                                                          // 10255
     * @returns {Object} Returns the converted plain object.                                                           // 10256
     * @example                                                                                                        // 10257
     *                                                                                                                 // 10258
     * function Foo() {                                                                                                // 10259
     *   this.b = 2;                                                                                                   // 10260
     * }                                                                                                               // 10261
     *                                                                                                                 // 10262
     * Foo.prototype.c = 3;                                                                                            // 10263
     *                                                                                                                 // 10264
     * _.assign({ 'a': 1 }, new Foo);                                                                                  // 10265
     * // => { 'a': 1, 'b': 2 }                                                                                        // 10266
     *                                                                                                                 // 10267
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));                                                                 // 10268
     * // => { 'a': 1, 'b': 2, 'c': 3 }                                                                                // 10269
     */                                                                                                                // 10270
    function toPlainObject(value) {                                                                                    // 10271
      return copyObject(value, keysIn(value));                                                                         // 10272
    }                                                                                                                  // 10273
                                                                                                                       // 10274
    /**                                                                                                                // 10275
     * Converts `value` to a safe integer. A safe integer can be compared and                                          // 10276
     * represented correctly.                                                                                          // 10277
     *                                                                                                                 // 10278
     * @static                                                                                                         // 10279
     * @memberOf _                                                                                                     // 10280
     * @category Lang                                                                                                  // 10281
     * @param {*} value The value to convert.                                                                          // 10282
     * @returns {number} Returns the converted integer.                                                                // 10283
     * @example                                                                                                        // 10284
     *                                                                                                                 // 10285
     * _.toSafeInteger(3);                                                                                             // 10286
     * // => 3                                                                                                         // 10287
     *                                                                                                                 // 10288
     * _.toSafeInteger(Number.MIN_VALUE);                                                                              // 10289
     * // => 0                                                                                                         // 10290
     *                                                                                                                 // 10291
     * _.toSafeInteger(Infinity);                                                                                      // 10292
     * // => 9007199254740991                                                                                          // 10293
     *                                                                                                                 // 10294
     * _.toSafeInteger('3');                                                                                           // 10295
     * // => 3                                                                                                         // 10296
     */                                                                                                                // 10297
    function toSafeInteger(value) {                                                                                    // 10298
      return baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);                                         // 10299
    }                                                                                                                  // 10300
                                                                                                                       // 10301
    /**                                                                                                                // 10302
     * Converts `value` to a string if it's not one. An empty string is returned                                       // 10303
     * for `null` and `undefined` values. The sign of `-0` is preserved.                                               // 10304
     *                                                                                                                 // 10305
     * @static                                                                                                         // 10306
     * @memberOf _                                                                                                     // 10307
     * @category Lang                                                                                                  // 10308
     * @param {*} value The value to process.                                                                          // 10309
     * @returns {string} Returns the string.                                                                           // 10310
     * @example                                                                                                        // 10311
     *                                                                                                                 // 10312
     * _.toString(null);                                                                                               // 10313
     * // => ''                                                                                                        // 10314
     *                                                                                                                 // 10315
     * _.toString(-0);                                                                                                 // 10316
     * // => '-0'                                                                                                      // 10317
     *                                                                                                                 // 10318
     * _.toString([1, 2, 3]);                                                                                          // 10319
     * // => '1,2,3'                                                                                                   // 10320
     */                                                                                                                // 10321
    function toString(value) {                                                                                         // 10322
      // Exit early for strings to avoid a performance hit in some environments.                                       // 10323
      if (typeof value == 'string') {                                                                                  // 10324
        return value;                                                                                                  // 10325
      }                                                                                                                // 10326
      if (value == null) {                                                                                             // 10327
        return '';                                                                                                     // 10328
      }                                                                                                                // 10329
      if (isSymbol(value)) {                                                                                           // 10330
        return _Symbol ? symbolToString.call(value) : '';                                                              // 10331
      }                                                                                                                // 10332
      var result = (value + '');                                                                                       // 10333
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;                                              // 10334
    }                                                                                                                  // 10335
                                                                                                                       // 10336
    /*------------------------------------------------------------------------*/                                       // 10337
                                                                                                                       // 10338
    /**                                                                                                                // 10339
     * Assigns own enumerable properties of source objects to the destination                                          // 10340
     * object. Source objects are applied from left to right. Subsequent sources                                       // 10341
     * overwrite property assignments of previous sources.                                                             // 10342
     *                                                                                                                 // 10343
     * **Note:** This method mutates `object` and is loosely based on                                                  // 10344
     * [`Object.assign`](https://mdn.io/Object/assign).                                                                // 10345
     *                                                                                                                 // 10346
     * @static                                                                                                         // 10347
     * @memberOf _                                                                                                     // 10348
     * @category Object                                                                                                // 10349
     * @param {Object} object The destination object.                                                                  // 10350
     * @param {...Object} [sources] The source objects.                                                                // 10351
     * @returns {Object} Returns `object`.                                                                             // 10352
     * @example                                                                                                        // 10353
     *                                                                                                                 // 10354
     * function Foo() {                                                                                                // 10355
     *   this.c = 3;                                                                                                   // 10356
     * }                                                                                                               // 10357
     *                                                                                                                 // 10358
     * function Bar() {                                                                                                // 10359
     *   this.e = 5;                                                                                                   // 10360
     * }                                                                                                               // 10361
     *                                                                                                                 // 10362
     * Foo.prototype.d = 4;                                                                                            // 10363
     * Bar.prototype.f = 6;                                                                                            // 10364
     *                                                                                                                 // 10365
     * _.assign({ 'a': 1 }, new Foo, new Bar);                                                                         // 10366
     * // => { 'a': 1, 'c': 3, 'e': 5 }                                                                                // 10367
     */                                                                                                                // 10368
    var assign = createAssigner(function(object, source) {                                                             // 10369
      copyObject(source, keys(source), object);                                                                        // 10370
    });                                                                                                                // 10371
                                                                                                                       // 10372
    /**                                                                                                                // 10373
     * This method is like `_.assign` except that it iterates over own and                                             // 10374
     * inherited source properties.                                                                                    // 10375
     *                                                                                                                 // 10376
     * **Note:** This method mutates `object`.                                                                         // 10377
     *                                                                                                                 // 10378
     * @static                                                                                                         // 10379
     * @memberOf _                                                                                                     // 10380
     * @alias extend                                                                                                   // 10381
     * @category Object                                                                                                // 10382
     * @param {Object} object The destination object.                                                                  // 10383
     * @param {...Object} [sources] The source objects.                                                                // 10384
     * @returns {Object} Returns `object`.                                                                             // 10385
     * @example                                                                                                        // 10386
     *                                                                                                                 // 10387
     * function Foo() {                                                                                                // 10388
     *   this.b = 2;                                                                                                   // 10389
     * }                                                                                                               // 10390
     *                                                                                                                 // 10391
     * function Bar() {                                                                                                // 10392
     *   this.d = 4;                                                                                                   // 10393
     * }                                                                                                               // 10394
     *                                                                                                                 // 10395
     * Foo.prototype.c = 3;                                                                                            // 10396
     * Bar.prototype.e = 5;                                                                                            // 10397
     *                                                                                                                 // 10398
     * _.assignIn({ 'a': 1 }, new Foo, new Bar);                                                                       // 10399
     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5 }                                                                // 10400
     */                                                                                                                // 10401
    var assignIn = createAssigner(function(object, source) {                                                           // 10402
      copyObject(source, keysIn(source), object);                                                                      // 10403
    });                                                                                                                // 10404
                                                                                                                       // 10405
    /**                                                                                                                // 10406
     * This method is like `_.assignIn` except that it accepts `customizer` which                                      // 10407
     * is invoked to produce the assigned values. If `customizer` returns `undefined`                                  // 10408
     * assignment is handled by the method instead. The `customizer` is invoked                                        // 10409
     * with five arguments: (objValue, srcValue, key, object, source).                                                 // 10410
     *                                                                                                                 // 10411
     * **Note:** This method mutates `object`.                                                                         // 10412
     *                                                                                                                 // 10413
     * @static                                                                                                         // 10414
     * @memberOf _                                                                                                     // 10415
     * @alias extendWith                                                                                               // 10416
     * @category Object                                                                                                // 10417
     * @param {Object} object The destination object.                                                                  // 10418
     * @param {...Object} sources The source objects.                                                                  // 10419
     * @param {Function} [customizer] The function to customize assigned values.                                       // 10420
     * @returns {Object} Returns `object`.                                                                             // 10421
     * @example                                                                                                        // 10422
     *                                                                                                                 // 10423
     * function customizer(objValue, srcValue) {                                                                       // 10424
     *   return _.isUndefined(objValue) ? srcValue : objValue;                                                         // 10425
     * }                                                                                                               // 10426
     *                                                                                                                 // 10427
     * var defaults = _.partialRight(_.assignInWith, customizer);                                                      // 10428
     *                                                                                                                 // 10429
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });                                                                   // 10430
     * // => { 'a': 1, 'b': 2 }                                                                                        // 10431
     */                                                                                                                // 10432
    var assignInWith = createAssigner(function(object, source, customizer) {                                           // 10433
      copyObjectWith(source, keysIn(source), object, customizer);                                                      // 10434
    });                                                                                                                // 10435
                                                                                                                       // 10436
    /**                                                                                                                // 10437
     * This method is like `_.assign` except that it accepts `customizer` which                                        // 10438
     * is invoked to produce the assigned values. If `customizer` returns `undefined`                                  // 10439
     * assignment is handled by the method instead. The `customizer` is invoked                                        // 10440
     * with five arguments: (objValue, srcValue, key, object, source).                                                 // 10441
     *                                                                                                                 // 10442
     * **Note:** This method mutates `object`.                                                                         // 10443
     *                                                                                                                 // 10444
     * @static                                                                                                         // 10445
     * @memberOf _                                                                                                     // 10446
     * @category Object                                                                                                // 10447
     * @param {Object} object The destination object.                                                                  // 10448
     * @param {...Object} sources The source objects.                                                                  // 10449
     * @param {Function} [customizer] The function to customize assigned values.                                       // 10450
     * @returns {Object} Returns `object`.                                                                             // 10451
     * @example                                                                                                        // 10452
     *                                                                                                                 // 10453
     * function customizer(objValue, srcValue) {                                                                       // 10454
     *   return _.isUndefined(objValue) ? srcValue : objValue;                                                         // 10455
     * }                                                                                                               // 10456
     *                                                                                                                 // 10457
     * var defaults = _.partialRight(_.assignWith, customizer);                                                        // 10458
     *                                                                                                                 // 10459
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });                                                                   // 10460
     * // => { 'a': 1, 'b': 2 }                                                                                        // 10461
     */                                                                                                                // 10462
    var assignWith = createAssigner(function(object, source, customizer) {                                             // 10463
      copyObjectWith(source, keys(source), object, customizer);                                                        // 10464
    });                                                                                                                // 10465
                                                                                                                       // 10466
    /**                                                                                                                // 10467
     * Creates an array of values corresponding to `paths` of `object`.                                                // 10468
     *                                                                                                                 // 10469
     * @static                                                                                                         // 10470
     * @memberOf _                                                                                                     // 10471
     * @category Object                                                                                                // 10472
     * @param {Object} object The object to iterate over.                                                              // 10473
     * @param {...(string|string[])} [paths] The property paths of elements to pick,                                   // 10474
     *  specified individually or in arrays.                                                                           // 10475
     * @returns {Array} Returns the new array of picked elements.                                                      // 10476
     * @example                                                                                                        // 10477
     *                                                                                                                 // 10478
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };                                                                 // 10479
     *                                                                                                                 // 10480
     * _.at(object, ['a[0].b.c', 'a[1]']);                                                                             // 10481
     * // => [3, 4]                                                                                                    // 10482
     *                                                                                                                 // 10483
     * _.at(['a', 'b', 'c'], 0, 2);                                                                                    // 10484
     * // => ['a', 'c']                                                                                                // 10485
     */                                                                                                                // 10486
    var at = rest(function(object, paths) {                                                                            // 10487
      return baseAt(object, baseFlatten(paths));                                                                       // 10488
    });                                                                                                                // 10489
                                                                                                                       // 10490
    /**                                                                                                                // 10491
     * Creates an object that inherits from the `prototype` object. If a `properties`                                  // 10492
     * object is provided its own enumerable properties are assigned to the created object.                            // 10493
     *                                                                                                                 // 10494
     * @static                                                                                                         // 10495
     * @memberOf _                                                                                                     // 10496
     * @category Object                                                                                                // 10497
     * @param {Object} prototype The object to inherit from.                                                           // 10498
     * @param {Object} [properties] The properties to assign to the object.                                            // 10499
     * @returns {Object} Returns the new object.                                                                       // 10500
     * @example                                                                                                        // 10501
     *                                                                                                                 // 10502
     * function Shape() {                                                                                              // 10503
     *   this.x = 0;                                                                                                   // 10504
     *   this.y = 0;                                                                                                   // 10505
     * }                                                                                                               // 10506
     *                                                                                                                 // 10507
     * function Circle() {                                                                                             // 10508
     *   Shape.call(this);                                                                                             // 10509
     * }                                                                                                               // 10510
     *                                                                                                                 // 10511
     * Circle.prototype = _.create(Shape.prototype, {                                                                  // 10512
     *   'constructor': Circle                                                                                         // 10513
     * });                                                                                                             // 10514
     *                                                                                                                 // 10515
     * var circle = new Circle;                                                                                        // 10516
     * circle instanceof Circle;                                                                                       // 10517
     * // => true                                                                                                      // 10518
     *                                                                                                                 // 10519
     * circle instanceof Shape;                                                                                        // 10520
     * // => true                                                                                                      // 10521
     */                                                                                                                // 10522
    function create(prototype, properties) {                                                                           // 10523
      var result = baseCreate(prototype);                                                                              // 10524
      return properties ? baseAssign(result, properties) : result;                                                     // 10525
    }                                                                                                                  // 10526
                                                                                                                       // 10527
    /**                                                                                                                // 10528
     * Assigns own and inherited enumerable properties of source objects to the                                        // 10529
     * destination object for all destination properties that resolve to `undefined`.                                  // 10530
     * Source objects are applied from left to right. Once a property is set,                                          // 10531
     * additional values of the same property are ignored.                                                             // 10532
     *                                                                                                                 // 10533
     * **Note:** This method mutates `object`.                                                                         // 10534
     *                                                                                                                 // 10535
     * @static                                                                                                         // 10536
     * @memberOf _                                                                                                     // 10537
     * @category Object                                                                                                // 10538
     * @param {Object} object The destination object.                                                                  // 10539
     * @param {...Object} [sources] The source objects.                                                                // 10540
     * @returns {Object} Returns `object`.                                                                             // 10541
     * @example                                                                                                        // 10542
     *                                                                                                                 // 10543
     * _.defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });                                            // 10544
     * // => { 'user': 'barney', 'age': 36 }                                                                           // 10545
     */                                                                                                                // 10546
    var defaults = rest(function(args) {                                                                               // 10547
      args.push(undefined, assignInDefaults);                                                                          // 10548
      return apply(assignInWith, undefined, args);                                                                     // 10549
    });                                                                                                                // 10550
                                                                                                                       // 10551
    /**                                                                                                                // 10552
     * This method is like `_.defaults` except that it recursively assigns                                             // 10553
     * default properties.                                                                                             // 10554
     *                                                                                                                 // 10555
     * **Note:** This method mutates `object`.                                                                         // 10556
     *                                                                                                                 // 10557
     * @static                                                                                                         // 10558
     * @memberOf _                                                                                                     // 10559
     * @category Object                                                                                                // 10560
     * @param {Object} object The destination object.                                                                  // 10561
     * @param {...Object} [sources] The source objects.                                                                // 10562
     * @returns {Object} Returns `object`.                                                                             // 10563
     * @example                                                                                                        // 10564
     *                                                                                                                 // 10565
     * _.defaultsDeep({ 'user': { 'name': 'barney' } }, { 'user': { 'name': 'fred', 'age': 36 } });                    // 10566
     * // => { 'user': { 'name': 'barney', 'age': 36 } }                                                               // 10567
     *                                                                                                                 // 10568
     */                                                                                                                // 10569
    var defaultsDeep = rest(function(args) {                                                                           // 10570
      args.push(undefined, mergeDefaults);                                                                             // 10571
      return apply(mergeWith, undefined, args);                                                                        // 10572
    });                                                                                                                // 10573
                                                                                                                       // 10574
    /**                                                                                                                // 10575
     * This method is like `_.find` except that it returns the key of the first                                        // 10576
     * element `predicate` returns truthy for instead of the element itself.                                           // 10577
     *                                                                                                                 // 10578
     * @static                                                                                                         // 10579
     * @memberOf _                                                                                                     // 10580
     * @category Object                                                                                                // 10581
     * @param {Object} object The object to search.                                                                    // 10582
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.                      // 10583
     * @returns {string|undefined} Returns the key of the matched element, else `undefined`.                           // 10584
     * @example                                                                                                        // 10585
     *                                                                                                                 // 10586
     * var users = {                                                                                                   // 10587
     *   'barney':  { 'age': 36, 'active': true },                                                                     // 10588
     *   'fred':    { 'age': 40, 'active': false },                                                                    // 10589
     *   'pebbles': { 'age': 1,  'active': true }                                                                      // 10590
     * };                                                                                                              // 10591
     *                                                                                                                 // 10592
     * _.findKey(users, function(o) { return o.age < 40; });                                                           // 10593
     * // => 'barney' (iteration order is not guaranteed)                                                              // 10594
     *                                                                                                                 // 10595
     * // using the `_.matches` iteratee shorthand                                                                     // 10596
     * _.findKey(users, { 'age': 1, 'active': true });                                                                 // 10597
     * // => 'pebbles'                                                                                                 // 10598
     *                                                                                                                 // 10599
     * // using the `_.matchesProperty` iteratee shorthand                                                             // 10600
     * _.findKey(users, ['active', false]);                                                                            // 10601
     * // => 'fred'                                                                                                    // 10602
     *                                                                                                                 // 10603
     * // using the `_.property` iteratee shorthand                                                                    // 10604
     * _.findKey(users, 'active');                                                                                     // 10605
     * // => 'barney'                                                                                                  // 10606
     */                                                                                                                // 10607
    function findKey(object, predicate) {                                                                              // 10608
      return baseFind(object, getIteratee(predicate, 3), baseForOwn, true);                                            // 10609
    }                                                                                                                  // 10610
                                                                                                                       // 10611
    /**                                                                                                                // 10612
     * This method is like `_.findKey` except that it iterates over elements of                                        // 10613
     * a collection in the opposite order.                                                                             // 10614
     *                                                                                                                 // 10615
     * @static                                                                                                         // 10616
     * @memberOf _                                                                                                     // 10617
     * @category Object                                                                                                // 10618
     * @param {Object} object The object to search.                                                                    // 10619
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.                      // 10620
     * @returns {string|undefined} Returns the key of the matched element, else `undefined`.                           // 10621
     * @example                                                                                                        // 10622
     *                                                                                                                 // 10623
     * var users = {                                                                                                   // 10624
     *   'barney':  { 'age': 36, 'active': true },                                                                     // 10625
     *   'fred':    { 'age': 40, 'active': false },                                                                    // 10626
     *   'pebbles': { 'age': 1,  'active': true }                                                                      // 10627
     * };                                                                                                              // 10628
     *                                                                                                                 // 10629
     * _.findLastKey(users, function(o) { return o.age < 40; });                                                       // 10630
     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'                                                   // 10631
     *                                                                                                                 // 10632
     * // using the `_.matches` iteratee shorthand                                                                     // 10633
     * _.findLastKey(users, { 'age': 36, 'active': true });                                                            // 10634
     * // => 'barney'                                                                                                  // 10635
     *                                                                                                                 // 10636
     * // using the `_.matchesProperty` iteratee shorthand                                                             // 10637
     * _.findLastKey(users, ['active', false]);                                                                        // 10638
     * // => 'fred'                                                                                                    // 10639
     *                                                                                                                 // 10640
     * // using the `_.property` iteratee shorthand                                                                    // 10641
     * _.findLastKey(users, 'active');                                                                                 // 10642
     * // => 'pebbles'                                                                                                 // 10643
     */                                                                                                                // 10644
    function findLastKey(object, predicate) {                                                                          // 10645
      return baseFind(object, getIteratee(predicate, 3), baseForOwnRight, true);                                       // 10646
    }                                                                                                                  // 10647
                                                                                                                       // 10648
    /**                                                                                                                // 10649
     * Iterates over own and inherited enumerable properties of an object invoking                                     // 10650
     * `iteratee` for each property. The iteratee is invoked with three arguments:                                     // 10651
     * (value, key, object). Iteratee functions may exit iteration early by explicitly                                 // 10652
     * returning `false`.                                                                                              // 10653
     *                                                                                                                 // 10654
     * @static                                                                                                         // 10655
     * @memberOf _                                                                                                     // 10656
     * @category Object                                                                                                // 10657
     * @param {Object} object The object to iterate over.                                                              // 10658
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.                                     // 10659
     * @returns {Object} Returns `object`.                                                                             // 10660
     * @example                                                                                                        // 10661
     *                                                                                                                 // 10662
     * function Foo() {                                                                                                // 10663
     *   this.a = 1;                                                                                                   // 10664
     *   this.b = 2;                                                                                                   // 10665
     * }                                                                                                               // 10666
     *                                                                                                                 // 10667
     * Foo.prototype.c = 3;                                                                                            // 10668
     *                                                                                                                 // 10669
     * _.forIn(new Foo, function(value, key) {                                                                         // 10670
     *   console.log(key);                                                                                             // 10671
     * });                                                                                                             // 10672
     * // => logs 'a', 'b', then 'c' (iteration order is not guaranteed)                                               // 10673
     */                                                                                                                // 10674
    function forIn(object, iteratee) {                                                                                 // 10675
      return object == null ? object : baseFor(object, toFunction(iteratee), keysIn);                                  // 10676
    }                                                                                                                  // 10677
                                                                                                                       // 10678
    /**                                                                                                                // 10679
     * This method is like `_.forIn` except that it iterates over properties of                                        // 10680
     * `object` in the opposite order.                                                                                 // 10681
     *                                                                                                                 // 10682
     * @static                                                                                                         // 10683
     * @memberOf _                                                                                                     // 10684
     * @category Object                                                                                                // 10685
     * @param {Object} object The object to iterate over.                                                              // 10686
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.                                     // 10687
     * @returns {Object} Returns `object`.                                                                             // 10688
     * @example                                                                                                        // 10689
     *                                                                                                                 // 10690
     * function Foo() {                                                                                                // 10691
     *   this.a = 1;                                                                                                   // 10692
     *   this.b = 2;                                                                                                   // 10693
     * }                                                                                                               // 10694
     *                                                                                                                 // 10695
     * Foo.prototype.c = 3;                                                                                            // 10696
     *                                                                                                                 // 10697
     * _.forInRight(new Foo, function(value, key) {                                                                    // 10698
     *   console.log(key);                                                                                             // 10699
     * });                                                                                                             // 10700
     * // => logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'                                        // 10701
     */                                                                                                                // 10702
    function forInRight(object, iteratee) {                                                                            // 10703
      return object == null ? object : baseForRight(object, toFunction(iteratee), keysIn);                             // 10704
    }                                                                                                                  // 10705
                                                                                                                       // 10706
    /**                                                                                                                // 10707
     * Iterates over own enumerable properties of an object invoking `iteratee`                                        // 10708
     * for each property. The iteratee is invoked with three arguments:                                                // 10709
     * (value, key, object). Iteratee functions may exit iteration early by                                            // 10710
     * explicitly returning `false`.                                                                                   // 10711
     *                                                                                                                 // 10712
     * @static                                                                                                         // 10713
     * @memberOf _                                                                                                     // 10714
     * @category Object                                                                                                // 10715
     * @param {Object} object The object to iterate over.                                                              // 10716
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.                                     // 10717
     * @returns {Object} Returns `object`.                                                                             // 10718
     * @example                                                                                                        // 10719
     *                                                                                                                 // 10720
     * function Foo() {                                                                                                // 10721
     *   this.a = 1;                                                                                                   // 10722
     *   this.b = 2;                                                                                                   // 10723
     * }                                                                                                               // 10724
     *                                                                                                                 // 10725
     * Foo.prototype.c = 3;                                                                                            // 10726
     *                                                                                                                 // 10727
     * _.forOwn(new Foo, function(value, key) {                                                                        // 10728
     *   console.log(key);                                                                                             // 10729
     * });                                                                                                             // 10730
     * // => logs 'a' then 'b' (iteration order is not guaranteed)                                                     // 10731
     */                                                                                                                // 10732
    function forOwn(object, iteratee) {                                                                                // 10733
      return object && baseForOwn(object, toFunction(iteratee));                                                       // 10734
    }                                                                                                                  // 10735
                                                                                                                       // 10736
    /**                                                                                                                // 10737
     * This method is like `_.forOwn` except that it iterates over properties of                                       // 10738
     * `object` in the opposite order.                                                                                 // 10739
     *                                                                                                                 // 10740
     * @static                                                                                                         // 10741
     * @memberOf _                                                                                                     // 10742
     * @category Object                                                                                                // 10743
     * @param {Object} object The object to iterate over.                                                              // 10744
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.                                     // 10745
     * @returns {Object} Returns `object`.                                                                             // 10746
     * @example                                                                                                        // 10747
     *                                                                                                                 // 10748
     * function Foo() {                                                                                                // 10749
     *   this.a = 1;                                                                                                   // 10750
     *   this.b = 2;                                                                                                   // 10751
     * }                                                                                                               // 10752
     *                                                                                                                 // 10753
     * Foo.prototype.c = 3;                                                                                            // 10754
     *                                                                                                                 // 10755
     * _.forOwnRight(new Foo, function(value, key) {                                                                   // 10756
     *   console.log(key);                                                                                             // 10757
     * });                                                                                                             // 10758
     * // => logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'                                                   // 10759
     */                                                                                                                // 10760
    function forOwnRight(object, iteratee) {                                                                           // 10761
      return object && baseForOwnRight(object, toFunction(iteratee));                                                  // 10762
    }                                                                                                                  // 10763
                                                                                                                       // 10764
    /**                                                                                                                // 10765
     * Creates an array of function property names from own enumerable properties                                      // 10766
     * of `object`.                                                                                                    // 10767
     *                                                                                                                 // 10768
     * @static                                                                                                         // 10769
     * @memberOf _                                                                                                     // 10770
     * @category Object                                                                                                // 10771
     * @param {Object} object The object to inspect.                                                                   // 10772
     * @returns {Array} Returns the new array of property names.                                                       // 10773
     * @example                                                                                                        // 10774
     *                                                                                                                 // 10775
     * function Foo() {                                                                                                // 10776
     *   this.a = _.constant('a');                                                                                     // 10777
     *   this.b = _.constant('b');                                                                                     // 10778
     * }                                                                                                               // 10779
     *                                                                                                                 // 10780
     * Foo.prototype.c = _.constant('c');                                                                              // 10781
     *                                                                                                                 // 10782
     * _.functions(new Foo);                                                                                           // 10783
     * // => ['a', 'b']                                                                                                // 10784
     */                                                                                                                // 10785
    function functions(object) {                                                                                       // 10786
      return object == null ? [] : baseFunctions(object, keys(object));                                                // 10787
    }                                                                                                                  // 10788
                                                                                                                       // 10789
    /**                                                                                                                // 10790
     * Creates an array of function property names from own and inherited                                              // 10791
     * enumerable properties of `object`.                                                                              // 10792
     *                                                                                                                 // 10793
     * @static                                                                                                         // 10794
     * @memberOf _                                                                                                     // 10795
     * @category Object                                                                                                // 10796
     * @param {Object} object The object to inspect.                                                                   // 10797
     * @returns {Array} Returns the new array of property names.                                                       // 10798
     * @example                                                                                                        // 10799
     *                                                                                                                 // 10800
     * function Foo() {                                                                                                // 10801
     *   this.a = _.constant('a');                                                                                     // 10802
     *   this.b = _.constant('b');                                                                                     // 10803
     * }                                                                                                               // 10804
     *                                                                                                                 // 10805
     * Foo.prototype.c = _.constant('c');                                                                              // 10806
     *                                                                                                                 // 10807
     * _.functionsIn(new Foo);                                                                                         // 10808
     * // => ['a', 'b', 'c']                                                                                           // 10809
     */                                                                                                                // 10810
    function functionsIn(object) {                                                                                     // 10811
      return object == null ? [] : baseFunctions(object, keysIn(object));                                              // 10812
    }                                                                                                                  // 10813
                                                                                                                       // 10814
    /**                                                                                                                // 10815
     * Gets the value at `path` of `object`. If the resolved value is                                                  // 10816
     * `undefined` the `defaultValue` is used in its place.                                                            // 10817
     *                                                                                                                 // 10818
     * @static                                                                                                         // 10819
     * @memberOf _                                                                                                     // 10820
     * @category Object                                                                                                // 10821
     * @param {Object} object The object to query.                                                                     // 10822
     * @param {Array|string} path The path of the property to get.                                                     // 10823
     * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.                              // 10824
     * @returns {*} Returns the resolved value.                                                                        // 10825
     * @example                                                                                                        // 10826
     *                                                                                                                 // 10827
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };                                                                    // 10828
     *                                                                                                                 // 10829
     * _.get(object, 'a[0].b.c');                                                                                      // 10830
     * // => 3                                                                                                         // 10831
     *                                                                                                                 // 10832
     * _.get(object, ['a', '0', 'b', 'c']);                                                                            // 10833
     * // => 3                                                                                                         // 10834
     *                                                                                                                 // 10835
     * _.get(object, 'a.b.c', 'default');                                                                              // 10836
     * // => 'default'                                                                                                 // 10837
     */                                                                                                                // 10838
    function get(object, path, defaultValue) {                                                                         // 10839
      var result = object == null ? undefined : baseGet(object, path);                                                 // 10840
      return result === undefined ? defaultValue : result;                                                             // 10841
    }                                                                                                                  // 10842
                                                                                                                       // 10843
    /**                                                                                                                // 10844
     * Checks if `path` is a direct property of `object`.                                                              // 10845
     *                                                                                                                 // 10846
     * @static                                                                                                         // 10847
     * @memberOf _                                                                                                     // 10848
     * @category Object                                                                                                // 10849
     * @param {Object} object The object to query.                                                                     // 10850
     * @param {Array|string} path The path to check.                                                                   // 10851
     * @returns {boolean} Returns `true` if `path` exists, else `false`.                                               // 10852
     * @example                                                                                                        // 10853
     *                                                                                                                 // 10854
     * var object = { 'a': { 'b': { 'c': 3 } } };                                                                      // 10855
     * var other = _.create({ 'a': _.create({ 'b': _.create({ 'c': 3 }) }) });                                         // 10856
     *                                                                                                                 // 10857
     * _.has(object, 'a');                                                                                             // 10858
     * // => true                                                                                                      // 10859
     *                                                                                                                 // 10860
     * _.has(object, 'a.b.c');                                                                                         // 10861
     * // => true                                                                                                      // 10862
     *                                                                                                                 // 10863
     * _.has(object, ['a', 'b', 'c']);                                                                                 // 10864
     * // => true                                                                                                      // 10865
     *                                                                                                                 // 10866
     * _.has(other, 'a');                                                                                              // 10867
     * // => false                                                                                                     // 10868
     */                                                                                                                // 10869
    function has(object, path) {                                                                                       // 10870
      return hasPath(object, path, baseHas);                                                                           // 10871
    }                                                                                                                  // 10872
                                                                                                                       // 10873
    /**                                                                                                                // 10874
     * Checks if `path` is a direct or inherited property of `object`.                                                 // 10875
     *                                                                                                                 // 10876
     * @static                                                                                                         // 10877
     * @memberOf _                                                                                                     // 10878
     * @category Object                                                                                                // 10879
     * @param {Object} object The object to query.                                                                     // 10880
     * @param {Array|string} path The path to check.                                                                   // 10881
     * @returns {boolean} Returns `true` if `path` exists, else `false`.                                               // 10882
     * @example                                                                                                        // 10883
     *                                                                                                                 // 10884
     * var object = _.create({ 'a': _.create({ 'b': _.create({ 'c': 3 }) }) });                                        // 10885
     *                                                                                                                 // 10886
     * _.hasIn(object, 'a');                                                                                           // 10887
     * // => true                                                                                                      // 10888
     *                                                                                                                 // 10889
     * _.hasIn(object, 'a.b.c');                                                                                       // 10890
     * // => true                                                                                                      // 10891
     *                                                                                                                 // 10892
     * _.hasIn(object, ['a', 'b', 'c']);                                                                               // 10893
     * // => true                                                                                                      // 10894
     *                                                                                                                 // 10895
     * _.hasIn(object, 'b');                                                                                           // 10896
     * // => false                                                                                                     // 10897
     */                                                                                                                // 10898
    function hasIn(object, path) {                                                                                     // 10899
      return hasPath(object, path, baseHasIn);                                                                         // 10900
    }                                                                                                                  // 10901
                                                                                                                       // 10902
    /**                                                                                                                // 10903
     * Creates an object composed of the inverted keys and values of `object`.                                         // 10904
     * If `object` contains duplicate values, subsequent values overwrite property                                     // 10905
     * assignments of previous values unless `multiVal` is `true`.                                                     // 10906
     *                                                                                                                 // 10907
     * @static                                                                                                         // 10908
     * @memberOf _                                                                                                     // 10909
     * @category Object                                                                                                // 10910
     * @param {Object} object The object to invert.                                                                    // 10911
     * @param {boolean} [multiVal] Allow multiple values per key.                                                      // 10912
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.                                 // 10913
     * @returns {Object} Returns the new inverted object.                                                              // 10914
     * @example                                                                                                        // 10915
     *                                                                                                                 // 10916
     * var object = { 'a': 1, 'b': 2, 'c': 1 };                                                                        // 10917
     *                                                                                                                 // 10918
     * _.invert(object);                                                                                               // 10919
     * // => { '1': 'c', '2': 'b' }                                                                                    // 10920
     *                                                                                                                 // 10921
     * // with `multiVal`                                                                                              // 10922
     * _.invert(object, true);                                                                                         // 10923
     * // => { '1': ['a', 'c'], '2': ['b'] }                                                                           // 10924
     */                                                                                                                // 10925
    function invert(object, multiVal, guard) {                                                                         // 10926
      return arrayReduce(keys(object), function(result, key) {                                                         // 10927
        var value = object[key];                                                                                       // 10928
        if (multiVal && !guard) {                                                                                      // 10929
          if (hasOwnProperty.call(result, value)) {                                                                    // 10930
            result[value].push(key);                                                                                   // 10931
          } else {                                                                                                     // 10932
            result[value] = [key];                                                                                     // 10933
          }                                                                                                            // 10934
        }                                                                                                              // 10935
        else {                                                                                                         // 10936
          result[value] = key;                                                                                         // 10937
        }                                                                                                              // 10938
        return result;                                                                                                 // 10939
      }, {});                                                                                                          // 10940
    }                                                                                                                  // 10941
                                                                                                                       // 10942
    /**                                                                                                                // 10943
     * Invokes the method at `path` of `object`.                                                                       // 10944
     *                                                                                                                 // 10945
     * @static                                                                                                         // 10946
     * @memberOf _                                                                                                     // 10947
     * @category Object                                                                                                // 10948
     * @param {Object} object The object to query.                                                                     // 10949
     * @param {Array|string} path The path of the method to invoke.                                                    // 10950
     * @param {...*} [args] The arguments to invoke the method with.                                                   // 10951
     * @returns {*} Returns the result of the invoked method.                                                          // 10952
     * @example                                                                                                        // 10953
     *                                                                                                                 // 10954
     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };                                                         // 10955
     *                                                                                                                 // 10956
     * _.invoke(object, 'a[0].b.c.slice', 1, 3);                                                                       // 10957
     * // => [2, 3]                                                                                                    // 10958
     */                                                                                                                // 10959
    var invoke = rest(baseInvoke);                                                                                     // 10960
                                                                                                                       // 10961
    /**                                                                                                                // 10962
     * Creates an array of the own enumerable property names of `object`.                                              // 10963
     *                                                                                                                 // 10964
     * **Note:** Non-object values are coerced to objects. See the                                                     // 10965
     * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)                                          // 10966
     * for more details.                                                                                               // 10967
     *                                                                                                                 // 10968
     * @static                                                                                                         // 10969
     * @memberOf _                                                                                                     // 10970
     * @category Object                                                                                                // 10971
     * @param {Object} object The object to query.                                                                     // 10972
     * @returns {Array} Returns the array of property names.                                                           // 10973
     * @example                                                                                                        // 10974
     *                                                                                                                 // 10975
     * function Foo() {                                                                                                // 10976
     *   this.a = 1;                                                                                                   // 10977
     *   this.b = 2;                                                                                                   // 10978
     * }                                                                                                               // 10979
     *                                                                                                                 // 10980
     * Foo.prototype.c = 3;                                                                                            // 10981
     *                                                                                                                 // 10982
     * _.keys(new Foo);                                                                                                // 10983
     * // => ['a', 'b'] (iteration order is not guaranteed)                                                            // 10984
     *                                                                                                                 // 10985
     * _.keys('hi');                                                                                                   // 10986
     * // => ['0', '1']                                                                                                // 10987
     */                                                                                                                // 10988
    function keys(object) {                                                                                            // 10989
      var isProto = isPrototype(object);                                                                               // 10990
      if (!(isProto || isArrayLike(object))) {                                                                         // 10991
        return baseKeys(object);                                                                                       // 10992
      }                                                                                                                // 10993
      var indexes = indexKeys(object),                                                                                 // 10994
          skipIndexes = !!indexes,                                                                                     // 10995
          result = indexes || [],                                                                                      // 10996
          length = result.length;                                                                                      // 10997
                                                                                                                       // 10998
      for (var key in object) {                                                                                        // 10999
        if (baseHas(object, key) &&                                                                                    // 11000
            !(skipIndexes && (key == 'length' || isIndex(key, length))) &&                                             // 11001
            !(isProto && key == 'constructor')) {                                                                      // 11002
          result.push(key);                                                                                            // 11003
        }                                                                                                              // 11004
      }                                                                                                                // 11005
      return result;                                                                                                   // 11006
    }                                                                                                                  // 11007
                                                                                                                       // 11008
    /**                                                                                                                // 11009
     * Creates an array of the own and inherited enumerable property names of `object`.                                // 11010
     *                                                                                                                 // 11011
     * **Note:** Non-object values are coerced to objects.                                                             // 11012
     *                                                                                                                 // 11013
     * @static                                                                                                         // 11014
     * @memberOf _                                                                                                     // 11015
     * @category Object                                                                                                // 11016
     * @param {Object} object The object to query.                                                                     // 11017
     * @returns {Array} Returns the array of property names.                                                           // 11018
     * @example                                                                                                        // 11019
     *                                                                                                                 // 11020
     * function Foo() {                                                                                                // 11021
     *   this.a = 1;                                                                                                   // 11022
     *   this.b = 2;                                                                                                   // 11023
     * }                                                                                                               // 11024
     *                                                                                                                 // 11025
     * Foo.prototype.c = 3;                                                                                            // 11026
     *                                                                                                                 // 11027
     * _.keysIn(new Foo);                                                                                              // 11028
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)                                                       // 11029
     */                                                                                                                // 11030
    function keysIn(object) {                                                                                          // 11031
      var index = -1,                                                                                                  // 11032
          isProto = isPrototype(object),                                                                               // 11033
          props = baseKeysIn(object),                                                                                  // 11034
          propsLength = props.length,                                                                                  // 11035
          indexes = indexKeys(object),                                                                                 // 11036
          skipIndexes = !!indexes,                                                                                     // 11037
          result = indexes || [],                                                                                      // 11038
          length = result.length;                                                                                      // 11039
                                                                                                                       // 11040
      while (++index < propsLength) {                                                                                  // 11041
        var key = props[index];                                                                                        // 11042
        if (!(skipIndexes && (key == 'length' || isIndex(key, length))) &&                                             // 11043
            !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {                               // 11044
          result.push(key);                                                                                            // 11045
        }                                                                                                              // 11046
      }                                                                                                                // 11047
      return result;                                                                                                   // 11048
    }                                                                                                                  // 11049
                                                                                                                       // 11050
    /**                                                                                                                // 11051
     * The opposite of `_.mapValues`; this method creates an object with the                                           // 11052
     * same values as `object` and keys generated by running each own enumerable                                       // 11053
     * property of `object` through `iteratee`.                                                                        // 11054
     *                                                                                                                 // 11055
     * @static                                                                                                         // 11056
     * @memberOf _                                                                                                     // 11057
     * @category Object                                                                                                // 11058
     * @param {Object} object The object to iterate over.                                                              // 11059
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked per iteration.                       // 11060
     * @returns {Object} Returns the new mapped object.                                                                // 11061
     * @example                                                                                                        // 11062
     *                                                                                                                 // 11063
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {                                                            // 11064
     *   return key + value;                                                                                           // 11065
     * });                                                                                                             // 11066
     * // => { 'a1': 1, 'b2': 2 }                                                                                      // 11067
     */                                                                                                                // 11068
    function mapKeys(object, iteratee) {                                                                               // 11069
      var result = {};                                                                                                 // 11070
      iteratee = getIteratee(iteratee, 3);                                                                             // 11071
                                                                                                                       // 11072
      baseForOwn(object, function(value, key, object) {                                                                // 11073
        result[iteratee(value, key, object)] = value;                                                                  // 11074
      });                                                                                                              // 11075
      return result;                                                                                                   // 11076
    }                                                                                                                  // 11077
                                                                                                                       // 11078
    /**                                                                                                                // 11079
     * Creates an object with the same keys as `object` and values generated by                                        // 11080
     * running each own enumerable property of `object` through `iteratee`. The                                        // 11081
     * iteratee function is invoked with three arguments: (value, key, object).                                        // 11082
     *                                                                                                                 // 11083
     * @static                                                                                                         // 11084
     * @memberOf _                                                                                                     // 11085
     * @category Object                                                                                                // 11086
     * @param {Object} object The object to iterate over.                                                              // 11087
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked per iteration.                       // 11088
     * @returns {Object} Returns the new mapped object.                                                                // 11089
     * @example                                                                                                        // 11090
     *                                                                                                                 // 11091
     * var users = {                                                                                                   // 11092
     *   'fred':    { 'user': 'fred',    'age': 40 },                                                                  // 11093
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }                                                                    // 11094
     * };                                                                                                              // 11095
     *                                                                                                                 // 11096
     * _.mapValues(users, function(o) { return o.age; });                                                              // 11097
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)                                          // 11098
     *                                                                                                                 // 11099
     * // using the `_.property` iteratee shorthand                                                                    // 11100
     * _.mapValues(users, 'age');                                                                                      // 11101
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)                                          // 11102
     */                                                                                                                // 11103
    function mapValues(object, iteratee) {                                                                             // 11104
      var result = {};                                                                                                 // 11105
      iteratee = getIteratee(iteratee, 3);                                                                             // 11106
                                                                                                                       // 11107
      baseForOwn(object, function(value, key, object) {                                                                // 11108
        result[key] = iteratee(value, key, object);                                                                    // 11109
      });                                                                                                              // 11110
      return result;                                                                                                   // 11111
    }                                                                                                                  // 11112
                                                                                                                       // 11113
    /**                                                                                                                // 11114
     * Recursively merges own and inherited enumerable properties of source                                            // 11115
     * objects into the destination object, skipping source properties that resolve                                    // 11116
     * to `undefined`. Array and plain object properties are merged recursively.                                       // 11117
     * Other objects and value types are overridden by assignment. Source objects                                      // 11118
     * are applied from left to right. Subsequent sources overwrite property                                           // 11119
     * assignments of previous sources.                                                                                // 11120
     *                                                                                                                 // 11121
     * **Note:** This method mutates `object`.                                                                         // 11122
     *                                                                                                                 // 11123
     * @static                                                                                                         // 11124
     * @memberOf _                                                                                                     // 11125
     * @category Object                                                                                                // 11126
     * @param {Object} object The destination object.                                                                  // 11127
     * @param {...Object} [sources] The source objects.                                                                // 11128
     * @returns {Object} Returns `object`.                                                                             // 11129
     * @example                                                                                                        // 11130
     *                                                                                                                 // 11131
     * var users = {                                                                                                   // 11132
     *   'data': [{ 'user': 'barney' }, { 'user': 'fred' }]                                                            // 11133
     * };                                                                                                              // 11134
     *                                                                                                                 // 11135
     * var ages = {                                                                                                    // 11136
     *   'data': [{ 'age': 36 }, { 'age': 40 }]                                                                        // 11137
     * };                                                                                                              // 11138
     *                                                                                                                 // 11139
     * _.merge(users, ages);                                                                                           // 11140
     * // => { 'data': [{ 'user': 'barney', 'age': 36 }, { 'user': 'fred', 'age': 40 }] }                              // 11141
     */                                                                                                                // 11142
    var merge = createAssigner(function(object, source) {                                                              // 11143
      baseMerge(object, source);                                                                                       // 11144
    });                                                                                                                // 11145
                                                                                                                       // 11146
    /**                                                                                                                // 11147
     * This method is like `_.merge` except that it accepts `customizer` which                                         // 11148
     * is invoked to produce the merged values of the destination and source                                           // 11149
     * properties. If `customizer` returns `undefined` merging is handled by the                                       // 11150
     * method instead. The `customizer` is invoked with seven arguments:                                               // 11151
     * (objValue, srcValue, key, object, source, stack).                                                               // 11152
     *                                                                                                                 // 11153
     * @static                                                                                                         // 11154
     * @memberOf _                                                                                                     // 11155
     * @category Object                                                                                                // 11156
     * @param {Object} object The destination object.                                                                  // 11157
     * @param {...Object} sources The source objects.                                                                  // 11158
     * @param {Function} customizer The function to customize assigned values.                                         // 11159
     * @returns {Object} Returns `object`.                                                                             // 11160
     * @example                                                                                                        // 11161
     *                                                                                                                 // 11162
     * function customizer(objValue, srcValue) {                                                                       // 11163
     *   if (_.isArray(objValue)) {                                                                                    // 11164
     *     return objValue.concat(srcValue);                                                                           // 11165
     *   }                                                                                                             // 11166
     * }                                                                                                               // 11167
     *                                                                                                                 // 11168
     * var object = {                                                                                                  // 11169
     *   'fruits': ['apple'],                                                                                          // 11170
     *   'vegetables': ['beet']                                                                                        // 11171
     * };                                                                                                              // 11172
     *                                                                                                                 // 11173
     * var other = {                                                                                                   // 11174
     *   'fruits': ['banana'],                                                                                         // 11175
     *   'vegetables': ['carrot']                                                                                      // 11176
     * };                                                                                                              // 11177
     *                                                                                                                 // 11178
     * _.mergeWith(object, other, customizer);                                                                         // 11179
     * // => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot'] }                                       // 11180
     */                                                                                                                // 11181
    var mergeWith = createAssigner(function(object, source, customizer) {                                              // 11182
      baseMerge(object, source, customizer);                                                                           // 11183
    });                                                                                                                // 11184
                                                                                                                       // 11185
    /**                                                                                                                // 11186
     * The opposite of `_.pick`; this method creates an object composed of the                                         // 11187
     * own and inherited enumerable properties of `object` that are not omitted.                                       // 11188
     *                                                                                                                 // 11189
     * @static                                                                                                         // 11190
     * @memberOf _                                                                                                     // 11191
     * @category Object                                                                                                // 11192
     * @param {Object} object The source object.                                                                       // 11193
     * @param {...(string|string[])} [props] The property names to omit, specified                                     // 11194
     *  individually or in arrays..                                                                                    // 11195
     * @returns {Object} Returns the new object.                                                                       // 11196
     * @example                                                                                                        // 11197
     *                                                                                                                 // 11198
     * var object = { 'a': 1, 'b': '2', 'c': 3 };                                                                      // 11199
     *                                                                                                                 // 11200
     * _.omit(object, ['a', 'c']);                                                                                     // 11201
     * // => { 'b': '2' }                                                                                              // 11202
     */                                                                                                                // 11203
    var omit = rest(function(object, props) {                                                                          // 11204
      if (object == null) {                                                                                            // 11205
        return {};                                                                                                     // 11206
      }                                                                                                                // 11207
      props = arrayMap(baseFlatten(props), String);                                                                    // 11208
      return basePick(object, baseDifference(keysIn(object), props));                                                  // 11209
    });                                                                                                                // 11210
                                                                                                                       // 11211
    /**                                                                                                                // 11212
     * The opposite of `_.pickBy`; this method creates an object composed of the                                       // 11213
     * own and inherited enumerable properties of `object` that `predicate`                                            // 11214
     * doesn't return truthy for.                                                                                      // 11215
     *                                                                                                                 // 11216
     * @static                                                                                                         // 11217
     * @memberOf _                                                                                                     // 11218
     * @category Object                                                                                                // 11219
     * @param {Object} object The source object.                                                                       // 11220
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per property.                       // 11221
     * @returns {Object} Returns the new object.                                                                       // 11222
     * @example                                                                                                        // 11223
     *                                                                                                                 // 11224
     * var object = { 'a': 1, 'b': '2', 'c': 3 };                                                                      // 11225
     *                                                                                                                 // 11226
     * _.omitBy(object, _.isNumber);                                                                                   // 11227
     * // => { 'b': '2' }                                                                                              // 11228
     */                                                                                                                // 11229
    function omitBy(object, predicate) {                                                                               // 11230
      predicate = getIteratee(predicate);                                                                              // 11231
      return basePickBy(object, function(value) {                                                                      // 11232
        return !predicate(value);                                                                                      // 11233
      });                                                                                                              // 11234
    }                                                                                                                  // 11235
                                                                                                                       // 11236
    /**                                                                                                                // 11237
     * Creates an object composed of the picked `object` properties.                                                   // 11238
     *                                                                                                                 // 11239
     * @static                                                                                                         // 11240
     * @memberOf _                                                                                                     // 11241
     * @category Object                                                                                                // 11242
     * @param {Object} object The source object.                                                                       // 11243
     * @param {...(string|string[])} [props] The property names to pick, specified                                     // 11244
     *  individually or in arrays.                                                                                     // 11245
     * @returns {Object} Returns the new object.                                                                       // 11246
     * @example                                                                                                        // 11247
     *                                                                                                                 // 11248
     * var object = { 'a': 1, 'b': '2', 'c': 3 };                                                                      // 11249
     *                                                                                                                 // 11250
     * _.pick(object, ['a', 'c']);                                                                                     // 11251
     * // => { 'a': 1, 'c': 3 }                                                                                        // 11252
     */                                                                                                                // 11253
    var pick = rest(function(object, props) {                                                                          // 11254
      return object == null ? {} : basePick(object, baseFlatten(props));                                               // 11255
    });                                                                                                                // 11256
                                                                                                                       // 11257
    /**                                                                                                                // 11258
     * Creates an object composed of the `object` properties `predicate` returns                                       // 11259
     * truthy for. The predicate is invoked with one argument: (value).                                                // 11260
     *                                                                                                                 // 11261
     * @static                                                                                                         // 11262
     * @memberOf _                                                                                                     // 11263
     * @category Object                                                                                                // 11264
     * @param {Object} object The source object.                                                                       // 11265
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per property.                       // 11266
     * @returns {Object} Returns the new object.                                                                       // 11267
     * @example                                                                                                        // 11268
     *                                                                                                                 // 11269
     * var object = { 'a': 1, 'b': '2', 'c': 3 };                                                                      // 11270
     *                                                                                                                 // 11271
     * _.pickBy(object, _.isNumber);                                                                                   // 11272
     * // => { 'a': 1, 'c': 3 }                                                                                        // 11273
     */                                                                                                                // 11274
    function pickBy(object, predicate) {                                                                               // 11275
      return object == null ? {} : basePickBy(object, getIteratee(predicate));                                         // 11276
    }                                                                                                                  // 11277
                                                                                                                       // 11278
    /**                                                                                                                // 11279
     * This method is like `_.get` except that if the resolved value is a function                                     // 11280
     * it's invoked with the `this` binding of its parent object and its result                                        // 11281
     * is returned.                                                                                                    // 11282
     *                                                                                                                 // 11283
     * @static                                                                                                         // 11284
     * @memberOf _                                                                                                     // 11285
     * @category Object                                                                                                // 11286
     * @param {Object} object The object to query.                                                                     // 11287
     * @param {Array|string} path The path of the property to resolve.                                                 // 11288
     * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.                              // 11289
     * @returns {*} Returns the resolved value.                                                                        // 11290
     * @example                                                                                                        // 11291
     *                                                                                                                 // 11292
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };                                              // 11293
     *                                                                                                                 // 11294
     * _.result(object, 'a[0].b.c1');                                                                                  // 11295
     * // => 3                                                                                                         // 11296
     *                                                                                                                 // 11297
     * _.result(object, 'a[0].b.c2');                                                                                  // 11298
     * // => 4                                                                                                         // 11299
     *                                                                                                                 // 11300
     * _.result(object, 'a[0].b.c3', 'default');                                                                       // 11301
     * // => 'default'                                                                                                 // 11302
     *                                                                                                                 // 11303
     * _.result(object, 'a[0].b.c3', _.constant('default'));                                                           // 11304
     * // => 'default'                                                                                                 // 11305
     */                                                                                                                // 11306
    function result(object, path, defaultValue) {                                                                      // 11307
      if (!isKey(path, object)) {                                                                                      // 11308
        path = baseToPath(path);                                                                                       // 11309
        var result = get(object, path);                                                                                // 11310
        object = parent(object, path);                                                                                 // 11311
      } else {                                                                                                         // 11312
        result = object == null ? undefined : object[path];                                                            // 11313
      }                                                                                                                // 11314
      if (result === undefined) {                                                                                      // 11315
        result = defaultValue;                                                                                         // 11316
      }                                                                                                                // 11317
      return isFunction(result) ? result.call(object) : result;                                                        // 11318
    }                                                                                                                  // 11319
                                                                                                                       // 11320
    /**                                                                                                                // 11321
     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist                                      // 11322
     * it's created. Arrays are created for missing index properties while objects                                     // 11323
     * are created for all other missing properties. Use `_.setWith` to customize                                      // 11324
     * `path` creation.                                                                                                // 11325
     *                                                                                                                 // 11326
     * @static                                                                                                         // 11327
     * @memberOf _                                                                                                     // 11328
     * @category Object                                                                                                // 11329
     * @param {Object} object The object to modify.                                                                    // 11330
     * @param {Array|string} path The path of the property to set.                                                     // 11331
     * @param {*} value The value to set.                                                                              // 11332
     * @returns {Object} Returns `object`.                                                                             // 11333
     * @example                                                                                                        // 11334
     *                                                                                                                 // 11335
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };                                                                    // 11336
     *                                                                                                                 // 11337
     * _.set(object, 'a[0].b.c', 4);                                                                                   // 11338
     * console.log(object.a[0].b.c);                                                                                   // 11339
     * // => 4                                                                                                         // 11340
     *                                                                                                                 // 11341
     * _.set(object, 'x[0].y.z', 5);                                                                                   // 11342
     * console.log(object.x[0].y.z);                                                                                   // 11343
     * // => 5                                                                                                         // 11344
     */                                                                                                                // 11345
    function set(object, path, value) {                                                                                // 11346
      return object == null ? object : baseSet(object, path, value);                                                   // 11347
    }                                                                                                                  // 11348
                                                                                                                       // 11349
    /**                                                                                                                // 11350
     * This method is like `_.set` except that it accepts `customizer` which is                                        // 11351
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`                                  // 11352
     * path creation is handled by the method instead. The `customizer` is invoked                                     // 11353
     * with three arguments: (nsValue, key, nsObject).                                                                 // 11354
     *                                                                                                                 // 11355
     * @static                                                                                                         // 11356
     * @memberOf _                                                                                                     // 11357
     * @category Object                                                                                                // 11358
     * @param {Object} object The object to modify.                                                                    // 11359
     * @param {Array|string} path The path of the property to set.                                                     // 11360
     * @param {*} value The value to set.                                                                              // 11361
     * @param {Function} [customizer] The function to customize assigned values.                                       // 11362
     * @returns {Object} Returns `object`.                                                                             // 11363
     * @example                                                                                                        // 11364
     *                                                                                                                 // 11365
     * _.setWith({ '0': { 'length': 2 } }, '[0][1][2]', 3, Object);                                                    // 11366
     * // => { '0': { '1': { '2': 3 }, 'length': 2 } }                                                                 // 11367
     */                                                                                                                // 11368
    function setWith(object, path, value, customizer) {                                                                // 11369
      customizer = typeof customizer == 'function' ? customizer : undefined;                                           // 11370
      return object == null ? object : baseSet(object, path, value, customizer);                                       // 11371
    }                                                                                                                  // 11372
                                                                                                                       // 11373
    /**                                                                                                                // 11374
     * Creates an array of own enumerable key-value pairs for `object`.                                                // 11375
     *                                                                                                                 // 11376
     * @static                                                                                                         // 11377
     * @memberOf _                                                                                                     // 11378
     * @category Object                                                                                                // 11379
     * @param {Object} object The object to query.                                                                     // 11380
     * @returns {Array} Returns the new array of key-value pairs.                                                      // 11381
     * @example                                                                                                        // 11382
     *                                                                                                                 // 11383
     * function Foo() {                                                                                                // 11384
     *   this.a = 1;                                                                                                   // 11385
     *   this.b = 2;                                                                                                   // 11386
     * }                                                                                                               // 11387
     *                                                                                                                 // 11388
     * Foo.prototype.c = 3;                                                                                            // 11389
     *                                                                                                                 // 11390
     * _.toPairs(new Foo);                                                                                             // 11391
     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)                                                  // 11392
     */                                                                                                                // 11393
    function toPairs(object) {                                                                                         // 11394
      return baseToPairs(object, keys(object));                                                                        // 11395
    }                                                                                                                  // 11396
                                                                                                                       // 11397
    /**                                                                                                                // 11398
     * Creates an array of own and inherited enumerable key-value pairs for `object`.                                  // 11399
     *                                                                                                                 // 11400
     * @static                                                                                                         // 11401
     * @memberOf _                                                                                                     // 11402
     * @category Object                                                                                                // 11403
     * @param {Object} object The object to query.                                                                     // 11404
     * @returns {Array} Returns the new array of key-value pairs.                                                      // 11405
     * @example                                                                                                        // 11406
     *                                                                                                                 // 11407
     * function Foo() {                                                                                                // 11408
     *   this.a = 1;                                                                                                   // 11409
     *   this.b = 2;                                                                                                   // 11410
     * }                                                                                                               // 11411
     *                                                                                                                 // 11412
     * Foo.prototype.c = 3;                                                                                            // 11413
     *                                                                                                                 // 11414
     * _.toPairsIn(new Foo);                                                                                           // 11415
     * // => [['a', 1], ['b', 2], ['c', 1]] (iteration order is not guaranteed)                                        // 11416
     */                                                                                                                // 11417
    function toPairsIn(object) {                                                                                       // 11418
      return baseToPairs(object, keysIn(object));                                                                      // 11419
    }                                                                                                                  // 11420
                                                                                                                       // 11421
    /**                                                                                                                // 11422
     * An alternative to `_.reduce`; this method transforms `object` to a new                                          // 11423
     * `accumulator` object which is the result of running each of its own enumerable                                  // 11424
     * properties through `iteratee`, with each invocation potentially mutating                                        // 11425
     * the `accumulator` object. The iteratee is invoked with four arguments:                                          // 11426
     * (accumulator, value, key, object). Iteratee functions may exit iteration                                        // 11427
     * early by explicitly returning `false`.                                                                          // 11428
     *                                                                                                                 // 11429
     * @static                                                                                                         // 11430
     * @memberOf _                                                                                                     // 11431
     * @category Object                                                                                                // 11432
     * @param {Array|Object} object The object to iterate over.                                                        // 11433
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.                                     // 11434
     * @param {*} [accumulator] The custom accumulator value.                                                          // 11435
     * @returns {*} Returns the accumulated value.                                                                     // 11436
     * @example                                                                                                        // 11437
     *                                                                                                                 // 11438
     * _.transform([2, 3, 4], function(result, n) {                                                                    // 11439
     *   result.push(n *= n);                                                                                          // 11440
     *   return n % 2 == 0;                                                                                            // 11441
     * });                                                                                                             // 11442
     * // => [4, 9]                                                                                                    // 11443
     *                                                                                                                 // 11444
     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {                                          // 11445
     *   (result[value] || (result[value] = [])).push(key);                                                            // 11446
     * });                                                                                                             // 11447
     * // => { '1': ['a', 'c'], '2': ['b'] }                                                                           // 11448
     */                                                                                                                // 11449
    function transform(object, iteratee, accumulator) {                                                                // 11450
      var isArr = isArray(object) || isTypedArray(object);                                                             // 11451
      iteratee = getIteratee(iteratee, 4);                                                                             // 11452
                                                                                                                       // 11453
      if (accumulator == null) {                                                                                       // 11454
        if (isArr || isObject(object)) {                                                                               // 11455
          var Ctor = object.constructor;                                                                               // 11456
          if (isArr) {                                                                                                 // 11457
            accumulator = isArray(object) ? new Ctor : [];                                                             // 11458
          } else {                                                                                                     // 11459
            accumulator = baseCreate(isFunction(Ctor) ? Ctor.prototype : undefined);                                   // 11460
          }                                                                                                            // 11461
        } else {                                                                                                       // 11462
          accumulator = {};                                                                                            // 11463
        }                                                                                                              // 11464
      }                                                                                                                // 11465
      (isArr ? arrayEach : baseForOwn)(object, function(value, index, object) {                                        // 11466
        return iteratee(accumulator, value, index, object);                                                            // 11467
      });                                                                                                              // 11468
      return accumulator;                                                                                              // 11469
    }                                                                                                                  // 11470
                                                                                                                       // 11471
    /**                                                                                                                // 11472
     * Removes the property at `path` of `object`.                                                                     // 11473
     *                                                                                                                 // 11474
     * @static                                                                                                         // 11475
     * @memberOf _                                                                                                     // 11476
     * @category Object                                                                                                // 11477
     * @param {Object} object The object to modify.                                                                    // 11478
     * @param {Array|string} path The path of the property to unset.                                                   // 11479
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.                                     // 11480
     * @example                                                                                                        // 11481
     *                                                                                                                 // 11482
     * var object = { 'a': [{ 'b': { 'c': 7 } }] };                                                                    // 11483
     * _.unset(object, 'a[0].b.c');                                                                                    // 11484
     * // => true                                                                                                      // 11485
     *                                                                                                                 // 11486
     * console.log(object);                                                                                            // 11487
     * // => { 'a': [{ 'b': {} }] };                                                                                   // 11488
     *                                                                                                                 // 11489
     * _.unset(object, 'a[0].b.c');                                                                                    // 11490
     * // => true                                                                                                      // 11491
     *                                                                                                                 // 11492
     * console.log(object);                                                                                            // 11493
     * // => { 'a': [{ 'b': {} }] };                                                                                   // 11494
     */                                                                                                                // 11495
    function unset(object, path) {                                                                                     // 11496
      return object == null ? true : baseUnset(object, path);                                                          // 11497
    }                                                                                                                  // 11498
                                                                                                                       // 11499
    /**                                                                                                                // 11500
     * Creates an array of the own enumerable property values of `object`.                                             // 11501
     *                                                                                                                 // 11502
     * **Note:** Non-object values are coerced to objects.                                                             // 11503
     *                                                                                                                 // 11504
     * @static                                                                                                         // 11505
     * @memberOf _                                                                                                     // 11506
     * @category Object                                                                                                // 11507
     * @param {Object} object The object to query.                                                                     // 11508
     * @returns {Array} Returns the array of property values.                                                          // 11509
     * @example                                                                                                        // 11510
     *                                                                                                                 // 11511
     * function Foo() {                                                                                                // 11512
     *   this.a = 1;                                                                                                   // 11513
     *   this.b = 2;                                                                                                   // 11514
     * }                                                                                                               // 11515
     *                                                                                                                 // 11516
     * Foo.prototype.c = 3;                                                                                            // 11517
     *                                                                                                                 // 11518
     * _.values(new Foo);                                                                                              // 11519
     * // => [1, 2] (iteration order is not guaranteed)                                                                // 11520
     *                                                                                                                 // 11521
     * _.values('hi');                                                                                                 // 11522
     * // => ['h', 'i']                                                                                                // 11523
     */                                                                                                                // 11524
    function values(object) {                                                                                          // 11525
      return object ? baseValues(object, keys(object)) : [];                                                           // 11526
    }                                                                                                                  // 11527
                                                                                                                       // 11528
    /**                                                                                                                // 11529
     * Creates an array of the own and inherited enumerable property values of `object`.                               // 11530
     *                                                                                                                 // 11531
     * **Note:** Non-object values are coerced to objects.                                                             // 11532
     *                                                                                                                 // 11533
     * @static                                                                                                         // 11534
     * @memberOf _                                                                                                     // 11535
     * @category Object                                                                                                // 11536
     * @param {Object} object The object to query.                                                                     // 11537
     * @returns {Array} Returns the array of property values.                                                          // 11538
     * @example                                                                                                        // 11539
     *                                                                                                                 // 11540
     * function Foo() {                                                                                                // 11541
     *   this.a = 1;                                                                                                   // 11542
     *   this.b = 2;                                                                                                   // 11543
     * }                                                                                                               // 11544
     *                                                                                                                 // 11545
     * Foo.prototype.c = 3;                                                                                            // 11546
     *                                                                                                                 // 11547
     * _.valuesIn(new Foo);                                                                                            // 11548
     * // => [1, 2, 3] (iteration order is not guaranteed)                                                             // 11549
     */                                                                                                                // 11550
    function valuesIn(object) {                                                                                        // 11551
      return object == null ? baseValues(object, keysIn(object)) : [];                                                 // 11552
    }                                                                                                                  // 11553
                                                                                                                       // 11554
    /*------------------------------------------------------------------------*/                                       // 11555
                                                                                                                       // 11556
    /**                                                                                                                // 11557
     * Clamps `number` within the inclusive `lower` and `upper` bounds.                                                // 11558
     *                                                                                                                 // 11559
     * @static                                                                                                         // 11560
     * @memberOf _                                                                                                     // 11561
     * @category Number                                                                                                // 11562
     * @param {number} number The number to clamp.                                                                     // 11563
     * @param {number} [lower] The lower bound.                                                                        // 11564
     * @param {number} upper The upper bound.                                                                          // 11565
     * @returns {number} Returns the clamped number.                                                                   // 11566
     * @example                                                                                                        // 11567
     *                                                                                                                 // 11568
     * _.clamp(-10, -5, 5);                                                                                            // 11569
     * // => -5                                                                                                        // 11570
     *                                                                                                                 // 11571
     * _.clamp(10, -5, 5);                                                                                             // 11572
     * // => 5                                                                                                         // 11573
     */                                                                                                                // 11574
    function clamp(number, lower, upper) {                                                                             // 11575
      if (upper === undefined) {                                                                                       // 11576
        upper = lower;                                                                                                 // 11577
        lower = undefined;                                                                                             // 11578
      }                                                                                                                // 11579
      if (upper !== undefined) {                                                                                       // 11580
        upper = toNumber(upper);                                                                                       // 11581
        upper = upper === upper ? upper : 0;                                                                           // 11582
      }                                                                                                                // 11583
      if (lower !== undefined) {                                                                                       // 11584
        lower = toNumber(lower);                                                                                       // 11585
        lower = lower === lower ? lower : 0;                                                                           // 11586
      }                                                                                                                // 11587
      return baseClamp(toNumber(number), lower, upper);                                                                // 11588
    }                                                                                                                  // 11589
                                                                                                                       // 11590
    /**                                                                                                                // 11591
     * Checks if `n` is between `start` and up to but not including, `end`. If                                         // 11592
     * `end` is not specified it's set to `start` with `start` then set to `0`.                                        // 11593
     * If `start` is greater than `end` the params are swapped to support                                              // 11594
     * negative ranges.                                                                                                // 11595
     *                                                                                                                 // 11596
     * @static                                                                                                         // 11597
     * @memberOf _                                                                                                     // 11598
     * @category Number                                                                                                // 11599
     * @param {number} number The number to check.                                                                     // 11600
     * @param {number} [start=0] The start of the range.                                                               // 11601
     * @param {number} end The end of the range.                                                                       // 11602
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.                                    // 11603
     * @example                                                                                                        // 11604
     *                                                                                                                 // 11605
     * _.inRange(3, 2, 4);                                                                                             // 11606
     * // => true                                                                                                      // 11607
     *                                                                                                                 // 11608
     * _.inRange(4, 8);                                                                                                // 11609
     * // => true                                                                                                      // 11610
     *                                                                                                                 // 11611
     * _.inRange(4, 2);                                                                                                // 11612
     * // => false                                                                                                     // 11613
     *                                                                                                                 // 11614
     * _.inRange(2, 2);                                                                                                // 11615
     * // => false                                                                                                     // 11616
     *                                                                                                                 // 11617
     * _.inRange(1.2, 2);                                                                                              // 11618
     * // => true                                                                                                      // 11619
     *                                                                                                                 // 11620
     * _.inRange(5.2, 4);                                                                                              // 11621
     * // => false                                                                                                     // 11622
     *                                                                                                                 // 11623
     * _.inRange(-3, -2, -6);                                                                                          // 11624
     * // => true                                                                                                      // 11625
     */                                                                                                                // 11626
    function inRange(number, start, end) {                                                                             // 11627
      start = toNumber(start) || 0;                                                                                    // 11628
      if (end === undefined) {                                                                                         // 11629
        end = start;                                                                                                   // 11630
        start = 0;                                                                                                     // 11631
      } else {                                                                                                         // 11632
        end = toNumber(end) || 0;                                                                                      // 11633
      }                                                                                                                // 11634
      number = toNumber(number);                                                                                       // 11635
      return baseInRange(number, start, end);                                                                          // 11636
    }                                                                                                                  // 11637
                                                                                                                       // 11638
    /**                                                                                                                // 11639
     * Produces a random number between the inclusive `lower` and `upper` bounds.                                      // 11640
     * If only one argument is provided a number between `0` and the given number                                      // 11641
     * is returned. If `floating` is `true`, or either `lower` or `upper` are floats,                                  // 11642
     * a floating-point number is returned instead of an integer.                                                      // 11643
     *                                                                                                                 // 11644
     * **Note:** JavaScript follows the IEEE-754 standard for resolving                                                // 11645
     * floating-point values which can produce unexpected results.                                                     // 11646
     *                                                                                                                 // 11647
     * @static                                                                                                         // 11648
     * @memberOf _                                                                                                     // 11649
     * @category Number                                                                                                // 11650
     * @param {number} [lower=0] The lower bound.                                                                      // 11651
     * @param {number} [upper=1] The upper bound.                                                                      // 11652
     * @param {boolean} [floating] Specify returning a floating-point number.                                          // 11653
     * @returns {number} Returns the random number.                                                                    // 11654
     * @example                                                                                                        // 11655
     *                                                                                                                 // 11656
     * _.random(0, 5);                                                                                                 // 11657
     * // => an integer between 0 and 5                                                                                // 11658
     *                                                                                                                 // 11659
     * _.random(5);                                                                                                    // 11660
     * // => also an integer between 0 and 5                                                                           // 11661
     *                                                                                                                 // 11662
     * _.random(5, true);                                                                                              // 11663
     * // => a floating-point number between 0 and 5                                                                   // 11664
     *                                                                                                                 // 11665
     * _.random(1.2, 5.2);                                                                                             // 11666
     * // => a floating-point number between 1.2 and 5.2                                                               // 11667
     */                                                                                                                // 11668
    function random(lower, upper, floating) {                                                                          // 11669
      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {                        // 11670
        upper = floating = undefined;                                                                                  // 11671
      }                                                                                                                // 11672
      if (floating === undefined) {                                                                                    // 11673
        if (typeof upper == 'boolean') {                                                                               // 11674
          floating = upper;                                                                                            // 11675
          upper = undefined;                                                                                           // 11676
        }                                                                                                              // 11677
        else if (typeof lower == 'boolean') {                                                                          // 11678
          floating = lower;                                                                                            // 11679
          lower = undefined;                                                                                           // 11680
        }                                                                                                              // 11681
      }                                                                                                                // 11682
      if (lower === undefined && upper === undefined) {                                                                // 11683
        lower = 0;                                                                                                     // 11684
        upper = 1;                                                                                                     // 11685
      }                                                                                                                // 11686
      else {                                                                                                           // 11687
        lower = toNumber(lower) || 0;                                                                                  // 11688
        if (upper === undefined) {                                                                                     // 11689
          upper = lower;                                                                                               // 11690
          lower = 0;                                                                                                   // 11691
        } else {                                                                                                       // 11692
          upper = toNumber(upper) || 0;                                                                                // 11693
        }                                                                                                              // 11694
      }                                                                                                                // 11695
      if (lower > upper) {                                                                                             // 11696
        var temp = lower;                                                                                              // 11697
        lower = upper;                                                                                                 // 11698
        upper = temp;                                                                                                  // 11699
      }                                                                                                                // 11700
      if (floating || lower % 1 || upper % 1) {                                                                        // 11701
        var rand = nativeRandom();                                                                                     // 11702
        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);  // 11703
      }                                                                                                                // 11704
      return baseRandom(lower, upper);                                                                                 // 11705
    }                                                                                                                  // 11706
                                                                                                                       // 11707
    /*------------------------------------------------------------------------*/                                       // 11708
                                                                                                                       // 11709
    /**                                                                                                                // 11710
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).                                     // 11711
     *                                                                                                                 // 11712
     * @static                                                                                                         // 11713
     * @memberOf _                                                                                                     // 11714
     * @category String                                                                                                // 11715
     * @param {string} [string=''] The string to convert.                                                              // 11716
     * @returns {string} Returns the camel cased string.                                                               // 11717
     * @example                                                                                                        // 11718
     *                                                                                                                 // 11719
     * _.camelCase('Foo Bar');                                                                                         // 11720
     * // => 'fooBar'                                                                                                  // 11721
     *                                                                                                                 // 11722
     * _.camelCase('--foo-bar');                                                                                       // 11723
     * // => 'fooBar'                                                                                                  // 11724
     *                                                                                                                 // 11725
     * _.camelCase('__foo_bar__');                                                                                     // 11726
     * // => 'fooBar'                                                                                                  // 11727
     */                                                                                                                // 11728
    var camelCase = createCompounder(function(result, word, index) {                                                   // 11729
      word = word.toLowerCase();                                                                                       // 11730
      return result + (index ? capitalize(word) : word);                                                               // 11731
    });                                                                                                                // 11732
                                                                                                                       // 11733
    /**                                                                                                                // 11734
     * Converts the first character of `string` to upper case and the remaining                                        // 11735
     * to lower case.                                                                                                  // 11736
     *                                                                                                                 // 11737
     * @static                                                                                                         // 11738
     * @memberOf _                                                                                                     // 11739
     * @category String                                                                                                // 11740
     * @param {string} [string=''] The string to capitalize.                                                           // 11741
     * @returns {string} Returns the capitalized string.                                                               // 11742
     * @example                                                                                                        // 11743
     *                                                                                                                 // 11744
     * _.capitalize('FRED');                                                                                           // 11745
     * // => 'Fred'                                                                                                    // 11746
     */                                                                                                                // 11747
    function capitalize(string) {                                                                                      // 11748
      return upperFirst(toString(string).toLowerCase());                                                               // 11749
    }                                                                                                                  // 11750
                                                                                                                       // 11751
    /**                                                                                                                // 11752
     * Deburrs `string` by converting [latin-1 supplementary letters](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * to basic latin letters and removing [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *                                                                                                                 // 11755
     * @static                                                                                                         // 11756
     * @memberOf _                                                                                                     // 11757
     * @category String                                                                                                // 11758
     * @param {string} [string=''] The string to deburr.                                                               // 11759
     * @returns {string} Returns the deburred string.                                                                  // 11760
     * @example                                                                                                        // 11761
     *                                                                                                                 // 11762
     * _.deburr('déjà vu');                                                                                            // 11763
     * // => 'deja vu'                                                                                                 // 11764
     */                                                                                                                // 11765
    function deburr(string) {                                                                                          // 11766
      string = toString(string);                                                                                       // 11767
      return string && string.replace(reLatin1, deburrLetter).replace(reComboMark, '');                                // 11768
    }                                                                                                                  // 11769
                                                                                                                       // 11770
    /**                                                                                                                // 11771
     * Checks if `string` ends with the given target string.                                                           // 11772
     *                                                                                                                 // 11773
     * @static                                                                                                         // 11774
     * @memberOf _                                                                                                     // 11775
     * @category String                                                                                                // 11776
     * @param {string} [string=''] The string to search.                                                               // 11777
     * @param {string} [target] The string to search for.                                                              // 11778
     * @param {number} [position=string.length] The position to search from.                                           // 11779
     * @returns {boolean} Returns `true` if `string` ends with `target`, else `false`.                                 // 11780
     * @example                                                                                                        // 11781
     *                                                                                                                 // 11782
     * _.endsWith('abc', 'c');                                                                                         // 11783
     * // => true                                                                                                      // 11784
     *                                                                                                                 // 11785
     * _.endsWith('abc', 'b');                                                                                         // 11786
     * // => false                                                                                                     // 11787
     *                                                                                                                 // 11788
     * _.endsWith('abc', 'b', 2);                                                                                      // 11789
     * // => true                                                                                                      // 11790
     */                                                                                                                // 11791
    function endsWith(string, target, position) {                                                                      // 11792
      string = toString(string);                                                                                       // 11793
      target = typeof target == 'string' ? target : (target + '');                                                     // 11794
                                                                                                                       // 11795
      var length = string.length;                                                                                      // 11796
      position = position === undefined                                                                                // 11797
        ? length                                                                                                       // 11798
        : baseClamp(toInteger(position), 0, length);                                                                   // 11799
                                                                                                                       // 11800
      position -= target.length;                                                                                       // 11801
      return position >= 0 && string.indexOf(target, position) == position;                                            // 11802
    }                                                                                                                  // 11803
                                                                                                                       // 11804
    /**                                                                                                                // 11805
     * Converts the characters "&", "<", ">", '"', "'", and "\`" in `string` to                                        // 11806
     * their corresponding HTML entities.                                                                              // 11807
     *                                                                                                                 // 11808
     * **Note:** No other characters are escaped. To escape additional                                                 // 11809
     * characters use a third-party library like [_he_](https://mths.be/he).                                           // 11810
     *                                                                                                                 // 11811
     * Though the ">" character is escaped for symmetry, characters like                                               // 11812
     * ">" and "/" don't need escaping in HTML and have no special meaning                                             // 11813
     * unless they're part of a tag or unquoted attribute value.                                                       // 11814
     * See [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)                             // 11815
     * (under "semi-related fun fact") for more details.                                                               // 11816
     *                                                                                                                 // 11817
     * Backticks are escaped because in IE < 9, they can break out of                                                  // 11818
     * attribute values or HTML comments. See [#59](https://html5sec.org/#59),                                         // 11819
     * [#102](https://html5sec.org/#102), [#108](https://html5sec.org/#108), and                                       // 11820
     * [#133](https://html5sec.org/#133) of the [HTML5 Security Cheatsheet](https://html5sec.org/)                     // 11821
     * for more details.                                                                                               // 11822
     *                                                                                                                 // 11823
     * When working with HTML you should always [quote attribute values](http://wonko.com/post/html-escaping)          // 11824
     * to reduce XSS vectors.                                                                                          // 11825
     *                                                                                                                 // 11826
     * @static                                                                                                         // 11827
     * @memberOf _                                                                                                     // 11828
     * @category String                                                                                                // 11829
     * @param {string} [string=''] The string to escape.                                                               // 11830
     * @returns {string} Returns the escaped string.                                                                   // 11831
     * @example                                                                                                        // 11832
     *                                                                                                                 // 11833
     * _.escape('fred, barney, & pebbles');                                                                            // 11834
     * // => 'fred, barney, &amp; pebbles'                                                                             // 11835
     */                                                                                                                // 11836
    function escape(string) {                                                                                          // 11837
      string = toString(string);                                                                                       // 11838
      return (string && reHasUnescapedHtml.test(string))                                                               // 11839
        ? string.replace(reUnescapedHtml, escapeHtmlChar)                                                              // 11840
        : string;                                                                                                      // 11841
    }                                                                                                                  // 11842
                                                                                                                       // 11843
    /**                                                                                                                // 11844
     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",                                           // 11845
     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.                                                         // 11846
     *                                                                                                                 // 11847
     * @static                                                                                                         // 11848
     * @memberOf _                                                                                                     // 11849
     * @category String                                                                                                // 11850
     * @param {string} [string=''] The string to escape.                                                               // 11851
     * @returns {string} Returns the escaped string.                                                                   // 11852
     * @example                                                                                                        // 11853
     *                                                                                                                 // 11854
     * _.escapeRegExp('[lodash](https://lodash.com/)');                                                                // 11855
     * // => '\[lodash\]\(https://lodash\.com/\)'                                                                      // 11856
     */                                                                                                                // 11857
    function escapeRegExp(string) {                                                                                    // 11858
      string = toString(string);                                                                                       // 11859
      return (string && reHasRegExpChar.test(string))                                                                  // 11860
        ? string.replace(reRegExpChar, '\\$&')                                                                         // 11861
        : string;                                                                                                      // 11862
    }                                                                                                                  // 11863
                                                                                                                       // 11864
    /**                                                                                                                // 11865
     * Converts `string` to [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).               // 11866
     *                                                                                                                 // 11867
     * @static                                                                                                         // 11868
     * @memberOf _                                                                                                     // 11869
     * @category String                                                                                                // 11870
     * @param {string} [string=''] The string to convert.                                                              // 11871
     * @returns {string} Returns the kebab cased string.                                                               // 11872
     * @example                                                                                                        // 11873
     *                                                                                                                 // 11874
     * _.kebabCase('Foo Bar');                                                                                         // 11875
     * // => 'foo-bar'                                                                                                 // 11876
     *                                                                                                                 // 11877
     * _.kebabCase('fooBar');                                                                                          // 11878
     * // => 'foo-bar'                                                                                                 // 11879
     *                                                                                                                 // 11880
     * _.kebabCase('__foo_bar__');                                                                                     // 11881
     * // => 'foo-bar'                                                                                                 // 11882
     */                                                                                                                // 11883
    var kebabCase = createCompounder(function(result, word, index) {                                                   // 11884
      return result + (index ? '-' : '') + word.toLowerCase();                                                         // 11885
    });                                                                                                                // 11886
                                                                                                                       // 11887
    /**                                                                                                                // 11888
     * Converts `string`, as space separated words, to lower case.                                                     // 11889
     *                                                                                                                 // 11890
     * @static                                                                                                         // 11891
     * @memberOf _                                                                                                     // 11892
     * @category String                                                                                                // 11893
     * @param {string} [string=''] The string to convert.                                                              // 11894
     * @returns {string} Returns the lower cased string.                                                               // 11895
     * @example                                                                                                        // 11896
     *                                                                                                                 // 11897
     * _.lowerCase('--Foo-Bar');                                                                                       // 11898
     * // => 'foo bar'                                                                                                 // 11899
     *                                                                                                                 // 11900
     * _.lowerCase('fooBar');                                                                                          // 11901
     * // => 'foo bar'                                                                                                 // 11902
     *                                                                                                                 // 11903
     * _.lowerCase('__FOO_BAR__');                                                                                     // 11904
     * // => 'foo bar'                                                                                                 // 11905
     */                                                                                                                // 11906
    var lowerCase = createCompounder(function(result, word, index) {                                                   // 11907
      return result + (index ? ' ' : '') + word.toLowerCase();                                                         // 11908
    });                                                                                                                // 11909
                                                                                                                       // 11910
    /**                                                                                                                // 11911
     * Converts the first character of `string` to lower case.                                                         // 11912
     *                                                                                                                 // 11913
     * @static                                                                                                         // 11914
     * @memberOf _                                                                                                     // 11915
     * @category String                                                                                                // 11916
     * @param {string} [string=''] The string to convert.                                                              // 11917
     * @returns {string} Returns the converted string.                                                                 // 11918
     * @example                                                                                                        // 11919
     *                                                                                                                 // 11920
     * _.lowerFirst('Fred');                                                                                           // 11921
     * // => 'fred'                                                                                                    // 11922
     *                                                                                                                 // 11923
     * _.lowerFirst('FRED');                                                                                           // 11924
     * // => 'fRED'                                                                                                    // 11925
     */                                                                                                                // 11926
    var lowerFirst = createCaseFirst('toLowerCase');                                                                   // 11927
                                                                                                                       // 11928
    /**                                                                                                                // 11929
     * Converts the first character of `string` to upper case.                                                         // 11930
     *                                                                                                                 // 11931
     * @static                                                                                                         // 11932
     * @memberOf _                                                                                                     // 11933
     * @category String                                                                                                // 11934
     * @param {string} [string=''] The string to convert.                                                              // 11935
     * @returns {string} Returns the converted string.                                                                 // 11936
     * @example                                                                                                        // 11937
     *                                                                                                                 // 11938
     * _.upperFirst('fred');                                                                                           // 11939
     * // => 'Fred'                                                                                                    // 11940
     *                                                                                                                 // 11941
     * _.upperFirst('FRED');                                                                                           // 11942
     * // => 'FRED'                                                                                                    // 11943
     */                                                                                                                // 11944
    var upperFirst = createCaseFirst('toUpperCase');                                                                   // 11945
                                                                                                                       // 11946
    /**                                                                                                                // 11947
     * Pads `string` on the left and right sides if it's shorter than `length`.                                        // 11948
     * Padding characters are truncated if they can't be evenly divided by `length`.                                   // 11949
     *                                                                                                                 // 11950
     * @static                                                                                                         // 11951
     * @memberOf _                                                                                                     // 11952
     * @category String                                                                                                // 11953
     * @param {string} [string=''] The string to pad.                                                                  // 11954
     * @param {number} [length=0] The padding length.                                                                  // 11955
     * @param {string} [chars=' '] The string used as padding.                                                         // 11956
     * @returns {string} Returns the padded string.                                                                    // 11957
     * @example                                                                                                        // 11958
     *                                                                                                                 // 11959
     * _.pad('abc', 8);                                                                                                // 11960
     * // => '  abc   '                                                                                                // 11961
     *                                                                                                                 // 11962
     * _.pad('abc', 8, '_-');                                                                                          // 11963
     * // => '_-abc_-_'                                                                                                // 11964
     *                                                                                                                 // 11965
     * _.pad('abc', 3);                                                                                                // 11966
     * // => 'abc'                                                                                                     // 11967
     */                                                                                                                // 11968
    function pad(string, length, chars) {                                                                              // 11969
      string = toString(string);                                                                                       // 11970
      length = toInteger(length);                                                                                      // 11971
                                                                                                                       // 11972
      var strLength = stringSize(string);                                                                              // 11973
      if (!length || strLength >= length) {                                                                            // 11974
        return string;                                                                                                 // 11975
      }                                                                                                                // 11976
      var mid = (length - strLength) / 2,                                                                              // 11977
          leftLength = nativeFloor(mid),                                                                               // 11978
          rightLength = nativeCeil(mid);                                                                               // 11979
                                                                                                                       // 11980
      return createPadding('', leftLength, chars) + string + createPadding('', rightLength, chars);                    // 11981
    }                                                                                                                  // 11982
                                                                                                                       // 11983
    /**                                                                                                                // 11984
     * Pads `string` on the right side if it's shorter than `length`. Padding                                          // 11985
     * characters are truncated if they exceed `length`.                                                               // 11986
     *                                                                                                                 // 11987
     * @static                                                                                                         // 11988
     * @memberOf _                                                                                                     // 11989
     * @category String                                                                                                // 11990
     * @param {string} [string=''] The string to pad.                                                                  // 11991
     * @param {number} [length=0] The padding length.                                                                  // 11992
     * @param {string} [chars=' '] The string used as padding.                                                         // 11993
     * @returns {string} Returns the padded string.                                                                    // 11994
     * @example                                                                                                        // 11995
     *                                                                                                                 // 11996
     * _.padEnd('abc', 6);                                                                                             // 11997
     * // => 'abc   '                                                                                                  // 11998
     *                                                                                                                 // 11999
     * _.padEnd('abc', 6, '_-');                                                                                       // 12000
     * // => 'abc_-_'                                                                                                  // 12001
     *                                                                                                                 // 12002
     * _.padEnd('abc', 3);                                                                                             // 12003
     * // => 'abc'                                                                                                     // 12004
     */                                                                                                                // 12005
    function padEnd(string, length, chars) {                                                                           // 12006
      string = toString(string);                                                                                       // 12007
      return string + createPadding(string, length, chars);                                                            // 12008
    }                                                                                                                  // 12009
                                                                                                                       // 12010
    /**                                                                                                                // 12011
     * Pads `string` on the left side if it's shorter than `length`. Padding                                           // 12012
     * characters are truncated if they exceed `length`.                                                               // 12013
     *                                                                                                                 // 12014
     * @static                                                                                                         // 12015
     * @memberOf _                                                                                                     // 12016
     * @category String                                                                                                // 12017
     * @param {string} [string=''] The string to pad.                                                                  // 12018
     * @param {number} [length=0] The padding length.                                                                  // 12019
     * @param {string} [chars=' '] The string used as padding.                                                         // 12020
     * @returns {string} Returns the padded string.                                                                    // 12021
     * @example                                                                                                        // 12022
     *                                                                                                                 // 12023
     * _.padStart('abc', 6);                                                                                           // 12024
     * // => '   abc'                                                                                                  // 12025
     *                                                                                                                 // 12026
     * _.padStart('abc', 6, '_-');                                                                                     // 12027
     * // => '_-_abc'                                                                                                  // 12028
     *                                                                                                                 // 12029
     * _.padStart('abc', 3);                                                                                           // 12030
     * // => 'abc'                                                                                                     // 12031
     */                                                                                                                // 12032
    function padStart(string, length, chars) {                                                                         // 12033
      string = toString(string);                                                                                       // 12034
      return createPadding(string, length, chars) + string;                                                            // 12035
    }                                                                                                                  // 12036
                                                                                                                       // 12037
    /**                                                                                                                // 12038
     * Converts `string` to an integer of the specified radix. If `radix` is                                           // 12039
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a hexadecimal,                                  // 12040
     * in which case a `radix` of `16` is used.                                                                        // 12041
     *                                                                                                                 // 12042
     * **Note:** This method aligns with the [ES5 implementation](https://es5.github.io/#E)                            // 12043
     * of `parseInt`.                                                                                                  // 12044
     *                                                                                                                 // 12045
     * @static                                                                                                         // 12046
     * @memberOf _                                                                                                     // 12047
     * @category String                                                                                                // 12048
     * @param {string} string The string to convert.                                                                   // 12049
     * @param {number} [radix] The radix to interpret `value` by.                                                      // 12050
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.                                 // 12051
     * @returns {number} Returns the converted integer.                                                                // 12052
     * @example                                                                                                        // 12053
     *                                                                                                                 // 12054
     * _.parseInt('08');                                                                                               // 12055
     * // => 8                                                                                                         // 12056
     *                                                                                                                 // 12057
     * _.map(['6', '08', '10'], _.parseInt);                                                                           // 12058
     * // => [6, 8, 10]                                                                                                // 12059
     */                                                                                                                // 12060
    function parseInt(string, radix, guard) {                                                                          // 12061
      // Chrome fails to trim leading <BOM> whitespace characters.                                                     // 12062
      // See https://code.google.com/p/v8/issues/detail?id=3109 for more details.                                      // 12063
      if (guard || radix == null) {                                                                                    // 12064
        radix = 0;                                                                                                     // 12065
      } else if (radix) {                                                                                              // 12066
        radix = +radix;                                                                                                // 12067
      }                                                                                                                // 12068
      string = toString(string).replace(reTrim, '');                                                                   // 12069
      return nativeParseInt(string, radix || (reHasHexPrefix.test(string) ? 16 : 10));                                 // 12070
    }                                                                                                                  // 12071
                                                                                                                       // 12072
    /**                                                                                                                // 12073
     * Repeats the given string `n` times.                                                                             // 12074
     *                                                                                                                 // 12075
     * @static                                                                                                         // 12076
     * @memberOf _                                                                                                     // 12077
     * @category String                                                                                                // 12078
     * @param {string} [string=''] The string to repeat.                                                               // 12079
     * @param {number} [n=0] The number of times to repeat the string.                                                 // 12080
     * @returns {string} Returns the repeated string.                                                                  // 12081
     * @example                                                                                                        // 12082
     *                                                                                                                 // 12083
     * _.repeat('*', 3);                                                                                               // 12084
     * // => '***'                                                                                                     // 12085
     *                                                                                                                 // 12086
     * _.repeat('abc', 2);                                                                                             // 12087
     * // => 'abcabc'                                                                                                  // 12088
     *                                                                                                                 // 12089
     * _.repeat('abc', 0);                                                                                             // 12090
     * // => ''                                                                                                        // 12091
     */                                                                                                                // 12092
    function repeat(string, n) {                                                                                       // 12093
      string = toString(string);                                                                                       // 12094
      n = toInteger(n);                                                                                                // 12095
                                                                                                                       // 12096
      var result = '';                                                                                                 // 12097
      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {                                                                  // 12098
        return result;                                                                                                 // 12099
      }                                                                                                                // 12100
      // Leverage the exponentiation by squaring algorithm for a faster repeat.                                        // 12101
      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.                                // 12102
      do {                                                                                                             // 12103
        if (n % 2) {                                                                                                   // 12104
          result += string;                                                                                            // 12105
        }                                                                                                              // 12106
        n = nativeFloor(n / 2);                                                                                        // 12107
        string += string;                                                                                              // 12108
      } while (n);                                                                                                     // 12109
                                                                                                                       // 12110
      return result;                                                                                                   // 12111
    }                                                                                                                  // 12112
                                                                                                                       // 12113
    /**                                                                                                                // 12114
     * Replaces matches for `pattern` in `string` with `replacement`.                                                  // 12115
     *                                                                                                                 // 12116
     * **Note:** This method is based on [`String#replace`](https://mdn.io/String/replace).                            // 12117
     *                                                                                                                 // 12118
     * @static                                                                                                         // 12119
     * @memberOf _                                                                                                     // 12120
     * @category String                                                                                                // 12121
     * @param {string} [string=''] The string to modify.                                                               // 12122
     * @param {RegExp|string} pattern The pattern to replace.                                                          // 12123
     * @param {Function|string} replacement The match replacement.                                                     // 12124
     * @returns {string} Returns the modified string.                                                                  // 12125
     * @example                                                                                                        // 12126
     *                                                                                                                 // 12127
     * _.replace('Hi Fred', 'Fred', 'Barney');                                                                         // 12128
     * // => 'Hi Barney'                                                                                               // 12129
     */                                                                                                                // 12130
    function replace() {                                                                                               // 12131
      var args = arguments,                                                                                            // 12132
          string = toString(args[0]);                                                                                  // 12133
                                                                                                                       // 12134
      return args.length < 3 ? string : string.replace(args[1], args[2]);                                              // 12135
    }                                                                                                                  // 12136
                                                                                                                       // 12137
    /**                                                                                                                // 12138
     * Converts `string` to [snake case](https://en.wikipedia.org/wiki/Snake_case).                                    // 12139
     *                                                                                                                 // 12140
     * @static                                                                                                         // 12141
     * @memberOf _                                                                                                     // 12142
     * @category String                                                                                                // 12143
     * @param {string} [string=''] The string to convert.                                                              // 12144
     * @returns {string} Returns the snake cased string.                                                               // 12145
     * @example                                                                                                        // 12146
     *                                                                                                                 // 12147
     * _.snakeCase('Foo Bar');                                                                                         // 12148
     * // => 'foo_bar'                                                                                                 // 12149
     *                                                                                                                 // 12150
     * _.snakeCase('fooBar');                                                                                          // 12151
     * // => 'foo_bar'                                                                                                 // 12152
     *                                                                                                                 // 12153
     * _.snakeCase('--foo-bar');                                                                                       // 12154
     * // => 'foo_bar'                                                                                                 // 12155
     */                                                                                                                // 12156
    var snakeCase = createCompounder(function(result, word, index) {                                                   // 12157
      return result + (index ? '_' : '') + word.toLowerCase();                                                         // 12158
    });                                                                                                                // 12159
                                                                                                                       // 12160
    /**                                                                                                                // 12161
     * Splits `string` by `separator`.                                                                                 // 12162
     *                                                                                                                 // 12163
     * **Note:** This method is based on [`String#split`](https://mdn.io/String/split).                                // 12164
     *                                                                                                                 // 12165
     * @static                                                                                                         // 12166
     * @memberOf _                                                                                                     // 12167
     * @category String                                                                                                // 12168
     * @param {string} [string=''] The string to split.                                                                // 12169
     * @param {RegExp|string} separator The separator pattern to split by.                                             // 12170
     * @param {number} [limit] The length to truncate results to.                                                      // 12171
     * @returns {Array} Returns the new array of string segments.                                                      // 12172
     * @example                                                                                                        // 12173
     *                                                                                                                 // 12174
     * _.split('a-b-c', '-', 2);                                                                                       // 12175
     * // => ['a', 'b']                                                                                                // 12176
     */                                                                                                                // 12177
    function split(string, separator, limit) {                                                                         // 12178
      return toString(string).split(separator, limit);                                                                 // 12179
    }                                                                                                                  // 12180
                                                                                                                       // 12181
    /**                                                                                                                // 12182
     * Converts `string` to [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).    // 12183
     *                                                                                                                 // 12184
     * @static                                                                                                         // 12185
     * @memberOf _                                                                                                     // 12186
     * @category String                                                                                                // 12187
     * @param {string} [string=''] The string to convert.                                                              // 12188
     * @returns {string} Returns the start cased string.                                                               // 12189
     * @example                                                                                                        // 12190
     *                                                                                                                 // 12191
     * _.startCase('--foo-bar');                                                                                       // 12192
     * // => 'Foo Bar'                                                                                                 // 12193
     *                                                                                                                 // 12194
     * _.startCase('fooBar');                                                                                          // 12195
     * // => 'Foo Bar'                                                                                                 // 12196
     *                                                                                                                 // 12197
     * _.startCase('__foo_bar__');                                                                                     // 12198
     * // => 'Foo Bar'                                                                                                 // 12199
     */                                                                                                                // 12200
    var startCase = createCompounder(function(result, word, index) {                                                   // 12201
      return result + (index ? ' ' : '') + capitalize(word);                                                           // 12202
    });                                                                                                                // 12203
                                                                                                                       // 12204
    /**                                                                                                                // 12205
     * Checks if `string` starts with the given target string.                                                         // 12206
     *                                                                                                                 // 12207
     * @static                                                                                                         // 12208
     * @memberOf _                                                                                                     // 12209
     * @category String                                                                                                // 12210
     * @param {string} [string=''] The string to search.                                                               // 12211
     * @param {string} [target] The string to search for.                                                              // 12212
     * @param {number} [position=0] The position to search from.                                                       // 12213
     * @returns {boolean} Returns `true` if `string` starts with `target`, else `false`.                               // 12214
     * @example                                                                                                        // 12215
     *                                                                                                                 // 12216
     * _.startsWith('abc', 'a');                                                                                       // 12217
     * // => true                                                                                                      // 12218
     *                                                                                                                 // 12219
     * _.startsWith('abc', 'b');                                                                                       // 12220
     * // => false                                                                                                     // 12221
     *                                                                                                                 // 12222
     * _.startsWith('abc', 'b', 1);                                                                                    // 12223
     * // => true                                                                                                      // 12224
     */                                                                                                                // 12225
    function startsWith(string, target, position) {                                                                    // 12226
      string = toString(string);                                                                                       // 12227
      position = baseClamp(toInteger(position), 0, string.length);                                                     // 12228
      return string.lastIndexOf(target, position) == position;                                                         // 12229
    }                                                                                                                  // 12230
                                                                                                                       // 12231
    /**                                                                                                                // 12232
     * Creates a compiled template function that can interpolate data properties                                       // 12233
     * in "interpolate" delimiters, HTML-escape interpolated data properties in                                        // 12234
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data                                      // 12235
     * properties may be accessed as free variables in the template. If a setting                                      // 12236
     * object is provided it takes precedence over `_.templateSettings` values.                                        // 12237
     *                                                                                                                 // 12238
     * **Note:** In the development build `_.template` utilizes                                                        // 12239
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)                   // 12240
     * for easier debugging.                                                                                           // 12241
     *                                                                                                                 // 12242
     * For more information on precompiling templates see                                                              // 12243
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).                                       // 12244
     *                                                                                                                 // 12245
     * For more information on Chrome extension sandboxes see                                                          // 12246
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).                    // 12247
     *                                                                                                                 // 12248
     * @static                                                                                                         // 12249
     * @memberOf _                                                                                                     // 12250
     * @category String                                                                                                // 12251
     * @param {string} [string=''] The template string.                                                                // 12252
     * @param {Object} [options] The options object.                                                                   // 12253
     * @param {RegExp} [options.escape] The HTML "escape" delimiter.                                                   // 12254
     * @param {RegExp} [options.evaluate] The "evaluate" delimiter.                                                    // 12255
     * @param {Object} [options.imports] An object to import into the template as free variables.                      // 12256
     * @param {RegExp} [options.interpolate] The "interpolate" delimiter.                                              // 12257
     * @param {string} [options.sourceURL] The sourceURL of the template's compiled source.                            // 12258
     * @param {string} [options.variable] The data object variable name.                                               // 12259
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.                                 // 12260
     * @returns {Function} Returns the compiled template function.                                                     // 12261
     * @example                                                                                                        // 12262
     *                                                                                                                 // 12263
     * // using the "interpolate" delimiter to create a compiled template                                              // 12264
     * var compiled = _.template('hello <%= user %>!');                                                                // 12265
     * compiled({ 'user': 'fred' });                                                                                   // 12266
     * // => 'hello fred!'                                                                                             // 12267
     *                                                                                                                 // 12268
     * // using the HTML "escape" delimiter to escape data property values                                             // 12269
     * var compiled = _.template('<b><%- value %></b>');                                                               // 12270
     * compiled({ 'value': '<script>' });                                                                              // 12271
     * // => '<b>&lt;script&gt;</b>'                                                                                   // 12272
     *                                                                                                                 // 12273
     * // using the "evaluate" delimiter to execute JavaScript and generate HTML                                       // 12274
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');              // 12275
     * compiled({ 'users': ['fred', 'barney'] });                                                                      // 12276
     * // => '<li>fred</li><li>barney</li>'                                                                            // 12277
     *                                                                                                                 // 12278
     * // using the internal `print` function in "evaluate" delimiters                                                 // 12279
     * var compiled = _.template('<% print("hello " + user); %>!');                                                    // 12280
     * compiled({ 'user': 'barney' });                                                                                 // 12281
     * // => 'hello barney!'                                                                                           // 12282
     *                                                                                                                 // 12283
     * // using the ES delimiter as an alternative to the default "interpolate" delimiter                              // 12284
     * var compiled = _.template('hello ${ user }!');                                                                  // 12285
     * compiled({ 'user': 'pebbles' });                                                                                // 12286
     * // => 'hello pebbles!'                                                                                          // 12287
     *                                                                                                                 // 12288
     * // using custom template delimiters                                                                             // 12289
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;                                                             // 12290
     * var compiled = _.template('hello {{ user }}!');                                                                 // 12291
     * compiled({ 'user': 'mustache' });                                                                               // 12292
     * // => 'hello mustache!'                                                                                         // 12293
     *                                                                                                                 // 12294
     * // using backslashes to treat delimiters as plain text                                                          // 12295
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');                                                         // 12296
     * compiled({ 'value': 'ignored' });                                                                               // 12297
     * // => '<%- value %>'                                                                                            // 12298
     *                                                                                                                 // 12299
     * // using the `imports` option to import `jQuery` as `jq`                                                        // 12300
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';                                // 12301
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });                                               // 12302
     * compiled({ 'users': ['fred', 'barney'] });                                                                      // 12303
     * // => '<li>fred</li><li>barney</li>'                                                                            // 12304
     *                                                                                                                 // 12305
     * // using the `sourceURL` option to specify a custom sourceURL for the template                                  // 12306
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });                        // 12307
     * compiled(data);                                                                                                 // 12308
     * // => find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector           // 12309
     *                                                                                                                 // 12310
     * // using the `variable` option to ensure a with-statement isn't used in the compiled template                   // 12311
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });                                      // 12312
     * compiled.source;                                                                                                // 12313
     * // => function(data) {                                                                                          // 12314
     * //   var __t, __p = '';                                                                                         // 12315
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';                                           // 12316
     * //   return __p;                                                                                                // 12317
     * // }                                                                                                            // 12318
     *                                                                                                                 // 12319
     * // using the `source` property to inline compiled templates for meaningful                                      // 12320
     * // line numbers in error messages and a stack trace                                                             // 12321
     * fs.writeFileSync(path.join(cwd, 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');                                                                                                             // 12326
     */                                                                                                                // 12327
    function template(string, options, guard) {                                                                        // 12328
      // Based on John Resig's `tmpl` implementation (http://ejohn.org/blog/javascript-micro-templating/)              // 12329
      // and Laura Doktorova's doT.js (https://github.com/olado/doT).                                                  // 12330
      var settings = lodash.templateSettings;                                                                          // 12331
                                                                                                                       // 12332
      if (guard && isIterateeCall(string, options, guard)) {                                                           // 12333
        options = undefined;                                                                                           // 12334
      }                                                                                                                // 12335
      string = toString(string);                                                                                       // 12336
      options = assignInWith({}, options, settings, assignInDefaults);                                                 // 12337
                                                                                                                       // 12338
      var imports = assignInWith({}, options.imports, settings.imports, assignInDefaults),                             // 12339
          importsKeys = keys(imports),                                                                                 // 12340
          importsValues = baseValues(imports, importsKeys);                                                            // 12341
                                                                                                                       // 12342
      var isEscaping,                                                                                                  // 12343
          isEvaluating,                                                                                                // 12344
          index = 0,                                                                                                   // 12345
          interpolate = options.interpolate || reNoMatch,                                                              // 12346
          source = "__p += '";                                                                                         // 12347
                                                                                                                       // 12348
      // Compile the regexp to match each delimiter.                                                                   // 12349
      var reDelimiters = RegExp(                                                                                       // 12350
        (options.escape || reNoMatch).source + '|' +                                                                   // 12351
        interpolate.source + '|' +                                                                                     // 12352
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +                                      // 12353
        (options.evaluate || reNoMatch).source + '|$'                                                                  // 12354
      , 'g');                                                                                                          // 12355
                                                                                                                       // 12356
      // Use a sourceURL for easier debugging.                                                                         // 12357
      var sourceURL = '//# sourceURL=' +                                                                               // 12358
        ('sourceURL' in options                                                                                        // 12359
          ? options.sourceURL                                                                                          // 12360
          : ('lodash.templateSources[' + (++templateCounter) + ']')                                                    // 12361
        ) + '\n';                                                                                                      // 12362
                                                                                                                       // 12363
      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);                                                      // 12365
                                                                                                                       // 12366
        // Escape characters that can't be included in string literals.                                                // 12367
        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);                            // 12368
                                                                                                                       // 12369
        // Replace delimiters with snippets.                                                                           // 12370
        if (escapeValue) {                                                                                             // 12371
          isEscaping = true;                                                                                           // 12372
          source += "' +\n__e(" + escapeValue + ") +\n'";                                                              // 12373
        }                                                                                                              // 12374
        if (evaluateValue) {                                                                                           // 12375
          isEvaluating = true;                                                                                         // 12376
          source += "';\n" + evaluateValue + ";\n__p += '";                                                            // 12377
        }                                                                                                              // 12378
        if (interpolateValue) {                                                                                        // 12379
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";                               // 12380
        }                                                                                                              // 12381
        index = offset + match.length;                                                                                 // 12382
                                                                                                                       // 12383
        // The JS engine embedded in Adobe products needs `match` returned in                                          // 12384
        // order to produce the correct `offset` value.                                                                // 12385
        return match;                                                                                                  // 12386
      });                                                                                                              // 12387
                                                                                                                       // 12388
      source += "';\n";                                                                                                // 12389
                                                                                                                       // 12390
      // If `variable` is not specified wrap a with-statement around the generated                                     // 12391
      // code to add the data object to the top of the scope chain.                                                    // 12392
      var variable = options.variable;                                                                                 // 12393
      if (!variable) {                                                                                                 // 12394
        source = 'with (obj) {\n' + source + '\n}\n';                                                                  // 12395
      }                                                                                                                // 12396
      // Cleanup code by stripping empty strings.                                                                      // 12397
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)                                      // 12398
        .replace(reEmptyStringMiddle, '$1')                                                                            // 12399
        .replace(reEmptyStringTrailing, '$1;');                                                                        // 12400
                                                                                                                       // 12401
      // Frame code as the function body.                                                                              // 12402
      source = 'function(' + (variable || 'obj') + ') {\n' +                                                           // 12403
        (variable                                                                                                      // 12404
          ? ''                                                                                                         // 12405
          : 'obj || (obj = {});\n'                                                                                     // 12406
        ) +                                                                                                            // 12407
        "var __t, __p = ''" +                                                                                          // 12408
        (isEscaping                                                                                                    // 12409
           ? ', __e = _.escape'                                                                                        // 12410
           : ''                                                                                                        // 12411
        ) +                                                                                                            // 12412
        (isEvaluating                                                                                                  // 12413
          ? ', __j = Array.prototype.join;\n' +                                                                        // 12414
            "function print() { __p += __j.call(arguments, '') }\n"                                                    // 12415
          : ';\n'                                                                                                      // 12416
        ) +                                                                                                            // 12417
        source +                                                                                                       // 12418
        'return __p\n}';                                                                                               // 12419
                                                                                                                       // 12420
      var result = attempt(function() {                                                                                // 12421
        return Function(importsKeys, sourceURL + 'return ' + source).apply(undefined, importsValues);                  // 12422
      });                                                                                                              // 12423
                                                                                                                       // 12424
      // Provide the compiled function's source by its `toString` method or                                            // 12425
      // the `source` property as a convenience for inlining compiled templates.                                       // 12426
      result.source = source;                                                                                          // 12427
      if (isError(result)) {                                                                                           // 12428
        throw result;                                                                                                  // 12429
      }                                                                                                                // 12430
      return result;                                                                                                   // 12431
    }                                                                                                                  // 12432
                                                                                                                       // 12433
    /**                                                                                                                // 12434
     * Converts `string`, as a whole, to lower case.                                                                   // 12435
     *                                                                                                                 // 12436
     * @static                                                                                                         // 12437
     * @memberOf _                                                                                                     // 12438
     * @category String                                                                                                // 12439
     * @param {string} [string=''] The string to convert.                                                              // 12440
     * @returns {string} Returns the lower cased string.                                                               // 12441
     * @example                                                                                                        // 12442
     *                                                                                                                 // 12443
     * _.toLower('--Foo-Bar');                                                                                         // 12444
     * // => '--foo-bar'                                                                                               // 12445
     *                                                                                                                 // 12446
     * _.toLower('fooBar');                                                                                            // 12447
     * // => 'foobar'                                                                                                  // 12448
     *                                                                                                                 // 12449
     * _.toLower('__FOO_BAR__');                                                                                       // 12450
     * // => '__foo_bar__'                                                                                             // 12451
     */                                                                                                                // 12452
    function toLower(value) {                                                                                          // 12453
      return toString(value).toLowerCase();                                                                            // 12454
    }                                                                                                                  // 12455
                                                                                                                       // 12456
    /**                                                                                                                // 12457
     * Converts `string`, as a whole, to upper case.                                                                   // 12458
     *                                                                                                                 // 12459
     * @static                                                                                                         // 12460
     * @memberOf _                                                                                                     // 12461
     * @category String                                                                                                // 12462
     * @param {string} [string=''] The string to convert.                                                              // 12463
     * @returns {string} Returns the upper cased string.                                                               // 12464
     * @example                                                                                                        // 12465
     *                                                                                                                 // 12466
     * _.toUpper('--foo-bar');                                                                                         // 12467
     * // => '--FOO-BAR'                                                                                               // 12468
     *                                                                                                                 // 12469
     * _.toUpper('fooBar');                                                                                            // 12470
     * // => 'FOOBAR'                                                                                                  // 12471
     *                                                                                                                 // 12472
     * _.toUpper('__foo_bar__');                                                                                       // 12473
     * // => '__FOO_BAR__'                                                                                             // 12474
     */                                                                                                                // 12475
    function toUpper(value) {                                                                                          // 12476
      return toString(value).toUpperCase();                                                                            // 12477
    }                                                                                                                  // 12478
                                                                                                                       // 12479
    /**                                                                                                                // 12480
     * Removes leading and trailing whitespace or specified characters from `string`.                                  // 12481
     *                                                                                                                 // 12482
     * @static                                                                                                         // 12483
     * @memberOf _                                                                                                     // 12484
     * @category String                                                                                                // 12485
     * @param {string} [string=''] The string to trim.                                                                 // 12486
     * @param {string} [chars=whitespace] The characters to trim.                                                      // 12487
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.                                 // 12488
     * @returns {string} Returns the trimmed string.                                                                   // 12489
     * @example                                                                                                        // 12490
     *                                                                                                                 // 12491
     * _.trim('  abc  ');                                                                                              // 12492
     * // => 'abc'                                                                                                     // 12493
     *                                                                                                                 // 12494
     * _.trim('-_-abc-_-', '_-');                                                                                      // 12495
     * // => 'abc'                                                                                                     // 12496
     *                                                                                                                 // 12497
     * _.map(['  foo  ', '  bar  '], _.trim);                                                                          // 12498
     * // => ['foo', 'bar']                                                                                            // 12499
     */                                                                                                                // 12500
    function trim(string, chars, guard) {                                                                              // 12501
      string = toString(string);                                                                                       // 12502
      if (!string) {                                                                                                   // 12503
        return string;                                                                                                 // 12504
      }                                                                                                                // 12505
      if (guard || chars === undefined) {                                                                              // 12506
        return string.replace(reTrim, '');                                                                             // 12507
      }                                                                                                                // 12508
      chars = (chars + '');                                                                                            // 12509
      if (!chars) {                                                                                                    // 12510
        return string;                                                                                                 // 12511
      }                                                                                                                // 12512
      var strSymbols = stringToArray(string),                                                                          // 12513
          chrSymbols = stringToArray(chars);                                                                           // 12514
                                                                                                                       // 12515
      return strSymbols.slice(charsStartIndex(strSymbols, chrSymbols), charsEndIndex(strSymbols, chrSymbols) + 1).join('');
    }                                                                                                                  // 12517
                                                                                                                       // 12518
    /**                                                                                                                // 12519
     * Removes trailing whitespace or specified characters from `string`.                                              // 12520
     *                                                                                                                 // 12521
     * @static                                                                                                         // 12522
     * @memberOf _                                                                                                     // 12523
     * @category String                                                                                                // 12524
     * @param {string} [string=''] The string to trim.                                                                 // 12525
     * @param {string} [chars=whitespace] The characters to trim.                                                      // 12526
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.                                 // 12527
     * @returns {string} Returns the trimmed string.                                                                   // 12528
     * @example                                                                                                        // 12529
     *                                                                                                                 // 12530
     * _.trimEnd('  abc  ');                                                                                           // 12531
     * // => '  abc'                                                                                                   // 12532
     *                                                                                                                 // 12533
     * _.trimEnd('-_-abc-_-', '_-');                                                                                   // 12534
     * // => '-_-abc'                                                                                                  // 12535
     */                                                                                                                // 12536
    function trimEnd(string, chars, guard) {                                                                           // 12537
      string = toString(string);                                                                                       // 12538
      if (!string) {                                                                                                   // 12539
        return string;                                                                                                 // 12540
      }                                                                                                                // 12541
      if (guard || chars === undefined) {                                                                              // 12542
        return string.replace(reTrimEnd, '');                                                                          // 12543
      }                                                                                                                // 12544
      chars = (chars + '');                                                                                            // 12545
      if (!chars) {                                                                                                    // 12546
        return string;                                                                                                 // 12547
      }                                                                                                                // 12548
      var strSymbols = stringToArray(string);                                                                          // 12549
      return strSymbols.slice(0, charsEndIndex(strSymbols, stringToArray(chars)) + 1).join('');                        // 12550
    }                                                                                                                  // 12551
                                                                                                                       // 12552
    /**                                                                                                                // 12553
     * Removes leading whitespace or specified characters from `string`.                                               // 12554
     *                                                                                                                 // 12555
     * @static                                                                                                         // 12556
     * @memberOf _                                                                                                     // 12557
     * @category String                                                                                                // 12558
     * @param {string} [string=''] The string to trim.                                                                 // 12559
     * @param {string} [chars=whitespace] The characters to trim.                                                      // 12560
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.                                 // 12561
     * @returns {string} Returns the trimmed string.                                                                   // 12562
     * @example                                                                                                        // 12563
     *                                                                                                                 // 12564
     * _.trimStart('  abc  ');                                                                                         // 12565
     * // => 'abc  '                                                                                                   // 12566
     *                                                                                                                 // 12567
     * _.trimStart('-_-abc-_-', '_-');                                                                                 // 12568
     * // => 'abc-_-'                                                                                                  // 12569
     */                                                                                                                // 12570
    function trimStart(string, chars, guard) {                                                                         // 12571
      string = toString(string);                                                                                       // 12572
      if (!string) {                                                                                                   // 12573
        return string;                                                                                                 // 12574
      }                                                                                                                // 12575
      if (guard || chars === undefined) {                                                                              // 12576
        return string.replace(reTrimStart, '');                                                                        // 12577
      }                                                                                                                // 12578
      chars = (chars + '');                                                                                            // 12579
      if (!chars) {                                                                                                    // 12580
        return string;                                                                                                 // 12581
      }                                                                                                                // 12582
      var strSymbols = stringToArray(string);                                                                          // 12583
      return strSymbols.slice(charsStartIndex(strSymbols, stringToArray(chars))).join('');                             // 12584
    }                                                                                                                  // 12585
                                                                                                                       // 12586
    /**                                                                                                                // 12587
     * Truncates `string` if it's longer than the given maximum string length.                                         // 12588
     * The last characters of the truncated string are replaced with the omission                                      // 12589
     * string which defaults to "...".                                                                                 // 12590
     *                                                                                                                 // 12591
     * @static                                                                                                         // 12592
     * @memberOf _                                                                                                     // 12593
     * @category String                                                                                                // 12594
     * @param {string} [string=''] The string to truncate.                                                             // 12595
     * @param {Object} [options] The options object.                                                                   // 12596
     * @param {number} [options.length=30] The maximum string length.                                                  // 12597
     * @param {string} [options.omission='...'] The string to indicate text is omitted.                                // 12598
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.                                // 12599
     * @returns {string} Returns the truncated string.                                                                 // 12600
     * @example                                                                                                        // 12601
     *                                                                                                                 // 12602
     * _.truncate('hi-diddly-ho there, neighborino');                                                                  // 12603
     * // => 'hi-diddly-ho there, neighbo...'                                                                          // 12604
     *                                                                                                                 // 12605
     * _.truncate('hi-diddly-ho there, neighborino', {                                                                 // 12606
     *   'length': 24,                                                                                                 // 12607
     *   'separator': ' '                                                                                              // 12608
     * });                                                                                                             // 12609
     * // => 'hi-diddly-ho there,...'                                                                                  // 12610
     *                                                                                                                 // 12611
     * _.truncate('hi-diddly-ho there, neighborino', {                                                                 // 12612
     *   'length': 24,                                                                                                 // 12613
     *   'separator': /,? +/                                                                                           // 12614
     * });                                                                                                             // 12615
     * // => 'hi-diddly-ho there...'                                                                                   // 12616
     *                                                                                                                 // 12617
     * _.truncate('hi-diddly-ho there, neighborino', {                                                                 // 12618
     *   'omission': ' [...]'                                                                                          // 12619
     * });                                                                                                             // 12620
     * // => 'hi-diddly-ho there, neig [...]'                                                                          // 12621
     */                                                                                                                // 12622
    function truncate(string, options) {                                                                               // 12623
      var length = DEFAULT_TRUNC_LENGTH,                                                                               // 12624
          omission = DEFAULT_TRUNC_OMISSION;                                                                           // 12625
                                                                                                                       // 12626
      if (isObject(options)) {                                                                                         // 12627
        var separator = 'separator' in options ? options.separator : separator;                                        // 12628
        length = 'length' in options ? toInteger(options.length) : length;                                             // 12629
        omission = 'omission' in options ? toString(options.omission) : omission;                                      // 12630
      }                                                                                                                // 12631
      string = toString(string);                                                                                       // 12632
                                                                                                                       // 12633
      var strLength = string.length;                                                                                   // 12634
      if (reHasComplexSymbol.test(string)) {                                                                           // 12635
        var strSymbols = stringToArray(string);                                                                        // 12636
        strLength = strSymbols.length;                                                                                 // 12637
      }                                                                                                                // 12638
      if (length >= strLength) {                                                                                       // 12639
        return string;                                                                                                 // 12640
      }                                                                                                                // 12641
      var end = length - stringSize(omission);                                                                         // 12642
      if (end < 1) {                                                                                                   // 12643
        return omission;                                                                                               // 12644
      }                                                                                                                // 12645
      var result = strSymbols                                                                                          // 12646
        ? strSymbols.slice(0, end).join('')                                                                            // 12647
        : string.slice(0, end);                                                                                        // 12648
                                                                                                                       // 12649
      if (separator === undefined) {                                                                                   // 12650
        return result + omission;                                                                                      // 12651
      }                                                                                                                // 12652
      if (strSymbols) {                                                                                                // 12653
        end += (result.length - end);                                                                                  // 12654
      }                                                                                                                // 12655
      if (isRegExp(separator)) {                                                                                       // 12656
        if (string.slice(end).search(separator)) {                                                                     // 12657
          var match,                                                                                                   // 12658
              substring = result;                                                                                      // 12659
                                                                                                                       // 12660
          if (!separator.global) {                                                                                     // 12661
            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');                             // 12662
          }                                                                                                            // 12663
          separator.lastIndex = 0;                                                                                     // 12664
          while ((match = separator.exec(substring))) {                                                                // 12665
            var newEnd = match.index;                                                                                  // 12666
          }                                                                                                            // 12667
          result = result.slice(0, newEnd === undefined ? end : newEnd);                                               // 12668
        }                                                                                                              // 12669
      } else if (string.indexOf(separator, end) != end) {                                                              // 12670
        var index = result.lastIndexOf(separator);                                                                     // 12671
        if (index > -1) {                                                                                              // 12672
          result = result.slice(0, index);                                                                             // 12673
        }                                                                                                              // 12674
      }                                                                                                                // 12675
      return result + omission;                                                                                        // 12676
    }                                                                                                                  // 12677
                                                                                                                       // 12678
    /**                                                                                                                // 12679
     * The inverse of `_.escape`; this method converts the HTML entities                                               // 12680
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, `&#39;`, and `&#96;` in `string` to their                                    // 12681
     * corresponding characters.                                                                                       // 12682
     *                                                                                                                 // 12683
     * **Note:** No other HTML entities are unescaped. To unescape additional HTML                                     // 12684
     * entities use a third-party library like [_he_](https://mths.be/he).                                             // 12685
     *                                                                                                                 // 12686
     * @static                                                                                                         // 12687
     * @memberOf _                                                                                                     // 12688
     * @category String                                                                                                // 12689
     * @param {string} [string=''] The string to unescape.                                                             // 12690
     * @returns {string} Returns the unescaped string.                                                                 // 12691
     * @example                                                                                                        // 12692
     *                                                                                                                 // 12693
     * _.unescape('fred, barney, &amp; pebbles');                                                                      // 12694
     * // => 'fred, barney, & pebbles'                                                                                 // 12695
     */                                                                                                                // 12696
    function unescape(string) {                                                                                        // 12697
      string = toString(string);                                                                                       // 12698
      return (string && reHasEscapedHtml.test(string))                                                                 // 12699
        ? string.replace(reEscapedHtml, unescapeHtmlChar)                                                              // 12700
        : string;                                                                                                      // 12701
    }                                                                                                                  // 12702
                                                                                                                       // 12703
    /**                                                                                                                // 12704
     * Converts `string`, as space separated words, to upper case.                                                     // 12705
     *                                                                                                                 // 12706
     * @static                                                                                                         // 12707
     * @memberOf _                                                                                                     // 12708
     * @category String                                                                                                // 12709
     * @param {string} [string=''] The string to convert.                                                              // 12710
     * @returns {string} Returns the upper cased string.                                                               // 12711
     * @example                                                                                                        // 12712
     *                                                                                                                 // 12713
     * _.upperCase('--foo-bar');                                                                                       // 12714
     * // => 'FOO BAR'                                                                                                 // 12715
     *                                                                                                                 // 12716
     * _.upperCase('fooBar');                                                                                          // 12717
     * // => 'FOO BAR'                                                                                                 // 12718
     *                                                                                                                 // 12719
     * _.upperCase('__foo_bar__');                                                                                     // 12720
     * // => 'FOO BAR'                                                                                                 // 12721
     */                                                                                                                // 12722
    var upperCase = createCompounder(function(result, word, index) {                                                   // 12723
      return result + (index ? ' ' : '') + word.toUpperCase();                                                         // 12724
    });                                                                                                                // 12725
                                                                                                                       // 12726
    /**                                                                                                                // 12727
     * Splits `string` into an array of its words.                                                                     // 12728
     *                                                                                                                 // 12729
     * @static                                                                                                         // 12730
     * @memberOf _                                                                                                     // 12731
     * @category String                                                                                                // 12732
     * @param {string} [string=''] The string to inspect.                                                              // 12733
     * @param {RegExp|string} [pattern] The pattern to match words.                                                    // 12734
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.                                 // 12735
     * @returns {Array} Returns the words of `string`.                                                                 // 12736
     * @example                                                                                                        // 12737
     *                                                                                                                 // 12738
     * _.words('fred, barney, & pebbles');                                                                             // 12739
     * // => ['fred', 'barney', 'pebbles']                                                                             // 12740
     *                                                                                                                 // 12741
     * _.words('fred, barney, & pebbles', /[^, ]+/g);                                                                  // 12742
     * // => ['fred', 'barney', '&', 'pebbles']                                                                        // 12743
     */                                                                                                                // 12744
    function words(string, pattern, guard) {                                                                           // 12745
      string = toString(string);                                                                                       // 12746
      pattern = guard ? undefined : pattern;                                                                           // 12747
                                                                                                                       // 12748
      if (pattern === undefined) {                                                                                     // 12749
        pattern = reHasComplexWord.test(string) ? reComplexWord : reBasicWord;                                         // 12750
      }                                                                                                                // 12751
      return string.match(pattern) || [];                                                                              // 12752
    }                                                                                                                  // 12753
                                                                                                                       // 12754
    /*------------------------------------------------------------------------*/                                       // 12755
                                                                                                                       // 12756
    /**                                                                                                                // 12757
     * Attempts to invoke `func`, returning either the result or the caught error                                      // 12758
     * object. Any additional arguments are provided to `func` when it's invoked.                                      // 12759
     *                                                                                                                 // 12760
     * @static                                                                                                         // 12761
     * @memberOf _                                                                                                     // 12762
     * @category Util                                                                                                  // 12763
     * @param {Function} func The function to attempt.                                                                 // 12764
     * @returns {*} Returns the `func` result or error object.                                                         // 12765
     * @example                                                                                                        // 12766
     *                                                                                                                 // 12767
     * // avoid throwing errors for invalid selectors                                                                  // 12768
     * var elements = _.attempt(function(selector) {                                                                   // 12769
     *   return document.querySelectorAll(selector);                                                                   // 12770
     * }, '>_>');                                                                                                      // 12771
     *                                                                                                                 // 12772
     * if (_.isError(elements)) {                                                                                      // 12773
     *   elements = [];                                                                                                // 12774
     * }                                                                                                               // 12775
     */                                                                                                                // 12776
    var attempt = rest(function(func, args) {                                                                          // 12777
      try {                                                                                                            // 12778
        return apply(func, undefined, args);                                                                           // 12779
      } catch (e) {                                                                                                    // 12780
        return isError(e) ? e : new Error(e);                                                                          // 12781
      }                                                                                                                // 12782
    });                                                                                                                // 12783
                                                                                                                       // 12784
    /**                                                                                                                // 12785
     * Binds methods of an object to the object itself, overwriting the existing                                       // 12786
     * method.                                                                                                         // 12787
     *                                                                                                                 // 12788
     * **Note:** This method doesn't set the "length" property of bound functions.                                     // 12789
     *                                                                                                                 // 12790
     * @static                                                                                                         // 12791
     * @memberOf _                                                                                                     // 12792
     * @category Util                                                                                                  // 12793
     * @param {Object} object The object to bind and assign the bound methods to.                                      // 12794
     * @param {...(string|string[])} methodNames The object method names to bind,                                      // 12795
     *  specified individually or in arrays.                                                                           // 12796
     * @returns {Object} Returns `object`.                                                                             // 12797
     * @example                                                                                                        // 12798
     *                                                                                                                 // 12799
     * var view = {                                                                                                    // 12800
     *   'label': 'docs',                                                                                              // 12801
     *   'onClick': function() {                                                                                       // 12802
     *     console.log('clicked ' + this.label);                                                                       // 12803
     *   }                                                                                                             // 12804
     * };                                                                                                              // 12805
     *                                                                                                                 // 12806
     * _.bindAll(view, 'onClick');                                                                                     // 12807
     * jQuery(element).on('click', view.onClick);                                                                      // 12808
     * // => logs 'clicked docs' when clicked                                                                          // 12809
     */                                                                                                                // 12810
    var bindAll = rest(function(object, methodNames) {                                                                 // 12811
      arrayEach(baseFlatten(methodNames), function(key) {                                                              // 12812
        object[key] = bind(object[key], object);                                                                       // 12813
      });                                                                                                              // 12814
      return object;                                                                                                   // 12815
    });                                                                                                                // 12816
                                                                                                                       // 12817
    /**                                                                                                                // 12818
     * Creates a function that iterates over `pairs` invoking the corresponding                                        // 12819
     * function of the first predicate to return truthy. The predicate-function                                        // 12820
     * pairs are invoked with the `this` binding and arguments of the created                                          // 12821
     * function.                                                                                                       // 12822
     *                                                                                                                 // 12823
     * @static                                                                                                         // 12824
     * @memberOf _                                                                                                     // 12825
     * @category Util                                                                                                  // 12826
     * @param {Array} pairs The predicate-function pairs.                                                              // 12827
     * @returns {Function} Returns the new function.                                                                   // 12828
     * @example                                                                                                        // 12829
     *                                                                                                                 // 12830
     * var func = _.cond([                                                                                             // 12831
     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],                                                   // 12832
     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],                                                   // 12833
     *   [_.constant(true),                _.constant('no match')]                                                     // 12834
     * ])                                                                                                              // 12835
     *                                                                                                                 // 12836
     * func({ 'a': 1, 'b': 2 });                                                                                       // 12837
     * // => 'matches A'                                                                                               // 12838
     *                                                                                                                 // 12839
     * func({ 'a': 0, 'b': 1 });                                                                                       // 12840
     * // => 'matches B'                                                                                               // 12841
     *                                                                                                                 // 12842
     * func({ 'a': '1', 'b': '2' });                                                                                   // 12843
     * // => 'no match'                                                                                                // 12844
     */                                                                                                                // 12845
    function cond(pairs) {                                                                                             // 12846
      var length = pairs ? pairs.length : 0,                                                                           // 12847
          toIteratee = getIteratee();                                                                                  // 12848
                                                                                                                       // 12849
      pairs = !length ? [] : arrayMap(pairs, function(pair) {                                                          // 12850
        if (typeof pair[1] != 'function') {                                                                            // 12851
          throw new TypeError(FUNC_ERROR_TEXT);                                                                        // 12852
        }                                                                                                              // 12853
        return [toIteratee(pair[0]), pair[1]];                                                                         // 12854
      });                                                                                                              // 12855
                                                                                                                       // 12856
      return rest(function(args) {                                                                                     // 12857
        var index = -1;                                                                                                // 12858
        while (++index < length) {                                                                                     // 12859
          var pair = pairs[index];                                                                                     // 12860
          if (apply(pair[0], this, args)) {                                                                            // 12861
            return apply(pair[1], this, args);                                                                         // 12862
          }                                                                                                            // 12863
        }                                                                                                              // 12864
      });                                                                                                              // 12865
    }                                                                                                                  // 12866
                                                                                                                       // 12867
    /**                                                                                                                // 12868
     * Creates a function that invokes the predicate properties of `source` with                                       // 12869
     * the corresponding property values of a given object, returning `true` if                                        // 12870
     * all predicates return truthy, else `false`.                                                                     // 12871
     *                                                                                                                 // 12872
     * @static                                                                                                         // 12873
     * @memberOf _                                                                                                     // 12874
     * @category Util                                                                                                  // 12875
     * @param {Object} source The object of property predicates to conform to.                                         // 12876
     * @returns {Function} Returns the new function.                                                                   // 12877
     * @example                                                                                                        // 12878
     *                                                                                                                 // 12879
     * var users = [                                                                                                   // 12880
     *   { 'user': 'barney', 'age': 36 },                                                                              // 12881
     *   { 'user': 'fred',   'age': 40 }                                                                               // 12882
     * ];                                                                                                              // 12883
     *                                                                                                                 // 12884
     * _.filter(users, _.conforms({ 'age': _.partial(_.gt, _, 38) }));                                                 // 12885
     * // => [{ 'user': 'fred', 'age': 40 }]                                                                           // 12886
     */                                                                                                                // 12887
    function conforms(source) {                                                                                        // 12888
      return baseConforms(baseClone(source, true));                                                                    // 12889
    }                                                                                                                  // 12890
                                                                                                                       // 12891
    /**                                                                                                                // 12892
     * Creates a function that returns `value`.                                                                        // 12893
     *                                                                                                                 // 12894
     * @static                                                                                                         // 12895
     * @memberOf _                                                                                                     // 12896
     * @category Util                                                                                                  // 12897
     * @param {*} value The value to return from the new function.                                                     // 12898
     * @returns {Function} Returns the new function.                                                                   // 12899
     * @example                                                                                                        // 12900
     *                                                                                                                 // 12901
     * var object = { 'user': 'fred' };                                                                                // 12902
     * var getter = _.constant(object);                                                                                // 12903
     *                                                                                                                 // 12904
     * getter() === object;                                                                                            // 12905
     * // => true                                                                                                      // 12906
     */                                                                                                                // 12907
    function constant(value) {                                                                                         // 12908
      return function() {                                                                                              // 12909
        return value;                                                                                                  // 12910
      };                                                                                                               // 12911
    }                                                                                                                  // 12912
                                                                                                                       // 12913
    /**                                                                                                                // 12914
     * Creates a function that returns the result of invoking the provided                                             // 12915
     * functions with the `this` binding of the created function, where each                                           // 12916
     * successive invocation is supplied the return value of the previous.                                             // 12917
     *                                                                                                                 // 12918
     * @static                                                                                                         // 12919
     * @memberOf _                                                                                                     // 12920
     * @category Util                                                                                                  // 12921
     * @param {...(Function|Function[])} [funcs] Functions to invoke.                                                  // 12922
     * @returns {Function} Returns the new function.                                                                   // 12923
     * @example                                                                                                        // 12924
     *                                                                                                                 // 12925
     * function square(n) {                                                                                            // 12926
     *   return n * n;                                                                                                 // 12927
     * }                                                                                                               // 12928
     *                                                                                                                 // 12929
     * var addSquare = _.flow(_.add, square);                                                                          // 12930
     * addSquare(1, 2);                                                                                                // 12931
     * // => 9                                                                                                         // 12932
     */                                                                                                                // 12933
    var flow = createFlow();                                                                                           // 12934
                                                                                                                       // 12935
    /**                                                                                                                // 12936
     * This method is like `_.flow` except that it creates a function that                                             // 12937
     * invokes the provided functions from right to left.                                                              // 12938
     *                                                                                                                 // 12939
     * @static                                                                                                         // 12940
     * @memberOf _                                                                                                     // 12941
     * @category Util                                                                                                  // 12942
     * @param {...(Function|Function[])} [funcs] Functions to invoke.                                                  // 12943
     * @returns {Function} Returns the new function.                                                                   // 12944
     * @example                                                                                                        // 12945
     *                                                                                                                 // 12946
     * function square(n) {                                                                                            // 12947
     *   return n * n;                                                                                                 // 12948
     * }                                                                                                               // 12949
     *                                                                                                                 // 12950
     * var addSquare = _.flowRight(square, _.add);                                                                     // 12951
     * addSquare(1, 2);                                                                                                // 12952
     * // => 9                                                                                                         // 12953
     */                                                                                                                // 12954
    var flowRight = createFlow(true);                                                                                  // 12955
                                                                                                                       // 12956
    /**                                                                                                                // 12957
     * This method returns the first argument provided to it.                                                          // 12958
     *                                                                                                                 // 12959
     * @static                                                                                                         // 12960
     * @memberOf _                                                                                                     // 12961
     * @category Util                                                                                                  // 12962
     * @param {*} value Any value.                                                                                     // 12963
     * @returns {*} Returns `value`.                                                                                   // 12964
     * @example                                                                                                        // 12965
     *                                                                                                                 // 12966
     * var object = { 'user': 'fred' };                                                                                // 12967
     *                                                                                                                 // 12968
     * _.identity(object) === object;                                                                                  // 12969
     * // => true                                                                                                      // 12970
     */                                                                                                                // 12971
    function identity(value) {                                                                                         // 12972
      return value;                                                                                                    // 12973
    }                                                                                                                  // 12974
                                                                                                                       // 12975
    /**                                                                                                                // 12976
     * Creates a function that invokes `func` with the arguments of the created                                        // 12977
     * function. If `func` is a property name the created callback returns the                                         // 12978
     * property value for a given element. If `func` is an object the created                                          // 12979
     * callback returns `true` for elements that contain the equivalent object properties, otherwise it returns `false`.
     *                                                                                                                 // 12981
     * @static                                                                                                         // 12982
     * @memberOf _                                                                                                     // 12983
     * @category Util                                                                                                  // 12984
     * @param {*} [func=_.identity] The value to convert to a callback.                                                // 12985
     * @returns {Function} Returns the callback.                                                                       // 12986
     * @example                                                                                                        // 12987
     *                                                                                                                 // 12988
     * var users = [                                                                                                   // 12989
     *   { 'user': 'barney', 'age': 36 },                                                                              // 12990
     *   { 'user': 'fred',   'age': 40 }                                                                               // 12991
     * ];                                                                                                              // 12992
     *                                                                                                                 // 12993
     * // create custom iteratee shorthands                                                                            // 12994
     * _.iteratee = _.wrap(_.iteratee, function(callback, func) {                                                      // 12995
     *   var p = /^(\S+)\s*([<>])\s*(\S+)$/.exec(func);                                                                // 12996
     *   return !p ? callback(func) : function(object) {                                                               // 12997
     *     return (p[2] == '>' ? object[p[1]] > p[3] : object[p[1]] < p[3]);                                           // 12998
     *   };                                                                                                            // 12999
     * });                                                                                                             // 13000
     *                                                                                                                 // 13001
     * _.filter(users, 'age > 36');                                                                                    // 13002
     * // => [{ 'user': 'fred', 'age': 40 }]                                                                           // 13003
     */                                                                                                                // 13004
    function iteratee(func) {                                                                                          // 13005
      return (isObjectLike(func) && !isArray(func))                                                                    // 13006
        ? matches(func)                                                                                                // 13007
        : baseIteratee(func);                                                                                          // 13008
    }                                                                                                                  // 13009
                                                                                                                       // 13010
    /**                                                                                                                // 13011
     * Creates a function that performs a deep partial comparison between a given                                      // 13012
     * object and `source`, returning `true` if the given object has equivalent                                        // 13013
     * property values, else `false`.                                                                                  // 13014
     *                                                                                                                 // 13015
     * **Note:** This method supports comparing the same values as `_.isEqual`.                                        // 13016
     *                                                                                                                 // 13017
     * @static                                                                                                         // 13018
     * @memberOf _                                                                                                     // 13019
     * @category Util                                                                                                  // 13020
     * @param {Object} source The object of property values to match.                                                  // 13021
     * @returns {Function} Returns the new function.                                                                   // 13022
     * @example                                                                                                        // 13023
     *                                                                                                                 // 13024
     * var users = [                                                                                                   // 13025
     *   { 'user': 'barney', 'age': 36, 'active': true },                                                              // 13026
     *   { 'user': 'fred',   'age': 40, 'active': false }                                                              // 13027
     * ];                                                                                                              // 13028
     *                                                                                                                 // 13029
     * _.filter(users, _.matches({ 'age': 40, 'active': false }));                                                     // 13030
     * // => [{ 'user': 'fred', 'age': 40, 'active': false }]                                                          // 13031
     */                                                                                                                // 13032
    function matches(source) {                                                                                         // 13033
      return baseMatches(baseClone(source, true));                                                                     // 13034
    }                                                                                                                  // 13035
                                                                                                                       // 13036
    /**                                                                                                                // 13037
     * Creates a function that performs a deep partial comparison between the                                          // 13038
     * value at `path` of a given object to `srcValue`, returning `true` if the                                        // 13039
     * object value is equivalent, else `false`.                                                                       // 13040
     *                                                                                                                 // 13041
     * **Note:** This method supports comparing the same values as `_.isEqual`.                                        // 13042
     *                                                                                                                 // 13043
     * @static                                                                                                         // 13044
     * @memberOf _                                                                                                     // 13045
     * @category Util                                                                                                  // 13046
     * @param {Array|string} path The path of the property to get.                                                     // 13047
     * @param {*} srcValue The value to match.                                                                         // 13048
     * @returns {Function} Returns the new function.                                                                   // 13049
     * @example                                                                                                        // 13050
     *                                                                                                                 // 13051
     * var users = [                                                                                                   // 13052
     *   { 'user': 'barney' },                                                                                         // 13053
     *   { 'user': 'fred' }                                                                                            // 13054
     * ];                                                                                                              // 13055
     *                                                                                                                 // 13056
     * _.find(users, _.matchesProperty('user', 'fred'));                                                               // 13057
     * // => { 'user': 'fred' }                                                                                        // 13058
     */                                                                                                                // 13059
    function matchesProperty(path, srcValue) {                                                                         // 13060
      return baseMatchesProperty(path, baseClone(srcValue, true));                                                     // 13061
    }                                                                                                                  // 13062
                                                                                                                       // 13063
    /**                                                                                                                // 13064
     * Creates a function that invokes the method at `path` of a given object.                                         // 13065
     * Any additional arguments are provided to the invoked method.                                                    // 13066
     *                                                                                                                 // 13067
     * @static                                                                                                         // 13068
     * @memberOf _                                                                                                     // 13069
     * @category Util                                                                                                  // 13070
     * @param {Array|string} path The path of the method to invoke.                                                    // 13071
     * @param {...*} [args] The arguments to invoke the method with.                                                   // 13072
     * @returns {Function} Returns the new function.                                                                   // 13073
     * @example                                                                                                        // 13074
     *                                                                                                                 // 13075
     * var objects = [                                                                                                 // 13076
     *   { 'a': { 'b': { 'c': _.constant(2) } } },                                                                     // 13077
     *   { 'a': { 'b': { 'c': _.constant(1) } } }                                                                      // 13078
     * ];                                                                                                              // 13079
     *                                                                                                                 // 13080
     * _.map(objects, _.method('a.b.c'));                                                                              // 13081
     * // => [2, 1]                                                                                                    // 13082
     *                                                                                                                 // 13083
     * _.invokeMap(_.sortBy(objects, _.method(['a', 'b', 'c'])), 'a.b.c');                                             // 13084
     * // => [1, 2]                                                                                                    // 13085
     */                                                                                                                // 13086
    var method = rest(function(path, args) {                                                                           // 13087
      return function(object) {                                                                                        // 13088
        return baseInvoke(object, path, args);                                                                         // 13089
      };                                                                                                               // 13090
    });                                                                                                                // 13091
                                                                                                                       // 13092
    /**                                                                                                                // 13093
     * The opposite of `_.method`; this method creates a function that invokes                                         // 13094
     * the method at a given path of `object`. Any additional arguments are                                            // 13095
     * provided to the invoked method.                                                                                 // 13096
     *                                                                                                                 // 13097
     * @static                                                                                                         // 13098
     * @memberOf _                                                                                                     // 13099
     * @category Util                                                                                                  // 13100
     * @param {Object} object The object to query.                                                                     // 13101
     * @param {...*} [args] The arguments to invoke the method with.                                                   // 13102
     * @returns {Function} Returns the new function.                                                                   // 13103
     * @example                                                                                                        // 13104
     *                                                                                                                 // 13105
     * var array = _.times(3, _.constant),                                                                             // 13106
     *     object = { 'a': array, 'b': array, 'c': array };                                                            // 13107
     *                                                                                                                 // 13108
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));                                                                    // 13109
     * // => [2, 0]                                                                                                    // 13110
     *                                                                                                                 // 13111
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));                                                            // 13112
     * // => [2, 0]                                                                                                    // 13113
     */                                                                                                                // 13114
    var methodOf = rest(function(object, args) {                                                                       // 13115
      return function(path) {                                                                                          // 13116
        return baseInvoke(object, path, args);                                                                         // 13117
      };                                                                                                               // 13118
    });                                                                                                                // 13119
                                                                                                                       // 13120
    /**                                                                                                                // 13121
     * Adds all own enumerable function properties of a source object to the                                           // 13122
     * destination object. If `object` is a function then methods are added to                                         // 13123
     * its prototype as well.                                                                                          // 13124
     *                                                                                                                 // 13125
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to                                        // 13126
     * avoid conflicts caused by modifying the original.                                                               // 13127
     *                                                                                                                 // 13128
     * @static                                                                                                         // 13129
     * @memberOf _                                                                                                     // 13130
     * @category Util                                                                                                  // 13131
     * @param {Function|Object} [object=lodash] The destination object.                                                // 13132
     * @param {Object} source The object of functions to add.                                                          // 13133
     * @param {Object} [options] The options object.                                                                   // 13134
     * @param {boolean} [options.chain=true] Specify whether the functions added                                       // 13135
     *  are chainable.                                                                                                 // 13136
     * @returns {Function|Object} Returns `object`.                                                                    // 13137
     * @example                                                                                                        // 13138
     *                                                                                                                 // 13139
     * function vowels(string) {                                                                                       // 13140
     *   return _.filter(string, function(v) {                                                                         // 13141
     *     return /[aeiou]/i.test(v);                                                                                  // 13142
     *   });                                                                                                           // 13143
     * }                                                                                                               // 13144
     *                                                                                                                 // 13145
     * _.mixin({ 'vowels': vowels });                                                                                  // 13146
     * _.vowels('fred');                                                                                               // 13147
     * // => ['e']                                                                                                     // 13148
     *                                                                                                                 // 13149
     * _('fred').vowels().value();                                                                                     // 13150
     * // => ['e']                                                                                                     // 13151
     *                                                                                                                 // 13152
     * _.mixin({ 'vowels': vowels }, { 'chain': false });                                                              // 13153
     * _('fred').vowels();                                                                                             // 13154
     * // => ['e']                                                                                                     // 13155
     */                                                                                                                // 13156
    function mixin(object, source, options) {                                                                          // 13157
      var props = keys(source),                                                                                        // 13158
          methodNames = baseFunctions(source, props);                                                                  // 13159
                                                                                                                       // 13160
      if (options == null &&                                                                                           // 13161
          !(isObject(source) && (methodNames.length || !props.length))) {                                              // 13162
        options = source;                                                                                              // 13163
        source = object;                                                                                               // 13164
        object = this;                                                                                                 // 13165
        methodNames = baseFunctions(source, keys(source));                                                             // 13166
      }                                                                                                                // 13167
      var chain = (isObject(options) && 'chain' in options) ? options.chain : true,                                    // 13168
          isFunc = isFunction(object);                                                                                 // 13169
                                                                                                                       // 13170
      arrayEach(methodNames, function(methodName) {                                                                    // 13171
        var func = source[methodName];                                                                                 // 13172
        object[methodName] = func;                                                                                     // 13173
        if (isFunc) {                                                                                                  // 13174
          object.prototype[methodName] = function() {                                                                  // 13175
            var chainAll = this.__chain__;                                                                             // 13176
            if (chain || chainAll) {                                                                                   // 13177
              var result = object(this.__wrapped__),                                                                   // 13178
                  actions = result.__actions__ = copyArray(this.__actions__);                                          // 13179
                                                                                                                       // 13180
              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });                                    // 13181
              result.__chain__ = chainAll;                                                                             // 13182
              return result;                                                                                           // 13183
            }                                                                                                          // 13184
            return func.apply(object, arrayPush([this.value()], arguments));                                           // 13185
          };                                                                                                           // 13186
        }                                                                                                              // 13187
      });                                                                                                              // 13188
                                                                                                                       // 13189
      return object;                                                                                                   // 13190
    }                                                                                                                  // 13191
                                                                                                                       // 13192
    /**                                                                                                                // 13193
     * Reverts the `_` variable to its previous value and returns a reference to                                       // 13194
     * the `lodash` function.                                                                                          // 13195
     *                                                                                                                 // 13196
     * @static                                                                                                         // 13197
     * @memberOf _                                                                                                     // 13198
     * @category Util                                                                                                  // 13199
     * @returns {Function} Returns the `lodash` function.                                                              // 13200
     * @example                                                                                                        // 13201
     *                                                                                                                 // 13202
     * var lodash = _.noConflict();                                                                                    // 13203
     */                                                                                                                // 13204
    function noConflict() {                                                                                            // 13205
      root._ = oldDash;                                                                                                // 13206
      return this;                                                                                                     // 13207
    }                                                                                                                  // 13208
                                                                                                                       // 13209
    /**                                                                                                                // 13210
     * A no-operation function that returns `undefined` regardless of the                                              // 13211
     * arguments it receives.                                                                                          // 13212
     *                                                                                                                 // 13213
     * @static                                                                                                         // 13214
     * @memberOf _                                                                                                     // 13215
     * @category Util                                                                                                  // 13216
     * @example                                                                                                        // 13217
     *                                                                                                                 // 13218
     * var object = { 'user': 'fred' };                                                                                // 13219
     *                                                                                                                 // 13220
     * _.noop(object) === undefined;                                                                                   // 13221
     * // => true                                                                                                      // 13222
     */                                                                                                                // 13223
    function noop() {                                                                                                  // 13224
      // No operation performed.                                                                                       // 13225
    }                                                                                                                  // 13226
                                                                                                                       // 13227
    /**                                                                                                                // 13228
     * Creates a function that returns its nth argument.                                                               // 13229
     *                                                                                                                 // 13230
     * @static                                                                                                         // 13231
     * @memberOf _                                                                                                     // 13232
     * @category Util                                                                                                  // 13233
     * @param {number} [n=0] The index of the argument to return.                                                      // 13234
     * @returns {Function} Returns the new function.                                                                   // 13235
     * @example                                                                                                        // 13236
     *                                                                                                                 // 13237
     * var func = _.nthArg(1);                                                                                         // 13238
     *                                                                                                                 // 13239
     * func('a', 'b', 'c');                                                                                            // 13240
     * // => 'b'                                                                                                       // 13241
     */                                                                                                                // 13242
    function nthArg(n) {                                                                                               // 13243
      n = toInteger(n);                                                                                                // 13244
      return function() {                                                                                              // 13245
        return arguments[n];                                                                                           // 13246
      };                                                                                                               // 13247
    }                                                                                                                  // 13248
                                                                                                                       // 13249
    /**                                                                                                                // 13250
     * Creates a function that invokes `iteratees` with the arguments provided                                         // 13251
     * to the created function and returns their results.                                                              // 13252
     *                                                                                                                 // 13253
     * @static                                                                                                         // 13254
     * @memberOf _                                                                                                     // 13255
     * @category Util                                                                                                  // 13256
     * @param {...(Function|Function[])} iteratees The iteratees to invoke.                                            // 13257
     * @returns {Function} Returns the new function.                                                                   // 13258
     * @example                                                                                                        // 13259
     *                                                                                                                 // 13260
     * var func = _.over(Math.max, Math.min);                                                                          // 13261
     *                                                                                                                 // 13262
     * func(1, 2, 3, 4);                                                                                               // 13263
     * // => [4, 1]                                                                                                    // 13264
     */                                                                                                                // 13265
    var over = createOver(arrayMap);                                                                                   // 13266
                                                                                                                       // 13267
    /**                                                                                                                // 13268
     * Creates a function that checks if **all** of the `predicates` return                                            // 13269
     * truthy when invoked with the arguments provided to the created function.                                        // 13270
     *                                                                                                                 // 13271
     * @static                                                                                                         // 13272
     * @memberOf _                                                                                                     // 13273
     * @category Util                                                                                                  // 13274
     * @param {...(Function|Function[])} predicates The predicates to check.                                           // 13275
     * @returns {Function} Returns the new function.                                                                   // 13276
     * @example                                                                                                        // 13277
     *                                                                                                                 // 13278
     * var func = _.overEvery(Boolean, isFinite);                                                                      // 13279
     *                                                                                                                 // 13280
     * func('1');                                                                                                      // 13281
     * // => true                                                                                                      // 13282
     *                                                                                                                 // 13283
     * func(null);                                                                                                     // 13284
     * // => false                                                                                                     // 13285
     *                                                                                                                 // 13286
     * func(NaN);                                                                                                      // 13287
     * // => false                                                                                                     // 13288
     */                                                                                                                // 13289
    var overEvery = createOver(arrayEvery);                                                                            // 13290
                                                                                                                       // 13291
    /**                                                                                                                // 13292
     * Creates a function that checks if **any** of the `predicates` return                                            // 13293
     * truthy when invoked with the arguments provided to the created function.                                        // 13294
     *                                                                                                                 // 13295
     * @static                                                                                                         // 13296
     * @memberOf _                                                                                                     // 13297
     * @category Util                                                                                                  // 13298
     * @param {...(Function|Function[])} predicates The predicates to check.                                           // 13299
     * @returns {Function} Returns the new function.                                                                   // 13300
     * @example                                                                                                        // 13301
     *                                                                                                                 // 13302
     * var func = _.overSome(Boolean, isFinite);                                                                       // 13303
     *                                                                                                                 // 13304
     * func('1');                                                                                                      // 13305
     * // => true                                                                                                      // 13306
     *                                                                                                                 // 13307
     * func(null);                                                                                                     // 13308
     * // => true                                                                                                      // 13309
     *                                                                                                                 // 13310
     * func(NaN);                                                                                                      // 13311
     * // => false                                                                                                     // 13312
     */                                                                                                                // 13313
    var overSome = createOver(arraySome);                                                                              // 13314
                                                                                                                       // 13315
    /**                                                                                                                // 13316
     * Creates a function that returns the value at `path` of a given object.                                          // 13317
     *                                                                                                                 // 13318
     * @static                                                                                                         // 13319
     * @memberOf _                                                                                                     // 13320
     * @category Util                                                                                                  // 13321
     * @param {Array|string} path The path of the property to get.                                                     // 13322
     * @returns {Function} Returns the new function.                                                                   // 13323
     * @example                                                                                                        // 13324
     *                                                                                                                 // 13325
     * var objects = [                                                                                                 // 13326
     *   { 'a': { 'b': { 'c': 2 } } },                                                                                 // 13327
     *   { 'a': { 'b': { 'c': 1 } } }                                                                                  // 13328
     * ];                                                                                                              // 13329
     *                                                                                                                 // 13330
     * _.map(objects, _.property('a.b.c'));                                                                            // 13331
     * // => [2, 1]                                                                                                    // 13332
     *                                                                                                                 // 13333
     * _.map(_.sortBy(objects, _.property(['a', 'b', 'c'])), 'a.b.c');                                                 // 13334
     * // => [1, 2]                                                                                                    // 13335
     */                                                                                                                // 13336
    function property(path) {                                                                                          // 13337
      return isKey(path) ? baseProperty(path) : basePropertyDeep(path);                                                // 13338
    }                                                                                                                  // 13339
                                                                                                                       // 13340
    /**                                                                                                                // 13341
     * The opposite of `_.property`; this method creates a function that returns                                       // 13342
     * the value at a given path of `object`.                                                                          // 13343
     *                                                                                                                 // 13344
     * @static                                                                                                         // 13345
     * @memberOf _                                                                                                     // 13346
     * @category Util                                                                                                  // 13347
     * @param {Object} object The object to query.                                                                     // 13348
     * @returns {Function} Returns the new function.                                                                   // 13349
     * @example                                                                                                        // 13350
     *                                                                                                                 // 13351
     * var array = [0, 1, 2],                                                                                          // 13352
     *     object = { 'a': array, 'b': array, 'c': array };                                                            // 13353
     *                                                                                                                 // 13354
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));                                                                  // 13355
     * // => [2, 0]                                                                                                    // 13356
     *                                                                                                                 // 13357
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));                                                          // 13358
     * // => [2, 0]                                                                                                    // 13359
     */                                                                                                                // 13360
    function propertyOf(object) {                                                                                      // 13361
      return function(path) {                                                                                          // 13362
        return object == null ? undefined : baseGet(object, path);                                                     // 13363
      };                                                                                                               // 13364
    }                                                                                                                  // 13365
                                                                                                                       // 13366
    /**                                                                                                                // 13367
     * Creates an array of numbers (positive and/or negative) progressing from                                         // 13368
     * `start` up to, but not including, `end`. A step of `-1` is used if a negative                                   // 13369
     * `start` is specified without an `end` or `step`. If `end` is not specified                                      // 13370
     * it's set to `start` with `start` then set to `0`.  If `end` is less than                                        // 13371
     * `start` a zero-length range is created unless a negative `step` is specified.                                   // 13372
     *                                                                                                                 // 13373
     * **Note:** JavaScript follows the IEEE-754 standard for resolving                                                // 13374
     * floating-point values which can produce unexpected results.                                                     // 13375
     *                                                                                                                 // 13376
     * @static                                                                                                         // 13377
     * @memberOf _                                                                                                     // 13378
     * @category Util                                                                                                  // 13379
     * @param {number} [start=0] The start of the range.                                                               // 13380
     * @param {number} end The end of the range.                                                                       // 13381
     * @param {number} [step=1] The value to increment or decrement by.                                                // 13382
     * @returns {Array} Returns the new array of numbers.                                                              // 13383
     * @example                                                                                                        // 13384
     *                                                                                                                 // 13385
     * _.range(4);                                                                                                     // 13386
     * // => [0, 1, 2, 3]                                                                                              // 13387
     *                                                                                                                 // 13388
     * _.range(-4);                                                                                                    // 13389
     * // => [0, -1, -2, -3]                                                                                           // 13390
     *                                                                                                                 // 13391
     * _.range(1, 5);                                                                                                  // 13392
     * // => [1, 2, 3, 4]                                                                                              // 13393
     *                                                                                                                 // 13394
     * _.range(0, 20, 5);                                                                                              // 13395
     * // => [0, 5, 10, 15]                                                                                            // 13396
     *                                                                                                                 // 13397
     * _.range(0, -4, -1);                                                                                             // 13398
     * // => [0, -1, -2, -3]                                                                                           // 13399
     *                                                                                                                 // 13400
     * _.range(1, 4, 0);                                                                                               // 13401
     * // => [1, 1, 1]                                                                                                 // 13402
     *                                                                                                                 // 13403
     * _.range(0);                                                                                                     // 13404
     * // => []                                                                                                        // 13405
     */                                                                                                                // 13406
    var range = createRange();                                                                                         // 13407
                                                                                                                       // 13408
    /**                                                                                                                // 13409
     * This method is like `_.range` except that it populates values in                                                // 13410
     * descending order.                                                                                               // 13411
     *                                                                                                                 // 13412
     * @static                                                                                                         // 13413
     * @memberOf _                                                                                                     // 13414
     * @category Util                                                                                                  // 13415
     * @param {number} [start=0] The start of the range.                                                               // 13416
     * @param {number} end The end of the range.                                                                       // 13417
     * @param {number} [step=1] The value to increment or decrement by.                                                // 13418
     * @returns {Array} Returns the new array of numbers.                                                              // 13419
     * @example                                                                                                        // 13420
     *                                                                                                                 // 13421
     * _.rangeRight(4);                                                                                                // 13422
     * // => [3, 2, 1, 0]                                                                                              // 13423
     *                                                                                                                 // 13424
     * _.rangeRight(-4);                                                                                               // 13425
     * // => [-3, -2, -1, 0]                                                                                           // 13426
     *                                                                                                                 // 13427
     * _.rangeRight(1, 5);                                                                                             // 13428
     * // => [4, 3, 2, 1]                                                                                              // 13429
     *                                                                                                                 // 13430
     * _.rangeRight(0, 20, 5);                                                                                         // 13431
     * // => [15, 10, 5, 0]                                                                                            // 13432
     *                                                                                                                 // 13433
     * _.rangeRight(0, -4, -1);                                                                                        // 13434
     * // => [-3, -2, -1, 0]                                                                                           // 13435
     *                                                                                                                 // 13436
     * _.rangeRight(1, 4, 0);                                                                                          // 13437
     * // => [1, 1, 1]                                                                                                 // 13438
     *                                                                                                                 // 13439
     * _.rangeRight(0);                                                                                                // 13440
     * // => []                                                                                                        // 13441
     */                                                                                                                // 13442
    var rangeRight = createRange(true);                                                                                // 13443
                                                                                                                       // 13444
    /**                                                                                                                // 13445
     * Invokes the iteratee function `n` times, returning an array of the results                                      // 13446
     * of each invocation. The iteratee is invoked with one argument; (index).                                         // 13447
     *                                                                                                                 // 13448
     * @static                                                                                                         // 13449
     * @memberOf _                                                                                                     // 13450
     * @category Util                                                                                                  // 13451
     * @param {number} n The number of times to invoke `iteratee`.                                                     // 13452
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.                                     // 13453
     * @returns {Array} Returns the array of results.                                                                  // 13454
     * @example                                                                                                        // 13455
     *                                                                                                                 // 13456
     * _.times(3, String);                                                                                             // 13457
     * // => ['0', '1', '2']                                                                                           // 13458
     *                                                                                                                 // 13459
     *  _.times(4, _.constant(true));                                                                                  // 13460
     * // => [true, true, true, true]                                                                                  // 13461
     */                                                                                                                // 13462
    function times(n, iteratee) {                                                                                      // 13463
      n = toInteger(n);                                                                                                // 13464
      if (n < 1 || n > MAX_SAFE_INTEGER) {                                                                             // 13465
        return [];                                                                                                     // 13466
      }                                                                                                                // 13467
      var index = MAX_ARRAY_LENGTH,                                                                                    // 13468
          length = nativeMin(n, MAX_ARRAY_LENGTH);                                                                     // 13469
                                                                                                                       // 13470
      iteratee = toFunction(iteratee);                                                                                 // 13471
      n -= MAX_ARRAY_LENGTH;                                                                                           // 13472
                                                                                                                       // 13473
      var result = baseTimes(length, iteratee);                                                                        // 13474
      while (++index < n) {                                                                                            // 13475
        iteratee(index);                                                                                               // 13476
      }                                                                                                                // 13477
      return result;                                                                                                   // 13478
    }                                                                                                                  // 13479
                                                                                                                       // 13480
    /**                                                                                                                // 13481
     * Converts `value` to a property path array.                                                                      // 13482
     *                                                                                                                 // 13483
     * @static                                                                                                         // 13484
     * @memberOf _                                                                                                     // 13485
     * @category Util                                                                                                  // 13486
     * @param {*} value The value to convert.                                                                          // 13487
     * @returns {Array} Returns the new property path array.                                                           // 13488
     * @example                                                                                                        // 13489
     *                                                                                                                 // 13490
     * _.toPath('a.b.c');                                                                                              // 13491
     * // => ['a', 'b', 'c']                                                                                           // 13492
     *                                                                                                                 // 13493
     * _.toPath('a[0].b.c');                                                                                           // 13494
     * // => ['a', '0', 'b', 'c']                                                                                      // 13495
     *                                                                                                                 // 13496
     * var path = ['a', 'b', 'c'],                                                                                     // 13497
     *     newPath = _.toPath(path);                                                                                   // 13498
     *                                                                                                                 // 13499
     * console.log(newPath);                                                                                           // 13500
     * // => ['a', 'b', 'c']                                                                                           // 13501
     *                                                                                                                 // 13502
     * console.log(path === newPath);                                                                                  // 13503
     * // => false                                                                                                     // 13504
     */                                                                                                                // 13505
    function toPath(value) {                                                                                           // 13506
      return isArray(value) ? arrayMap(value, String) : stringToPath(value);                                           // 13507
    }                                                                                                                  // 13508
                                                                                                                       // 13509
    /**                                                                                                                // 13510
     * Generates a unique ID. If `prefix` is provided the ID is appended to it.                                        // 13511
     *                                                                                                                 // 13512
     * @static                                                                                                         // 13513
     * @memberOf _                                                                                                     // 13514
     * @category Util                                                                                                  // 13515
     * @param {string} [prefix] The value to prefix the ID with.                                                       // 13516
     * @returns {string} Returns the unique ID.                                                                        // 13517
     * @example                                                                                                        // 13518
     *                                                                                                                 // 13519
     * _.uniqueId('contact_');                                                                                         // 13520
     * // => 'contact_104'                                                                                             // 13521
     *                                                                                                                 // 13522
     * _.uniqueId();                                                                                                   // 13523
     * // => '105'                                                                                                     // 13524
     */                                                                                                                // 13525
    function uniqueId(prefix) {                                                                                        // 13526
      var id = ++idCounter;                                                                                            // 13527
      return toString(prefix) + id;                                                                                    // 13528
    }                                                                                                                  // 13529
                                                                                                                       // 13530
    /*------------------------------------------------------------------------*/                                       // 13531
                                                                                                                       // 13532
    /**                                                                                                                // 13533
     * Adds two numbers.                                                                                               // 13534
     *                                                                                                                 // 13535
     * @static                                                                                                         // 13536
     * @memberOf _                                                                                                     // 13537
     * @category Math                                                                                                  // 13538
     * @param {number} augend The first number in an addition.                                                         // 13539
     * @param {number} addend The second number in an addition.                                                        // 13540
     * @returns {number} Returns the total.                                                                            // 13541
     * @example                                                                                                        // 13542
     *                                                                                                                 // 13543
     * _.add(6, 4);                                                                                                    // 13544
     * // => 10                                                                                                        // 13545
     */                                                                                                                // 13546
    function add(augend, addend) {                                                                                     // 13547
      var result;                                                                                                      // 13548
      if (augend !== undefined) {                                                                                      // 13549
        result = augend;                                                                                               // 13550
      }                                                                                                                // 13551
      if (addend !== undefined) {                                                                                      // 13552
        result = result === undefined ? addend : (result + addend);                                                    // 13553
      }                                                                                                                // 13554
      return result;                                                                                                   // 13555
    }                                                                                                                  // 13556
                                                                                                                       // 13557
    /**                                                                                                                // 13558
     * Computes `number` rounded up to `precision`.                                                                    // 13559
     *                                                                                                                 // 13560
     * @static                                                                                                         // 13561
     * @memberOf _                                                                                                     // 13562
     * @category Math                                                                                                  // 13563
     * @param {number} number The number to round up.                                                                  // 13564
     * @param {number} [precision=0] The precision to round up to.                                                     // 13565
     * @returns {number} Returns the rounded up number.                                                                // 13566
     * @example                                                                                                        // 13567
     *                                                                                                                 // 13568
     * _.ceil(4.006);                                                                                                  // 13569
     * // => 5                                                                                                         // 13570
     *                                                                                                                 // 13571
     * _.ceil(6.004, 2);                                                                                               // 13572
     * // => 6.01                                                                                                      // 13573
     *                                                                                                                 // 13574
     * _.ceil(6040, -2);                                                                                               // 13575
     * // => 6100                                                                                                      // 13576
     */                                                                                                                // 13577
    var ceil = createRound('ceil');                                                                                    // 13578
                                                                                                                       // 13579
    /**                                                                                                                // 13580
     * Computes `number` rounded down to `precision`.                                                                  // 13581
     *                                                                                                                 // 13582
     * @static                                                                                                         // 13583
     * @memberOf _                                                                                                     // 13584
     * @category Math                                                                                                  // 13585
     * @param {number} number The number to round down.                                                                // 13586
     * @param {number} [precision=0] The precision to round down to.                                                   // 13587
     * @returns {number} Returns the rounded down number.                                                              // 13588
     * @example                                                                                                        // 13589
     *                                                                                                                 // 13590
     * _.floor(4.006);                                                                                                 // 13591
     * // => 4                                                                                                         // 13592
     *                                                                                                                 // 13593
     * _.floor(0.046, 2);                                                                                              // 13594
     * // => 0.04                                                                                                      // 13595
     *                                                                                                                 // 13596
     * _.floor(4060, -2);                                                                                              // 13597
     * // => 4000                                                                                                      // 13598
     */                                                                                                                // 13599
    var floor = createRound('floor');                                                                                  // 13600
                                                                                                                       // 13601
    /**                                                                                                                // 13602
     * Computes the maximum value of `array`. If `array` is empty or falsey                                            // 13603
     * `undefined` is returned.                                                                                        // 13604
     *                                                                                                                 // 13605
     * @static                                                                                                         // 13606
     * @memberOf _                                                                                                     // 13607
     * @category Math                                                                                                  // 13608
     * @param {Array} array The array to iterate over.                                                                 // 13609
     * @returns {*} Returns the maximum value.                                                                         // 13610
     * @example                                                                                                        // 13611
     *                                                                                                                 // 13612
     * _.max([4, 2, 8, 6]);                                                                                            // 13613
     * // => 8                                                                                                         // 13614
     *                                                                                                                 // 13615
     * _.max([]);                                                                                                      // 13616
     * // => undefined                                                                                                 // 13617
     */                                                                                                                // 13618
    function max(array) {                                                                                              // 13619
      return (array && array.length)                                                                                   // 13620
        ? baseExtremum(array, identity, gt)                                                                            // 13621
        : undefined;                                                                                                   // 13622
    }                                                                                                                  // 13623
                                                                                                                       // 13624
    /**                                                                                                                // 13625
     * This method is like `_.max` except that it accepts `iteratee` which is                                          // 13626
     * invoked for each element in `array` to generate the criterion by which                                          // 13627
     * the value is ranked. The iteratee is invoked with one argument: (value).                                        // 13628
     *                                                                                                                 // 13629
     * @static                                                                                                         // 13630
     * @memberOf _                                                                                                     // 13631
     * @category Math                                                                                                  // 13632
     * @param {Array} array The array to iterate over.                                                                 // 13633
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.                         // 13634
     * @returns {*} Returns the maximum value.                                                                         // 13635
     * @example                                                                                                        // 13636
     *                                                                                                                 // 13637
     * var objects = [{ 'n': 1 }, { 'n': 2 }];                                                                         // 13638
     *                                                                                                                 // 13639
     * _.maxBy(objects, function(o) { return o.a; });                                                                  // 13640
     * // => { 'n': 2 }                                                                                                // 13641
     *                                                                                                                 // 13642
     * // using the `_.property` iteratee shorthand                                                                    // 13643
     * _.maxBy(objects, 'n');                                                                                          // 13644
     * // => { 'n': 2 }                                                                                                // 13645
     */                                                                                                                // 13646
    function maxBy(array, iteratee) {                                                                                  // 13647
      return (array && array.length)                                                                                   // 13648
        ? baseExtremum(array, getIteratee(iteratee), gt)                                                               // 13649
        : undefined;                                                                                                   // 13650
    }                                                                                                                  // 13651
                                                                                                                       // 13652
    /**                                                                                                                // 13653
     * Computes the mean of the values in `array`.                                                                     // 13654
     *                                                                                                                 // 13655
     * @static                                                                                                         // 13656
     * @memberOf _                                                                                                     // 13657
     * @category Math                                                                                                  // 13658
     * @param {Array} array The array to iterate over.                                                                 // 13659
     * @returns {number} Returns the mean.                                                                             // 13660
     * @example                                                                                                        // 13661
     *                                                                                                                 // 13662
     * _.mean([4, 2, 8, 6]);                                                                                           // 13663
     * // => 5                                                                                                         // 13664
     */                                                                                                                // 13665
    function mean(array) {                                                                                             // 13666
      return sum(array) / (array ? array.length : 0);                                                                  // 13667
    }                                                                                                                  // 13668
                                                                                                                       // 13669
    /**                                                                                                                // 13670
     * Computes the minimum value of `array`. If `array` is empty or falsey                                            // 13671
     * `undefined` is returned.                                                                                        // 13672
     *                                                                                                                 // 13673
     * @static                                                                                                         // 13674
     * @memberOf _                                                                                                     // 13675
     * @category Math                                                                                                  // 13676
     * @param {Array} array The array to iterate over.                                                                 // 13677
     * @returns {*} Returns the minimum value.                                                                         // 13678
     * @example                                                                                                        // 13679
     *                                                                                                                 // 13680
     * _.min([4, 2, 8, 6]);                                                                                            // 13681
     * // => 2                                                                                                         // 13682
     *                                                                                                                 // 13683
     * _.min([]);                                                                                                      // 13684
     * // => undefined                                                                                                 // 13685
     */                                                                                                                // 13686
    function min(array) {                                                                                              // 13687
      return (array && array.length)                                                                                   // 13688
        ? baseExtremum(array, identity, lt)                                                                            // 13689
        : undefined;                                                                                                   // 13690
    }                                                                                                                  // 13691
                                                                                                                       // 13692
    /**                                                                                                                // 13693
     * This method is like `_.min` except that it accepts `iteratee` which is                                          // 13694
     * invoked for each element in `array` to generate the criterion by which                                          // 13695
     * the value is ranked. The iteratee is invoked with one argument: (value).                                        // 13696
     *                                                                                                                 // 13697
     * @static                                                                                                         // 13698
     * @memberOf _                                                                                                     // 13699
     * @category Math                                                                                                  // 13700
     * @param {Array} array The array to iterate over.                                                                 // 13701
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.                         // 13702
     * @returns {*} Returns the minimum value.                                                                         // 13703
     * @example                                                                                                        // 13704
     *                                                                                                                 // 13705
     * var objects = [{ 'n': 1 }, { 'n': 2 }];                                                                         // 13706
     *                                                                                                                 // 13707
     * _.minBy(objects, function(o) { return o.a; });                                                                  // 13708
     * // => { 'n': 1 }                                                                                                // 13709
     *                                                                                                                 // 13710
     * // using the `_.property` iteratee shorthand                                                                    // 13711
     * _.minBy(objects, 'n');                                                                                          // 13712
     * // => { 'n': 1 }                                                                                                // 13713
     */                                                                                                                // 13714
    function minBy(array, iteratee) {                                                                                  // 13715
      return (array && array.length)                                                                                   // 13716
        ? baseExtremum(array, getIteratee(iteratee), lt)                                                               // 13717
        : undefined;                                                                                                   // 13718
    }                                                                                                                  // 13719
                                                                                                                       // 13720
    /**                                                                                                                // 13721
     * Computes `number` rounded to `precision`.                                                                       // 13722
     *                                                                                                                 // 13723
     * @static                                                                                                         // 13724
     * @memberOf _                                                                                                     // 13725
     * @category Math                                                                                                  // 13726
     * @param {number} number The number to round.                                                                     // 13727
     * @param {number} [precision=0] The precision to round to.                                                        // 13728
     * @returns {number} Returns the rounded number.                                                                   // 13729
     * @example                                                                                                        // 13730
     *                                                                                                                 // 13731
     * _.round(4.006);                                                                                                 // 13732
     * // => 4                                                                                                         // 13733
     *                                                                                                                 // 13734
     * _.round(4.006, 2);                                                                                              // 13735
     * // => 4.01                                                                                                      // 13736
     *                                                                                                                 // 13737
     * _.round(4060, -2);                                                                                              // 13738
     * // => 4100                                                                                                      // 13739
     */                                                                                                                // 13740
    var round = createRound('round');                                                                                  // 13741
                                                                                                                       // 13742
    /**                                                                                                                // 13743
     * Subtract two numbers.                                                                                           // 13744
     *                                                                                                                 // 13745
     * @static                                                                                                         // 13746
     * @memberOf _                                                                                                     // 13747
     * @category Math                                                                                                  // 13748
     * @param {number} minuend The first number in a subtraction.                                                      // 13749
     * @param {number} subtrahend The second number in a subtraction.                                                  // 13750
     * @returns {number} Returns the difference.                                                                       // 13751
     * @example                                                                                                        // 13752
     *                                                                                                                 // 13753
     * _.subtract(6, 4);                                                                                               // 13754
     * // => 2                                                                                                         // 13755
     */                                                                                                                // 13756
    function subtract(minuend, subtrahend) {                                                                           // 13757
      var result;                                                                                                      // 13758
      if (minuend !== undefined) {                                                                                     // 13759
        result = minuend;                                                                                              // 13760
      }                                                                                                                // 13761
      if (subtrahend !== undefined) {                                                                                  // 13762
        result = result === undefined ? subtrahend : (result - subtrahend);                                            // 13763
      }                                                                                                                // 13764
      return result;                                                                                                   // 13765
    }                                                                                                                  // 13766
                                                                                                                       // 13767
    /**                                                                                                                // 13768
     * Computes the sum of the values in `array`.                                                                      // 13769
     *                                                                                                                 // 13770
     * @static                                                                                                         // 13771
     * @memberOf _                                                                                                     // 13772
     * @category Math                                                                                                  // 13773
     * @param {Array} array The array to iterate over.                                                                 // 13774
     * @returns {number} Returns the sum.                                                                              // 13775
     * @example                                                                                                        // 13776
     *                                                                                                                 // 13777
     * _.sum([4, 2, 8, 6]);                                                                                            // 13778
     * // => 20                                                                                                        // 13779
     */                                                                                                                // 13780
    function sum(array) {                                                                                              // 13781
      return (array && array.length)                                                                                   // 13782
        ? baseSum(array, identity)                                                                                     // 13783
        : undefined;                                                                                                   // 13784
    }                                                                                                                  // 13785
                                                                                                                       // 13786
    /**                                                                                                                // 13787
     * This method is like `_.sum` except that it accepts `iteratee` which is                                          // 13788
     * invoked for each element in `array` to generate the value to be summed.                                         // 13789
     * The iteratee is invoked with one argument: (value).                                                             // 13790
     *                                                                                                                 // 13791
     * @static                                                                                                         // 13792
     * @memberOf _                                                                                                     // 13793
     * @category Math                                                                                                  // 13794
     * @param {Array} array The array to iterate over.                                                                 // 13795
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.                         // 13796
     * @returns {number} Returns the sum.                                                                              // 13797
     * @example                                                                                                        // 13798
     *                                                                                                                 // 13799
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];                                                 // 13800
     *                                                                                                                 // 13801
     * _.sumBy(objects, function(o) { return o.n; });                                                                  // 13802
     * // => 20                                                                                                        // 13803
     *                                                                                                                 // 13804
     * // using the `_.property` iteratee shorthand                                                                    // 13805
     * _.sumBy(objects, 'n');                                                                                          // 13806
     * // => 20                                                                                                        // 13807
     */                                                                                                                // 13808
    function sumBy(array, iteratee) {                                                                                  // 13809
      return (array && array.length)                                                                                   // 13810
        ? baseSum(array, getIteratee(iteratee))                                                                        // 13811
        : undefined;                                                                                                   // 13812
    }                                                                                                                  // 13813
                                                                                                                       // 13814
    /*------------------------------------------------------------------------*/                                       // 13815
                                                                                                                       // 13816
    // Ensure wrappers are instances of `baseLodash`.                                                                  // 13817
    lodash.prototype = baseLodash.prototype;                                                                           // 13818
                                                                                                                       // 13819
    LodashWrapper.prototype = baseCreate(baseLodash.prototype);                                                        // 13820
    LodashWrapper.prototype.constructor = LodashWrapper;                                                               // 13821
                                                                                                                       // 13822
    LazyWrapper.prototype = baseCreate(baseLodash.prototype);                                                          // 13823
    LazyWrapper.prototype.constructor = LazyWrapper;                                                                   // 13824
                                                                                                                       // 13825
    // Avoid inheriting from `Object.prototype` when possible.                                                         // 13826
    Hash.prototype = nativeCreate ? nativeCreate(null) : objectProto;                                                  // 13827
                                                                                                                       // 13828
    // Add functions to the `MapCache`.                                                                                // 13829
    MapCache.prototype.clear = mapClear;                                                                               // 13830
    MapCache.prototype['delete'] = mapDelete;                                                                          // 13831
    MapCache.prototype.get = mapGet;                                                                                   // 13832
    MapCache.prototype.has = mapHas;                                                                                   // 13833
    MapCache.prototype.set = mapSet;                                                                                   // 13834
                                                                                                                       // 13835
    // Add functions to the `SetCache`.                                                                                // 13836
    SetCache.prototype.push = cachePush;                                                                               // 13837
                                                                                                                       // 13838
    // Add functions to the `Stack` cache.                                                                             // 13839
    Stack.prototype.clear = stackClear;                                                                                // 13840
    Stack.prototype['delete'] = stackDelete;                                                                           // 13841
    Stack.prototype.get = stackGet;                                                                                    // 13842
    Stack.prototype.has = stackHas;                                                                                    // 13843
    Stack.prototype.set = stackSet;                                                                                    // 13844
                                                                                                                       // 13845
    // Assign cache to `_.memoize`.                                                                                    // 13846
    memoize.Cache = MapCache;                                                                                          // 13847
                                                                                                                       // 13848
    // Add functions that return wrapped values when chaining.                                                         // 13849
    lodash.after = after;                                                                                              // 13850
    lodash.ary = ary;                                                                                                  // 13851
    lodash.assign = assign;                                                                                            // 13852
    lodash.assignIn = assignIn;                                                                                        // 13853
    lodash.assignInWith = assignInWith;                                                                                // 13854
    lodash.assignWith = assignWith;                                                                                    // 13855
    lodash.at = at;                                                                                                    // 13856
    lodash.before = before;                                                                                            // 13857
    lodash.bind = bind;                                                                                                // 13858
    lodash.bindAll = bindAll;                                                                                          // 13859
    lodash.bindKey = bindKey;                                                                                          // 13860
    lodash.chain = chain;                                                                                              // 13861
    lodash.chunk = chunk;                                                                                              // 13862
    lodash.compact = compact;                                                                                          // 13863
    lodash.concat = concat;                                                                                            // 13864
    lodash.cond = cond;                                                                                                // 13865
    lodash.conforms = conforms;                                                                                        // 13866
    lodash.constant = constant;                                                                                        // 13867
    lodash.countBy = countBy;                                                                                          // 13868
    lodash.create = create;                                                                                            // 13869
    lodash.curry = curry;                                                                                              // 13870
    lodash.curryRight = curryRight;                                                                                    // 13871
    lodash.debounce = debounce;                                                                                        // 13872
    lodash.defaults = defaults;                                                                                        // 13873
    lodash.defaultsDeep = defaultsDeep;                                                                                // 13874
    lodash.defer = defer;                                                                                              // 13875
    lodash.delay = delay;                                                                                              // 13876
    lodash.difference = difference;                                                                                    // 13877
    lodash.differenceBy = differenceBy;                                                                                // 13878
    lodash.differenceWith = differenceWith;                                                                            // 13879
    lodash.drop = drop;                                                                                                // 13880
    lodash.dropRight = dropRight;                                                                                      // 13881
    lodash.dropRightWhile = dropRightWhile;                                                                            // 13882
    lodash.dropWhile = dropWhile;                                                                                      // 13883
    lodash.fill = fill;                                                                                                // 13884
    lodash.filter = filter;                                                                                            // 13885
    lodash.flatMap = flatMap;                                                                                          // 13886
    lodash.flatten = flatten;                                                                                          // 13887
    lodash.flattenDeep = flattenDeep;                                                                                  // 13888
    lodash.flip = flip;                                                                                                // 13889
    lodash.flow = flow;                                                                                                // 13890
    lodash.flowRight = flowRight;                                                                                      // 13891
    lodash.fromPairs = fromPairs;                                                                                      // 13892
    lodash.functions = functions;                                                                                      // 13893
    lodash.functionsIn = functionsIn;                                                                                  // 13894
    lodash.groupBy = groupBy;                                                                                          // 13895
    lodash.initial = initial;                                                                                          // 13896
    lodash.intersection = intersection;                                                                                // 13897
    lodash.intersectionBy = intersectionBy;                                                                            // 13898
    lodash.intersectionWith = intersectionWith;                                                                        // 13899
    lodash.invert = invert;                                                                                            // 13900
    lodash.invokeMap = invokeMap;                                                                                      // 13901
    lodash.iteratee = iteratee;                                                                                        // 13902
    lodash.keyBy = keyBy;                                                                                              // 13903
    lodash.keys = keys;                                                                                                // 13904
    lodash.keysIn = keysIn;                                                                                            // 13905
    lodash.map = map;                                                                                                  // 13906
    lodash.mapKeys = mapKeys;                                                                                          // 13907
    lodash.mapValues = mapValues;                                                                                      // 13908
    lodash.matches = matches;                                                                                          // 13909
    lodash.matchesProperty = matchesProperty;                                                                          // 13910
    lodash.memoize = memoize;                                                                                          // 13911
    lodash.merge = merge;                                                                                              // 13912
    lodash.mergeWith = mergeWith;                                                                                      // 13913
    lodash.method = method;                                                                                            // 13914
    lodash.methodOf = methodOf;                                                                                        // 13915
    lodash.mixin = mixin;                                                                                              // 13916
    lodash.negate = negate;                                                                                            // 13917
    lodash.nthArg = nthArg;                                                                                            // 13918
    lodash.omit = omit;                                                                                                // 13919
    lodash.omitBy = omitBy;                                                                                            // 13920
    lodash.once = once;                                                                                                // 13921
    lodash.orderBy = orderBy;                                                                                          // 13922
    lodash.over = over;                                                                                                // 13923
    lodash.overArgs = overArgs;                                                                                        // 13924
    lodash.overEvery = overEvery;                                                                                      // 13925
    lodash.overSome = overSome;                                                                                        // 13926
    lodash.partial = partial;                                                                                          // 13927
    lodash.partialRight = partialRight;                                                                                // 13928
    lodash.partition = partition;                                                                                      // 13929
    lodash.pick = pick;                                                                                                // 13930
    lodash.pickBy = pickBy;                                                                                            // 13931
    lodash.property = property;                                                                                        // 13932
    lodash.propertyOf = propertyOf;                                                                                    // 13933
    lodash.pull = pull;                                                                                                // 13934
    lodash.pullAll = pullAll;                                                                                          // 13935
    lodash.pullAllBy = pullAllBy;                                                                                      // 13936
    lodash.pullAt = pullAt;                                                                                            // 13937
    lodash.range = range;                                                                                              // 13938
    lodash.rangeRight = rangeRight;                                                                                    // 13939
    lodash.rearg = rearg;                                                                                              // 13940
    lodash.reject = reject;                                                                                            // 13941
    lodash.remove = remove;                                                                                            // 13942
    lodash.rest = rest;                                                                                                // 13943
    lodash.reverse = reverse;                                                                                          // 13944
    lodash.sampleSize = sampleSize;                                                                                    // 13945
    lodash.set = set;                                                                                                  // 13946
    lodash.setWith = setWith;                                                                                          // 13947
    lodash.shuffle = shuffle;                                                                                          // 13948
    lodash.slice = slice;                                                                                              // 13949
    lodash.sortBy = sortBy;                                                                                            // 13950
    lodash.sortedUniq = sortedUniq;                                                                                    // 13951
    lodash.sortedUniqBy = sortedUniqBy;                                                                                // 13952
    lodash.split = split;                                                                                              // 13953
    lodash.spread = spread;                                                                                            // 13954
    lodash.tail = tail;                                                                                                // 13955
    lodash.take = take;                                                                                                // 13956
    lodash.takeRight = takeRight;                                                                                      // 13957
    lodash.takeRightWhile = takeRightWhile;                                                                            // 13958
    lodash.takeWhile = takeWhile;                                                                                      // 13959
    lodash.tap = tap;                                                                                                  // 13960
    lodash.throttle = throttle;                                                                                        // 13961
    lodash.thru = thru;                                                                                                // 13962
    lodash.toArray = toArray;                                                                                          // 13963
    lodash.toPairs = toPairs;                                                                                          // 13964
    lodash.toPairsIn = toPairsIn;                                                                                      // 13965
    lodash.toPath = toPath;                                                                                            // 13966
    lodash.toPlainObject = toPlainObject;                                                                              // 13967
    lodash.transform = transform;                                                                                      // 13968
    lodash.unary = unary;                                                                                              // 13969
    lodash.union = union;                                                                                              // 13970
    lodash.unionBy = unionBy;                                                                                          // 13971
    lodash.unionWith = unionWith;                                                                                      // 13972
    lodash.uniq = uniq;                                                                                                // 13973
    lodash.uniqBy = uniqBy;                                                                                            // 13974
    lodash.uniqWith = uniqWith;                                                                                        // 13975
    lodash.unset = unset;                                                                                              // 13976
    lodash.unzip = unzip;                                                                                              // 13977
    lodash.unzipWith = unzipWith;                                                                                      // 13978
    lodash.values = values;                                                                                            // 13979
    lodash.valuesIn = valuesIn;                                                                                        // 13980
    lodash.without = without;                                                                                          // 13981
    lodash.words = words;                                                                                              // 13982
    lodash.wrap = wrap;                                                                                                // 13983
    lodash.xor = xor;                                                                                                  // 13984
    lodash.xorBy = xorBy;                                                                                              // 13985
    lodash.xorWith = xorWith;                                                                                          // 13986
    lodash.zip = zip;                                                                                                  // 13987
    lodash.zipObject = zipObject;                                                                                      // 13988
    lodash.zipWith = zipWith;                                                                                          // 13989
                                                                                                                       // 13990
    // Add aliases.                                                                                                    // 13991
    lodash.each = forEach;                                                                                             // 13992
    lodash.eachRight = forEachRight;                                                                                   // 13993
    lodash.extend = assignIn;                                                                                          // 13994
    lodash.extendWith = assignInWith;                                                                                  // 13995
                                                                                                                       // 13996
    // Add functions to `lodash.prototype`.                                                                            // 13997
    mixin(lodash, lodash);                                                                                             // 13998
                                                                                                                       // 13999
    /*------------------------------------------------------------------------*/                                       // 14000
                                                                                                                       // 14001
    // Add functions that return unwrapped values when chaining.                                                       // 14002
    lodash.add = add;                                                                                                  // 14003
    lodash.attempt = attempt;                                                                                          // 14004
    lodash.camelCase = camelCase;                                                                                      // 14005
    lodash.capitalize = capitalize;                                                                                    // 14006
    lodash.ceil = ceil;                                                                                                // 14007
    lodash.clamp = clamp;                                                                                              // 14008
    lodash.clone = clone;                                                                                              // 14009
    lodash.cloneDeep = cloneDeep;                                                                                      // 14010
    lodash.cloneDeepWith = cloneDeepWith;                                                                              // 14011
    lodash.cloneWith = cloneWith;                                                                                      // 14012
    lodash.deburr = deburr;                                                                                            // 14013
    lodash.endsWith = endsWith;                                                                                        // 14014
    lodash.eq = eq;                                                                                                    // 14015
    lodash.escape = escape;                                                                                            // 14016
    lodash.escapeRegExp = escapeRegExp;                                                                                // 14017
    lodash.every = every;                                                                                              // 14018
    lodash.find = find;                                                                                                // 14019
    lodash.findIndex = findIndex;                                                                                      // 14020
    lodash.findKey = findKey;                                                                                          // 14021
    lodash.findLast = findLast;                                                                                        // 14022
    lodash.findLastIndex = findLastIndex;                                                                              // 14023
    lodash.findLastKey = findLastKey;                                                                                  // 14024
    lodash.floor = floor;                                                                                              // 14025
    lodash.forEach = forEach;                                                                                          // 14026
    lodash.forEachRight = forEachRight;                                                                                // 14027
    lodash.forIn = forIn;                                                                                              // 14028
    lodash.forInRight = forInRight;                                                                                    // 14029
    lodash.forOwn = forOwn;                                                                                            // 14030
    lodash.forOwnRight = forOwnRight;                                                                                  // 14031
    lodash.get = get;                                                                                                  // 14032
    lodash.gt = gt;                                                                                                    // 14033
    lodash.gte = gte;                                                                                                  // 14034
    lodash.has = has;                                                                                                  // 14035
    lodash.hasIn = hasIn;                                                                                              // 14036
    lodash.head = head;                                                                                                // 14037
    lodash.identity = identity;                                                                                        // 14038
    lodash.includes = includes;                                                                                        // 14039
    lodash.indexOf = indexOf;                                                                                          // 14040
    lodash.inRange = inRange;                                                                                          // 14041
    lodash.invoke = invoke;                                                                                            // 14042
    lodash.isArguments = isArguments;                                                                                  // 14043
    lodash.isArray = isArray;                                                                                          // 14044
    lodash.isArrayLike = isArrayLike;                                                                                  // 14045
    lodash.isArrayLikeObject = isArrayLikeObject;                                                                      // 14046
    lodash.isBoolean = isBoolean;                                                                                      // 14047
    lodash.isDate = isDate;                                                                                            // 14048
    lodash.isElement = isElement;                                                                                      // 14049
    lodash.isEmpty = isEmpty;                                                                                          // 14050
    lodash.isEqual = isEqual;                                                                                          // 14051
    lodash.isEqualWith = isEqualWith;                                                                                  // 14052
    lodash.isError = isError;                                                                                          // 14053
    lodash.isFinite = isFinite;                                                                                        // 14054
    lodash.isFunction = isFunction;                                                                                    // 14055
    lodash.isInteger = isInteger;                                                                                      // 14056
    lodash.isLength = isLength;                                                                                        // 14057
    lodash.isMatch = isMatch;                                                                                          // 14058
    lodash.isMatchWith = isMatchWith;                                                                                  // 14059
    lodash.isNaN = isNaN;                                                                                              // 14060
    lodash.isNative = isNative;                                                                                        // 14061
    lodash.isNil = isNil;                                                                                              // 14062
    lodash.isNull = isNull;                                                                                            // 14063
    lodash.isNumber = isNumber;                                                                                        // 14064
    lodash.isObject = isObject;                                                                                        // 14065
    lodash.isObjectLike = isObjectLike;                                                                                // 14066
    lodash.isPlainObject = isPlainObject;                                                                              // 14067
    lodash.isRegExp = isRegExp;                                                                                        // 14068
    lodash.isSafeInteger = isSafeInteger;                                                                              // 14069
    lodash.isString = isString;                                                                                        // 14070
    lodash.isSymbol = isSymbol;                                                                                        // 14071
    lodash.isTypedArray = isTypedArray;                                                                                // 14072
    lodash.isUndefined = isUndefined;                                                                                  // 14073
    lodash.join = join;                                                                                                // 14074
    lodash.kebabCase = kebabCase;                                                                                      // 14075
    lodash.last = last;                                                                                                // 14076
    lodash.lastIndexOf = lastIndexOf;                                                                                  // 14077
    lodash.lowerCase = lowerCase;                                                                                      // 14078
    lodash.lowerFirst = lowerFirst;                                                                                    // 14079
    lodash.lt = lt;                                                                                                    // 14080
    lodash.lte = lte;                                                                                                  // 14081
    lodash.max = max;                                                                                                  // 14082
    lodash.maxBy = maxBy;                                                                                              // 14083
    lodash.mean = mean;                                                                                                // 14084
    lodash.min = min;                                                                                                  // 14085
    lodash.minBy = minBy;                                                                                              // 14086
    lodash.noConflict = noConflict;                                                                                    // 14087
    lodash.noop = noop;                                                                                                // 14088
    lodash.now = now;                                                                                                  // 14089
    lodash.pad = pad;                                                                                                  // 14090
    lodash.padEnd = padEnd;                                                                                            // 14091
    lodash.padStart = padStart;                                                                                        // 14092
    lodash.parseInt = parseInt;                                                                                        // 14093
    lodash.random = random;                                                                                            // 14094
    lodash.reduce = reduce;                                                                                            // 14095
    lodash.reduceRight = reduceRight;                                                                                  // 14096
    lodash.repeat = repeat;                                                                                            // 14097
    lodash.replace = replace;                                                                                          // 14098
    lodash.result = result;                                                                                            // 14099
    lodash.round = round;                                                                                              // 14100
    lodash.runInContext = runInContext;                                                                                // 14101
    lodash.sample = sample;                                                                                            // 14102
    lodash.size = size;                                                                                                // 14103
    lodash.snakeCase = snakeCase;                                                                                      // 14104
    lodash.some = some;                                                                                                // 14105
    lodash.sortedIndex = sortedIndex;                                                                                  // 14106
    lodash.sortedIndexBy = sortedIndexBy;                                                                              // 14107
    lodash.sortedIndexOf = sortedIndexOf;                                                                              // 14108
    lodash.sortedLastIndex = sortedLastIndex;                                                                          // 14109
    lodash.sortedLastIndexBy = sortedLastIndexBy;                                                                      // 14110
    lodash.sortedLastIndexOf = sortedLastIndexOf;                                                                      // 14111
    lodash.startCase = startCase;                                                                                      // 14112
    lodash.startsWith = startsWith;                                                                                    // 14113
    lodash.subtract = subtract;                                                                                        // 14114
    lodash.sum = sum;                                                                                                  // 14115
    lodash.sumBy = sumBy;                                                                                              // 14116
    lodash.template = template;                                                                                        // 14117
    lodash.times = times;                                                                                              // 14118
    lodash.toInteger = toInteger;                                                                                      // 14119
    lodash.toLength = toLength;                                                                                        // 14120
    lodash.toLower = toLower;                                                                                          // 14121
    lodash.toNumber = toNumber;                                                                                        // 14122
    lodash.toSafeInteger = toSafeInteger;                                                                              // 14123
    lodash.toString = toString;                                                                                        // 14124
    lodash.toUpper = toUpper;                                                                                          // 14125
    lodash.trim = trim;                                                                                                // 14126
    lodash.trimEnd = trimEnd;                                                                                          // 14127
    lodash.trimStart = trimStart;                                                                                      // 14128
    lodash.truncate = truncate;                                                                                        // 14129
    lodash.unescape = unescape;                                                                                        // 14130
    lodash.uniqueId = uniqueId;                                                                                        // 14131
    lodash.upperCase = upperCase;                                                                                      // 14132
    lodash.upperFirst = upperFirst;                                                                                    // 14133
                                                                                                                       // 14134
    // Add aliases.                                                                                                    // 14135
    lodash.first = head;                                                                                               // 14136
                                                                                                                       // 14137
    mixin(lodash, (function() {                                                                                        // 14138
      var source = {};                                                                                                 // 14139
      baseForOwn(lodash, function(func, methodName) {                                                                  // 14140
        if (!hasOwnProperty.call(lodash.prototype, methodName)) {                                                      // 14141
          source[methodName] = func;                                                                                   // 14142
        }                                                                                                              // 14143
      });                                                                                                              // 14144
      return source;                                                                                                   // 14145
    }()), { 'chain': false });                                                                                         // 14146
                                                                                                                       // 14147
    /*------------------------------------------------------------------------*/                                       // 14148
                                                                                                                       // 14149
    /**                                                                                                                // 14150
     * The semantic version number.                                                                                    // 14151
     *                                                                                                                 // 14152
     * @static                                                                                                         // 14153
     * @memberOf _                                                                                                     // 14154
     * @type string                                                                                                    // 14155
     */                                                                                                                // 14156
    lodash.VERSION = VERSION;                                                                                          // 14157
                                                                                                                       // 14158
    // Assign default placeholders.                                                                                    // 14159
    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {            // 14160
      lodash[methodName].placeholder = lodash;                                                                         // 14161
    });                                                                                                                // 14162
                                                                                                                       // 14163
    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.                                                   // 14164
    arrayEach(['drop', 'take'], function(methodName, index) {                                                          // 14165
      LazyWrapper.prototype[methodName] = function(n) {                                                                // 14166
        var filtered = this.__filtered__;                                                                              // 14167
        if (filtered && !index) {                                                                                      // 14168
          return new LazyWrapper(this);                                                                                // 14169
        }                                                                                                              // 14170
        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);                                                          // 14171
                                                                                                                       // 14172
        var result = this.clone();                                                                                     // 14173
        if (filtered) {                                                                                                // 14174
          result.__takeCount__ = nativeMin(n, result.__takeCount__);                                                   // 14175
        } else {                                                                                                       // 14176
          result.__views__.push({ 'size': nativeMin(n, MAX_ARRAY_LENGTH), 'type': methodName + (result.__dir__ < 0 ? 'Right' : '') });
        }                                                                                                              // 14178
        return result;                                                                                                 // 14179
      };                                                                                                               // 14180
                                                                                                                       // 14181
      LazyWrapper.prototype[methodName + 'Right'] = function(n) {                                                      // 14182
        return this.reverse()[methodName](n).reverse();                                                                // 14183
      };                                                                                                               // 14184
    });                                                                                                                // 14185
                                                                                                                       // 14186
    // Add `LazyWrapper` methods that accept an `iteratee` value.                                                      // 14187
    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {                                            // 14188
      var type = index + 1,                                                                                            // 14189
          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;                                              // 14190
                                                                                                                       // 14191
      LazyWrapper.prototype[methodName] = function(iteratee) {                                                         // 14192
        var result = this.clone();                                                                                     // 14193
        result.__iteratees__.push({ 'iteratee': getIteratee(iteratee, 3), 'type': type });                             // 14194
        result.__filtered__ = result.__filtered__ || isFilter;                                                         // 14195
        return result;                                                                                                 // 14196
      };                                                                                                               // 14197
    });                                                                                                                // 14198
                                                                                                                       // 14199
    // Add `LazyWrapper` methods for `_.head` and `_.last`.                                                            // 14200
    arrayEach(['head', 'last'], function(methodName, index) {                                                          // 14201
      var takeName = 'take' + (index ? 'Right' : '');                                                                  // 14202
                                                                                                                       // 14203
      LazyWrapper.prototype[methodName] = function() {                                                                 // 14204
        return this[takeName](1).value()[0];                                                                           // 14205
      };                                                                                                               // 14206
    });                                                                                                                // 14207
                                                                                                                       // 14208
    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.                                                         // 14209
    arrayEach(['initial', 'tail'], function(methodName, index) {                                                       // 14210
      var dropName = 'drop' + (index ? '' : 'Right');                                                                  // 14211
                                                                                                                       // 14212
      LazyWrapper.prototype[methodName] = function() {                                                                 // 14213
        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);                                          // 14214
      };                                                                                                               // 14215
    });                                                                                                                // 14216
                                                                                                                       // 14217
    LazyWrapper.prototype.compact = function() {                                                                       // 14218
      return this.filter(identity);                                                                                    // 14219
    };                                                                                                                 // 14220
                                                                                                                       // 14221
    LazyWrapper.prototype.find = function(predicate) {                                                                 // 14222
      return this.filter(predicate).head();                                                                            // 14223
    };                                                                                                                 // 14224
                                                                                                                       // 14225
    LazyWrapper.prototype.findLast = function(predicate) {                                                             // 14226
      return this.reverse().find(predicate);                                                                           // 14227
    };                                                                                                                 // 14228
                                                                                                                       // 14229
    LazyWrapper.prototype.invokeMap = rest(function(path, args) {                                                      // 14230
      if (typeof path == 'function') {                                                                                 // 14231
        return new LazyWrapper(this);                                                                                  // 14232
      }                                                                                                                // 14233
      return this.map(function(value) {                                                                                // 14234
        return baseInvoke(value, path, args);                                                                          // 14235
      });                                                                                                              // 14236
    });                                                                                                                // 14237
                                                                                                                       // 14238
    LazyWrapper.prototype.reject = function(predicate) {                                                               // 14239
      predicate = getIteratee(predicate, 3);                                                                           // 14240
      return this.filter(function(value) {                                                                             // 14241
        return !predicate(value);                                                                                      // 14242
      });                                                                                                              // 14243
    };                                                                                                                 // 14244
                                                                                                                       // 14245
    LazyWrapper.prototype.slice = function(start, end) {                                                               // 14246
      start = toInteger(start);                                                                                        // 14247
                                                                                                                       // 14248
      var result = this;                                                                                               // 14249
      if (result.__filtered__ && (start > 0 || end < 0)) {                                                             // 14250
        return new LazyWrapper(result);                                                                                // 14251
      }                                                                                                                // 14252
      if (start < 0) {                                                                                                 // 14253
        result = result.takeRight(-start);                                                                             // 14254
      } else if (start) {                                                                                              // 14255
        result = result.drop(start);                                                                                   // 14256
      }                                                                                                                // 14257
      if (end !== undefined) {                                                                                         // 14258
        end = toInteger(end);                                                                                          // 14259
        result = end < 0 ? result.dropRight(-end) : result.take(end - start);                                          // 14260
      }                                                                                                                // 14261
      return result;                                                                                                   // 14262
    };                                                                                                                 // 14263
                                                                                                                       // 14264
    LazyWrapper.prototype.takeRightWhile = function(predicate) {                                                       // 14265
      return this.reverse().takeWhile(predicate).reverse();                                                            // 14266
    };                                                                                                                 // 14267
                                                                                                                       // 14268
    LazyWrapper.prototype.toArray = function() {                                                                       // 14269
      return this.take(MAX_ARRAY_LENGTH);                                                                              // 14270
    };                                                                                                                 // 14271
                                                                                                                       // 14272
    // Add `LazyWrapper` methods to `lodash.prototype`.                                                                // 14273
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {                                                     // 14274
      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),                                       // 14275
          isTaker = /^(?:head|last)$/.test(methodName),                                                                // 14276
          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],                // 14277
          retUnwrapped = isTaker || /^find/.test(methodName);                                                          // 14278
                                                                                                                       // 14279
      if (!lodashFunc) {                                                                                               // 14280
        return;                                                                                                        // 14281
      }                                                                                                                // 14282
      lodash.prototype[methodName] = function() {                                                                      // 14283
        var value = this.__wrapped__,                                                                                  // 14284
            args = isTaker ? [1] : arguments,                                                                          // 14285
            isLazy = value instanceof LazyWrapper,                                                                     // 14286
            iteratee = args[0],                                                                                        // 14287
            useLazy = isLazy || isArray(value);                                                                        // 14288
                                                                                                                       // 14289
        var interceptor = function(value) {                                                                            // 14290
          var result = lodashFunc.apply(lodash, arrayPush([value], args));                                             // 14291
          return (isTaker && chainAll) ? result[0] : result;                                                           // 14292
        };                                                                                                             // 14293
                                                                                                                       // 14294
        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {                       // 14295
          // Avoid lazy use if the iteratee has a "length" value other than `1`.                                       // 14296
          isLazy = useLazy = false;                                                                                    // 14297
        }                                                                                                              // 14298
        var chainAll = this.__chain__,                                                                                 // 14299
            isHybrid = !!this.__actions__.length,                                                                      // 14300
            isUnwrapped = retUnwrapped && !chainAll,                                                                   // 14301
            onlyLazy = isLazy && !isHybrid;                                                                            // 14302
                                                                                                                       // 14303
        if (!retUnwrapped && useLazy) {                                                                                // 14304
          value = onlyLazy ? value : new LazyWrapper(this);                                                            // 14305
          var result = func.apply(value, args);                                                                        // 14306
          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });                      // 14307
          return new LodashWrapper(result, chainAll);                                                                  // 14308
        }                                                                                                              // 14309
        if (isUnwrapped && onlyLazy) {                                                                                 // 14310
          return func.apply(this, args);                                                                               // 14311
        }                                                                                                              // 14312
        result = this.thru(interceptor);                                                                               // 14313
        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;                                  // 14314
      };                                                                                                               // 14315
    });                                                                                                                // 14316
                                                                                                                       // 14317
    // Add `Array` and `String` methods to `lodash.prototype`.                                                         // 14318
    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {                            // 14319
      var func = arrayProto[methodName],                                                                               // 14320
          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',                                     // 14321
          retUnwrapped = /^(?:pop|shift)$/.test(methodName);                                                           // 14322
                                                                                                                       // 14323
      lodash.prototype[methodName] = function() {                                                                      // 14324
        var args = arguments;                                                                                          // 14325
        if (retUnwrapped && !this.__chain__) {                                                                         // 14326
          return func.apply(this.value(), args);                                                                       // 14327
        }                                                                                                              // 14328
        return this[chainName](function(value) {                                                                       // 14329
          return func.apply(value, args);                                                                              // 14330
        });                                                                                                            // 14331
      };                                                                                                               // 14332
    });                                                                                                                // 14333
                                                                                                                       // 14334
    // Map minified function names to their real names.                                                                // 14335
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {                                                     // 14336
      var lodashFunc = lodash[methodName];                                                                             // 14337
      if (lodashFunc) {                                                                                                // 14338
        var key = (lodashFunc.name + ''),                                                                              // 14339
            names = realNames[key] || (realNames[key] = []);                                                           // 14340
                                                                                                                       // 14341
        names.push({ 'name': methodName, 'func': lodashFunc });                                                        // 14342
      }                                                                                                                // 14343
    });                                                                                                                // 14344
                                                                                                                       // 14345
    realNames[createHybridWrapper(undefined, BIND_KEY_FLAG).name] = [{ 'name': 'wrapper', 'func': undefined }];        // 14346
                                                                                                                       // 14347
    // Add functions to the lazy wrapper.                                                                              // 14348
    LazyWrapper.prototype.clone = lazyClone;                                                                           // 14349
    LazyWrapper.prototype.reverse = lazyReverse;                                                                       // 14350
    LazyWrapper.prototype.value = lazyValue;                                                                           // 14351
                                                                                                                       // 14352
    // Add chaining functions to the `lodash` wrapper.                                                                 // 14353
    lodash.prototype.at = wrapperAt;                                                                                   // 14354
    lodash.prototype.chain = wrapperChain;                                                                             // 14355
    lodash.prototype.commit = wrapperCommit;                                                                           // 14356
    lodash.prototype.flatMap = wrapperFlatMap;                                                                         // 14357
    lodash.prototype.next = wrapperNext;                                                                               // 14358
    lodash.prototype.plant = wrapperPlant;                                                                             // 14359
    lodash.prototype.reverse = wrapperReverse;                                                                         // 14360
    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;                        // 14361
                                                                                                                       // 14362
    if (iteratorSymbol) {                                                                                              // 14363
      lodash.prototype[iteratorSymbol] = wrapperToIterator;                                                            // 14364
    }                                                                                                                  // 14365
    return lodash;                                                                                                     // 14366
  }                                                                                                                    // 14367
                                                                                                                       // 14368
  /*--------------------------------------------------------------------------*/                                       // 14369
                                                                                                                       // 14370
  // Export lodash.                                                                                                    // 14371
  var _ = runInContext();                                                                                              // 14372
                                                                                                                       // 14373
  // Expose lodash on the free variable `window` or `self` when available. This                                        // 14374
  // prevents errors in cases where lodash is loaded by a script tag in the presence                                   // 14375
  // of an AMD loader. See http://requirejs.org/docs/errors.html#mismatch for more details.                            // 14376
  (freeWindow || freeSelf || {})._ = _;                                                                                // 14377
                                                                                                                       // 14378
  // Some AMD build optimizers like r.js check for condition patterns like the following:                              // 14379
  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {                                    // 14380
    // Define as an anonymous module so, through path mapping, it can be                                               // 14381
    // referenced as the "underscore" module.                                                                          // 14382
    define(function() {                                                                                                // 14383
      return _;                                                                                                        // 14384
    });                                                                                                                // 14385
  }                                                                                                                    // 14386
  // Check for `exports` after `define` in case a build optimizer adds an `exports` object.                            // 14387
  else if (freeExports && freeModule) {                                                                                // 14388
    // Export for Node.js.                                                                                             // 14389
    if (moduleExports) {                                                                                               // 14390
      (freeModule.exports = _)._ = _;                                                                                  // 14391
    }                                                                                                                  // 14392
    // Export for CommonJS support.                                                                                    // 14393
    freeExports._ = _;                                                                                                 // 14394
  }                                                                                                                    // 14395
  else {                                                                                                               // 14396
    // Export to the global object.                                                                                    // 14397
    root._ = _;                                                                                                        // 14398
  }                                                                                                                    // 14399
}.call(this));                                                                                                         // 14400
                                                                                                                       // 14401
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/erasaur_meteor-lodash/export.js                                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
lodash = this._;                                                                                                       // 1
_ = lodash;                                                                                                            // 2
                                                                                                                       // 3
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
(function (pkg, symbols) {
  for (var s in symbols)
    (s in pkg) || (pkg[s] = symbols[s]);
})(Package['erasaur:meteor-lodash'] = {}, {
  lodash: lodash,
  _: _
});

})();
